                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.8.0 #5117 (Mar 23 2008) (MINGW32)
                              4 ; This file was generated Fri Jun 17 15:10:27 2016
                              5 ;--------------------------------------------------------
                              6 	.module tasks
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _AB4_LED2
                             13 	.globl _AB4_LED1
                             14 	.globl _AB4_SW2
                             15 	.globl _AB4_SW1
                             16 	.globl _SW2
                             17 	.globl _LED
                             18 	.globl _P7_7
                             19 	.globl _P7_6
                             20 	.globl _P7_5
                             21 	.globl _P7_4
                             22 	.globl _P7_3
                             23 	.globl _P7_2
                             24 	.globl _P7_1
                             25 	.globl _P7_0
                             26 	.globl _SPIF
                             27 	.globl _WCOL
                             28 	.globl _MODF
                             29 	.globl _RXOVRN
                             30 	.globl _NSSMD1
                             31 	.globl _NSSMD0
                             32 	.globl _TXBMT
                             33 	.globl _SPIEN
                             34 	.globl _P6_7
                             35 	.globl _P6_6
                             36 	.globl _P6_5
                             37 	.globl _P6_4
                             38 	.globl _P6_3
                             39 	.globl _P6_2
                             40 	.globl _P6_1
                             41 	.globl _P6_0
                             42 	.globl _AD2EN
                             43 	.globl _AD2TM
                             44 	.globl _AD2INT
                             45 	.globl _AD2BUSY
                             46 	.globl _AD2CM2
                             47 	.globl _AD2CM1
                             48 	.globl _AD2CM0
                             49 	.globl _AD2WINT
                             50 	.globl _AD0EN
                             51 	.globl _AD0TM
                             52 	.globl _AD0INT
                             53 	.globl _AD0BUSY
                             54 	.globl _AD0CM1
                             55 	.globl _AD0CM0
                             56 	.globl _AD0WINT
                             57 	.globl _AD0LJST
                             58 	.globl _P5_7
                             59 	.globl _P5_6
                             60 	.globl _P5_5
                             61 	.globl _P5_4
                             62 	.globl _P5_3
                             63 	.globl _P5_2
                             64 	.globl _P5_1
                             65 	.globl _P5_0
                             66 	.globl _CF
                             67 	.globl _CR
                             68 	.globl _CCF5
                             69 	.globl _CCF4
                             70 	.globl _CCF3
                             71 	.globl _CCF2
                             72 	.globl _CCF1
                             73 	.globl _CCF0
                             74 	.globl _CY
                             75 	.globl _AC
                             76 	.globl _F0
                             77 	.globl _RS1
                             78 	.globl _RS0
                             79 	.globl _OV
                             80 	.globl _F1
                             81 	.globl _P
                             82 	.globl _P4_7
                             83 	.globl _P4_6
                             84 	.globl _P4_5
                             85 	.globl _P4_4
                             86 	.globl _P4_3
                             87 	.globl _P4_2
                             88 	.globl _P4_1
                             89 	.globl _P4_0
                             90 	.globl _TF4
                             91 	.globl _EXF4
                             92 	.globl _EXEN4
                             93 	.globl _TR4
                             94 	.globl _CT4
                             95 	.globl _CPRL4
                             96 	.globl _TF3
                             97 	.globl _EXF3
                             98 	.globl _EXEN3
                             99 	.globl _TR3
                            100 	.globl _CT3
                            101 	.globl _CPRL3
                            102 	.globl _TF2
                            103 	.globl _EXF2
                            104 	.globl _EXEN2
                            105 	.globl _TR2
                            106 	.globl _CT2
                            107 	.globl _CPRL2
                            108 	.globl _MAC0HO
                            109 	.globl _MAC0Z
                            110 	.globl _MAC0SO
                            111 	.globl _MAC0N
                            112 	.globl _BUSY
                            113 	.globl _ENSMB
                            114 	.globl _STA
                            115 	.globl _STO
                            116 	.globl _SI
                            117 	.globl _AA
                            118 	.globl _SMBFTE
                            119 	.globl _SMBTOE
                            120 	.globl _PT2
                            121 	.globl _PS
                            122 	.globl _PS0
                            123 	.globl _PT1
                            124 	.globl _PX1
                            125 	.globl _PT0
                            126 	.globl _PX0
                            127 	.globl _P3_7
                            128 	.globl _P3_6
                            129 	.globl _P3_5
                            130 	.globl _P3_4
                            131 	.globl _P3_3
                            132 	.globl _P3_2
                            133 	.globl _P3_1
                            134 	.globl _P3_0
                            135 	.globl _EA
                            136 	.globl _ET2
                            137 	.globl _ES
                            138 	.globl _ES0
                            139 	.globl _ET1
                            140 	.globl _EX1
                            141 	.globl _ET0
                            142 	.globl _EX0
                            143 	.globl _P2_7
                            144 	.globl _P2_6
                            145 	.globl _P2_5
                            146 	.globl _P2_4
                            147 	.globl _P2_3
                            148 	.globl _P2_2
                            149 	.globl _P2_1
                            150 	.globl _P2_0
                            151 	.globl _S1MODE
                            152 	.globl _MCE1
                            153 	.globl _REN1
                            154 	.globl _TB81
                            155 	.globl _RB81
                            156 	.globl _TI1
                            157 	.globl _RI1
                            158 	.globl _SM00
                            159 	.globl _SM10
                            160 	.globl _SM20
                            161 	.globl _REN
                            162 	.globl _REN0
                            163 	.globl _TB80
                            164 	.globl _RB80
                            165 	.globl _TI
                            166 	.globl _TI0
                            167 	.globl _RI
                            168 	.globl _RI0
                            169 	.globl _P1_7
                            170 	.globl _P1_6
                            171 	.globl _P1_5
                            172 	.globl _P1_4
                            173 	.globl _P1_3
                            174 	.globl _P1_2
                            175 	.globl _P1_1
                            176 	.globl _P1_0
                            177 	.globl _FLHBUSY
                            178 	.globl _CP1EN
                            179 	.globl _CP1OUT
                            180 	.globl _CP1RIF
                            181 	.globl _CP1FIF
                            182 	.globl _CP1HYP1
                            183 	.globl _CP1HYP0
                            184 	.globl _CP1HYN1
                            185 	.globl _CP1HYN0
                            186 	.globl _CP0EN
                            187 	.globl _CP0OUT
                            188 	.globl _CP0RIF
                            189 	.globl _CP0FIF
                            190 	.globl _CP0HYP1
                            191 	.globl _CP0HYP0
                            192 	.globl _CP0HYN1
                            193 	.globl _CP0HYN0
                            194 	.globl _TF1
                            195 	.globl _TR1
                            196 	.globl _TF0
                            197 	.globl _TR0
                            198 	.globl _IE1
                            199 	.globl _IT1
                            200 	.globl _IE0
                            201 	.globl _IT0
                            202 	.globl _P0_7
                            203 	.globl _P0_6
                            204 	.globl _P0_5
                            205 	.globl _P0_4
                            206 	.globl _P0_3
                            207 	.globl _P0_2
                            208 	.globl _P0_1
                            209 	.globl _P0_0
                            210 	.globl _MAC0RND
                            211 	.globl _MAC0ACC
                            212 	.globl _MAC0A
                            213 	.globl _RCAP4
                            214 	.globl _TMR4
                            215 	.globl _DAC1
                            216 	.globl _RCAP3
                            217 	.globl _TMR3
                            218 	.globl _PCA0CP5
                            219 	.globl _PCA0CP4
                            220 	.globl _PCA0CP3
                            221 	.globl _PCA0CP2
                            222 	.globl _PCA0CP1
                            223 	.globl _PCA0CP0
                            224 	.globl _PCA0
                            225 	.globl _DAC0
                            226 	.globl _ADC0LT
                            227 	.globl _ADC0GT
                            228 	.globl _ADC0
                            229 	.globl _RCAP2
                            230 	.globl _TMR2
                            231 	.globl _TMR1
                            232 	.globl _TMR0
                            233 	.globl _P7
                            234 	.globl _P6
                            235 	.globl _XBR2
                            236 	.globl _XBR1
                            237 	.globl _XBR0
                            238 	.globl _P5
                            239 	.globl _P4
                            240 	.globl _FLACL
                            241 	.globl _P1MDIN
                            242 	.globl _P3MDOUT
                            243 	.globl _P2MDOUT
                            244 	.globl _P1MDOUT
                            245 	.globl _P0MDOUT
                            246 	.globl _CCH0LC
                            247 	.globl _CCH0TN
                            248 	.globl _CCH0CN
                            249 	.globl _P7MDOUT
                            250 	.globl _P6MDOUT
                            251 	.globl _P5MDOUT
                            252 	.globl _P4MDOUT
                            253 	.globl _CCH0MA
                            254 	.globl _CLKSEL
                            255 	.globl _SFRPGCN
                            256 	.globl _PLL0FLT
                            257 	.globl _PLL0MUL
                            258 	.globl _PLL0DIV
                            259 	.globl _OSCXCN
                            260 	.globl _OSCICL
                            261 	.globl _OSCICN
                            262 	.globl _PLL0CN
                            263 	.globl _FLSTAT
                            264 	.globl _MAC0RNDH
                            265 	.globl _MAC0RNDL
                            266 	.globl _MAC0CF
                            267 	.globl _MAC0AH
                            268 	.globl _MAC0AL
                            269 	.globl _MAC0STA
                            270 	.globl _MAC0OVR
                            271 	.globl _MAC0ACC3
                            272 	.globl _MAC0ACC2
                            273 	.globl _MAC0ACC1
                            274 	.globl _MAC0ACC0
                            275 	.globl _MAC0BH
                            276 	.globl _MAC0BL
                            277 	.globl _ADC2CN
                            278 	.globl _TMR4H
                            279 	.globl _TMR4L
                            280 	.globl _RCAP4H
                            281 	.globl _RCAP4L
                            282 	.globl _TMR4CF
                            283 	.globl _TMR4CN
                            284 	.globl _ADC2LT
                            285 	.globl _ADC2GT
                            286 	.globl _ADC2
                            287 	.globl _ADC2CF
                            288 	.globl _AMX2SL
                            289 	.globl _AMX2CF
                            290 	.globl _CPT1MD
                            291 	.globl _CPT1CN
                            292 	.globl _DAC1CN
                            293 	.globl _DAC1H
                            294 	.globl _DAC1L
                            295 	.globl _TMR3H
                            296 	.globl _TMR3L
                            297 	.globl _RCAP3H
                            298 	.globl _RCAP3L
                            299 	.globl _TMR3CF
                            300 	.globl _TMR3CN
                            301 	.globl _SBUF1
                            302 	.globl _SCON1
                            303 	.globl _CPT0MD
                            304 	.globl _CPT0CN
                            305 	.globl _PCA0CPH1
                            306 	.globl _PCA0CPL1
                            307 	.globl _PCA0CPH0
                            308 	.globl _PCA0CPL0
                            309 	.globl _PCA0H
                            310 	.globl _PCA0L
                            311 	.globl _SPI0CN
                            312 	.globl _RSTSRC
                            313 	.globl _PCA0CPH4
                            314 	.globl _PCA0CPL4
                            315 	.globl _PCA0CPH3
                            316 	.globl _PCA0CPL3
                            317 	.globl _PCA0CPH2
                            318 	.globl _PCA0CPL2
                            319 	.globl _ADC0CN
                            320 	.globl _PCA0CPH5
                            321 	.globl _PCA0CPL5
                            322 	.globl _PCA0CPM5
                            323 	.globl _PCA0CPM4
                            324 	.globl _PCA0CPM3
                            325 	.globl _PCA0CPM2
                            326 	.globl _PCA0CPM1
                            327 	.globl _PCA0CPM0
                            328 	.globl _PCA0MD
                            329 	.globl _PCA0CN
                            330 	.globl _DAC0CN
                            331 	.globl _DAC0H
                            332 	.globl _DAC0L
                            333 	.globl _REF0CN
                            334 	.globl _SMB0CR
                            335 	.globl _TH2
                            336 	.globl _TMR2H
                            337 	.globl _TL2
                            338 	.globl _TMR2L
                            339 	.globl _RCAP2H
                            340 	.globl _RCAP2L
                            341 	.globl _TMR2CF
                            342 	.globl _TMR2CN
                            343 	.globl _ADC0LTH
                            344 	.globl _ADC0LTL
                            345 	.globl _ADC0GTH
                            346 	.globl _ADC0GTL
                            347 	.globl _SMB0ADR
                            348 	.globl _SMB0DAT
                            349 	.globl _SMB0STA
                            350 	.globl _SMB0CN
                            351 	.globl _ADC0H
                            352 	.globl _ADC0L
                            353 	.globl _ADC0CF
                            354 	.globl _AMX0SL
                            355 	.globl _AMX0CF
                            356 	.globl _SADEN0
                            357 	.globl _FLSCL
                            358 	.globl _SADDR0
                            359 	.globl _EMI0CF
                            360 	.globl __XPAGE
                            361 	.globl _EMI0CN
                            362 	.globl _EMI0TC
                            363 	.globl _SPI0CKR
                            364 	.globl _SPI0DAT
                            365 	.globl _SPI0CFG
                            366 	.globl _SBUF
                            367 	.globl _SBUF0
                            368 	.globl _SCON
                            369 	.globl _SCON0
                            370 	.globl _SSTA0
                            371 	.globl _PSCTL
                            372 	.globl _CKCON
                            373 	.globl _TH1
                            374 	.globl _TH0
                            375 	.globl _TL1
                            376 	.globl _TL0
                            377 	.globl _TMOD
                            378 	.globl _TCON
                            379 	.globl _WDTCN
                            380 	.globl _EIP2
                            381 	.globl _EIP1
                            382 	.globl _B
                            383 	.globl _EIE2
                            384 	.globl _EIE1
                            385 	.globl _ACC
                            386 	.globl _PSW
                            387 	.globl _IP
                            388 	.globl _PSBANK
                            389 	.globl _P3
                            390 	.globl _IE
                            391 	.globl _P2
                            392 	.globl _P1
                            393 	.globl _PCON
                            394 	.globl _SFRLAST
                            395 	.globl _SFRNEXT
                            396 	.globl _SFRPAGE
                            397 	.globl _DPH
                            398 	.globl _DPL
                            399 	.globl _SP
                            400 	.globl _P0
                            401 	.globl _pxCurrentTCB
                            402 	.globl _xTaskCreate
                            403 	.globl _vTaskDelayUntil
                            404 	.globl _vTaskDelay
                            405 	.globl _vTaskStartScheduler
                            406 	.globl _vTaskEndScheduler
                            407 	.globl _vTaskSuspendAll
                            408 	.globl _xTaskResumeAll
                            409 	.globl _xTaskGetTickCount
                            410 	.globl _uxTaskGetNumberOfTasks
                            411 	.globl _vTaskIncrementTick
                            412 	.globl _vTaskSwitchContext
                            413 	.globl _vTaskPlaceOnEventList
                            414 	.globl _xTaskRemoveFromEventList
                            415 	.globl _vTaskSetTimeOutState
                            416 	.globl _xTaskCheckForTimeOut
                            417 	.globl _vTaskMissedYield
                            418 ;--------------------------------------------------------
                            419 ; special function registers
                            420 ;--------------------------------------------------------
                            421 	.area RSEG    (DATA)
                    0080    422 G$P0$0$0 == 0x0080
                    0080    423 _P0	=	0x0080
                    0081    424 G$SP$0$0 == 0x0081
                    0081    425 _SP	=	0x0081
                    0082    426 G$DPL$0$0 == 0x0082
                    0082    427 _DPL	=	0x0082
                    0083    428 G$DPH$0$0 == 0x0083
                    0083    429 _DPH	=	0x0083
                    0084    430 G$SFRPAGE$0$0 == 0x0084
                    0084    431 _SFRPAGE	=	0x0084
                    0085    432 G$SFRNEXT$0$0 == 0x0085
                    0085    433 _SFRNEXT	=	0x0085
                    0086    434 G$SFRLAST$0$0 == 0x0086
                    0086    435 _SFRLAST	=	0x0086
                    0087    436 G$PCON$0$0 == 0x0087
                    0087    437 _PCON	=	0x0087
                    0090    438 G$P1$0$0 == 0x0090
                    0090    439 _P1	=	0x0090
                    00A0    440 G$P2$0$0 == 0x00a0
                    00A0    441 _P2	=	0x00a0
                    00A8    442 G$IE$0$0 == 0x00a8
                    00A8    443 _IE	=	0x00a8
                    00B0    444 G$P3$0$0 == 0x00b0
                    00B0    445 _P3	=	0x00b0
                    00B1    446 G$PSBANK$0$0 == 0x00b1
                    00B1    447 _PSBANK	=	0x00b1
                    00B8    448 G$IP$0$0 == 0x00b8
                    00B8    449 _IP	=	0x00b8
                    00D0    450 G$PSW$0$0 == 0x00d0
                    00D0    451 _PSW	=	0x00d0
                    00E0    452 G$ACC$0$0 == 0x00e0
                    00E0    453 _ACC	=	0x00e0
                    00E6    454 G$EIE1$0$0 == 0x00e6
                    00E6    455 _EIE1	=	0x00e6
                    00E7    456 G$EIE2$0$0 == 0x00e7
                    00E7    457 _EIE2	=	0x00e7
                    00F0    458 G$B$0$0 == 0x00f0
                    00F0    459 _B	=	0x00f0
                    00F6    460 G$EIP1$0$0 == 0x00f6
                    00F6    461 _EIP1	=	0x00f6
                    00F7    462 G$EIP2$0$0 == 0x00f7
                    00F7    463 _EIP2	=	0x00f7
                    00FF    464 G$WDTCN$0$0 == 0x00ff
                    00FF    465 _WDTCN	=	0x00ff
                    0088    466 G$TCON$0$0 == 0x0088
                    0088    467 _TCON	=	0x0088
                    0089    468 G$TMOD$0$0 == 0x0089
                    0089    469 _TMOD	=	0x0089
                    008A    470 G$TL0$0$0 == 0x008a
                    008A    471 _TL0	=	0x008a
                    008B    472 G$TL1$0$0 == 0x008b
                    008B    473 _TL1	=	0x008b
                    008C    474 G$TH0$0$0 == 0x008c
                    008C    475 _TH0	=	0x008c
                    008D    476 G$TH1$0$0 == 0x008d
                    008D    477 _TH1	=	0x008d
                    008E    478 G$CKCON$0$0 == 0x008e
                    008E    479 _CKCON	=	0x008e
                    008F    480 G$PSCTL$0$0 == 0x008f
                    008F    481 _PSCTL	=	0x008f
                    0091    482 G$SSTA0$0$0 == 0x0091
                    0091    483 _SSTA0	=	0x0091
                    0098    484 G$SCON0$0$0 == 0x0098
                    0098    485 _SCON0	=	0x0098
                    0098    486 G$SCON$0$0 == 0x0098
                    0098    487 _SCON	=	0x0098
                    0099    488 G$SBUF0$0$0 == 0x0099
                    0099    489 _SBUF0	=	0x0099
                    0099    490 G$SBUF$0$0 == 0x0099
                    0099    491 _SBUF	=	0x0099
                    009A    492 G$SPI0CFG$0$0 == 0x009a
                    009A    493 _SPI0CFG	=	0x009a
                    009B    494 G$SPI0DAT$0$0 == 0x009b
                    009B    495 _SPI0DAT	=	0x009b
                    009D    496 G$SPI0CKR$0$0 == 0x009d
                    009D    497 _SPI0CKR	=	0x009d
                    00A1    498 G$EMI0TC$0$0 == 0x00a1
                    00A1    499 _EMI0TC	=	0x00a1
                    00A2    500 G$EMI0CN$0$0 == 0x00a2
                    00A2    501 _EMI0CN	=	0x00a2
                    00A2    502 G$_XPAGE$0$0 == 0x00a2
                    00A2    503 __XPAGE	=	0x00a2
                    00A3    504 G$EMI0CF$0$0 == 0x00a3
                    00A3    505 _EMI0CF	=	0x00a3
                    00A9    506 G$SADDR0$0$0 == 0x00a9
                    00A9    507 _SADDR0	=	0x00a9
                    00B7    508 G$FLSCL$0$0 == 0x00b7
                    00B7    509 _FLSCL	=	0x00b7
                    00B9    510 G$SADEN0$0$0 == 0x00b9
                    00B9    511 _SADEN0	=	0x00b9
                    00BA    512 G$AMX0CF$0$0 == 0x00ba
                    00BA    513 _AMX0CF	=	0x00ba
                    00BB    514 G$AMX0SL$0$0 == 0x00bb
                    00BB    515 _AMX0SL	=	0x00bb
                    00BC    516 G$ADC0CF$0$0 == 0x00bc
                    00BC    517 _ADC0CF	=	0x00bc
                    00BE    518 G$ADC0L$0$0 == 0x00be
                    00BE    519 _ADC0L	=	0x00be
                    00BF    520 G$ADC0H$0$0 == 0x00bf
                    00BF    521 _ADC0H	=	0x00bf
                    00C0    522 G$SMB0CN$0$0 == 0x00c0
                    00C0    523 _SMB0CN	=	0x00c0
                    00C1    524 G$SMB0STA$0$0 == 0x00c1
                    00C1    525 _SMB0STA	=	0x00c1
                    00C2    526 G$SMB0DAT$0$0 == 0x00c2
                    00C2    527 _SMB0DAT	=	0x00c2
                    00C3    528 G$SMB0ADR$0$0 == 0x00c3
                    00C3    529 _SMB0ADR	=	0x00c3
                    00C4    530 G$ADC0GTL$0$0 == 0x00c4
                    00C4    531 _ADC0GTL	=	0x00c4
                    00C5    532 G$ADC0GTH$0$0 == 0x00c5
                    00C5    533 _ADC0GTH	=	0x00c5
                    00C6    534 G$ADC0LTL$0$0 == 0x00c6
                    00C6    535 _ADC0LTL	=	0x00c6
                    00C7    536 G$ADC0LTH$0$0 == 0x00c7
                    00C7    537 _ADC0LTH	=	0x00c7
                    00C8    538 G$TMR2CN$0$0 == 0x00c8
                    00C8    539 _TMR2CN	=	0x00c8
                    00C9    540 G$TMR2CF$0$0 == 0x00c9
                    00C9    541 _TMR2CF	=	0x00c9
                    00CA    542 G$RCAP2L$0$0 == 0x00ca
                    00CA    543 _RCAP2L	=	0x00ca
                    00CB    544 G$RCAP2H$0$0 == 0x00cb
                    00CB    545 _RCAP2H	=	0x00cb
                    00CC    546 G$TMR2L$0$0 == 0x00cc
                    00CC    547 _TMR2L	=	0x00cc
                    00CC    548 G$TL2$0$0 == 0x00cc
                    00CC    549 _TL2	=	0x00cc
                    00CD    550 G$TMR2H$0$0 == 0x00cd
                    00CD    551 _TMR2H	=	0x00cd
                    00CD    552 G$TH2$0$0 == 0x00cd
                    00CD    553 _TH2	=	0x00cd
                    00CF    554 G$SMB0CR$0$0 == 0x00cf
                    00CF    555 _SMB0CR	=	0x00cf
                    00D1    556 G$REF0CN$0$0 == 0x00d1
                    00D1    557 _REF0CN	=	0x00d1
                    00D2    558 G$DAC0L$0$0 == 0x00d2
                    00D2    559 _DAC0L	=	0x00d2
                    00D3    560 G$DAC0H$0$0 == 0x00d3
                    00D3    561 _DAC0H	=	0x00d3
                    00D4    562 G$DAC0CN$0$0 == 0x00d4
                    00D4    563 _DAC0CN	=	0x00d4
                    00D8    564 G$PCA0CN$0$0 == 0x00d8
                    00D8    565 _PCA0CN	=	0x00d8
                    00D9    566 G$PCA0MD$0$0 == 0x00d9
                    00D9    567 _PCA0MD	=	0x00d9
                    00DA    568 G$PCA0CPM0$0$0 == 0x00da
                    00DA    569 _PCA0CPM0	=	0x00da
                    00DB    570 G$PCA0CPM1$0$0 == 0x00db
                    00DB    571 _PCA0CPM1	=	0x00db
                    00DC    572 G$PCA0CPM2$0$0 == 0x00dc
                    00DC    573 _PCA0CPM2	=	0x00dc
                    00DD    574 G$PCA0CPM3$0$0 == 0x00dd
                    00DD    575 _PCA0CPM3	=	0x00dd
                    00DE    576 G$PCA0CPM4$0$0 == 0x00de
                    00DE    577 _PCA0CPM4	=	0x00de
                    00DF    578 G$PCA0CPM5$0$0 == 0x00df
                    00DF    579 _PCA0CPM5	=	0x00df
                    00E1    580 G$PCA0CPL5$0$0 == 0x00e1
                    00E1    581 _PCA0CPL5	=	0x00e1
                    00E2    582 G$PCA0CPH5$0$0 == 0x00e2
                    00E2    583 _PCA0CPH5	=	0x00e2
                    00E8    584 G$ADC0CN$0$0 == 0x00e8
                    00E8    585 _ADC0CN	=	0x00e8
                    00E9    586 G$PCA0CPL2$0$0 == 0x00e9
                    00E9    587 _PCA0CPL2	=	0x00e9
                    00EA    588 G$PCA0CPH2$0$0 == 0x00ea
                    00EA    589 _PCA0CPH2	=	0x00ea
                    00EB    590 G$PCA0CPL3$0$0 == 0x00eb
                    00EB    591 _PCA0CPL3	=	0x00eb
                    00EC    592 G$PCA0CPH3$0$0 == 0x00ec
                    00EC    593 _PCA0CPH3	=	0x00ec
                    00ED    594 G$PCA0CPL4$0$0 == 0x00ed
                    00ED    595 _PCA0CPL4	=	0x00ed
                    00EE    596 G$PCA0CPH4$0$0 == 0x00ee
                    00EE    597 _PCA0CPH4	=	0x00ee
                    00EF    598 G$RSTSRC$0$0 == 0x00ef
                    00EF    599 _RSTSRC	=	0x00ef
                    00F8    600 G$SPI0CN$0$0 == 0x00f8
                    00F8    601 _SPI0CN	=	0x00f8
                    00F9    602 G$PCA0L$0$0 == 0x00f9
                    00F9    603 _PCA0L	=	0x00f9
                    00FA    604 G$PCA0H$0$0 == 0x00fa
                    00FA    605 _PCA0H	=	0x00fa
                    00FB    606 G$PCA0CPL0$0$0 == 0x00fb
                    00FB    607 _PCA0CPL0	=	0x00fb
                    00FC    608 G$PCA0CPH0$0$0 == 0x00fc
                    00FC    609 _PCA0CPH0	=	0x00fc
                    00FD    610 G$PCA0CPL1$0$0 == 0x00fd
                    00FD    611 _PCA0CPL1	=	0x00fd
                    00FE    612 G$PCA0CPH1$0$0 == 0x00fe
                    00FE    613 _PCA0CPH1	=	0x00fe
                    0088    614 G$CPT0CN$0$0 == 0x0088
                    0088    615 _CPT0CN	=	0x0088
                    0089    616 G$CPT0MD$0$0 == 0x0089
                    0089    617 _CPT0MD	=	0x0089
                    0098    618 G$SCON1$0$0 == 0x0098
                    0098    619 _SCON1	=	0x0098
                    0099    620 G$SBUF1$0$0 == 0x0099
                    0099    621 _SBUF1	=	0x0099
                    00C8    622 G$TMR3CN$0$0 == 0x00c8
                    00C8    623 _TMR3CN	=	0x00c8
                    00C9    624 G$TMR3CF$0$0 == 0x00c9
                    00C9    625 _TMR3CF	=	0x00c9
                    00CA    626 G$RCAP3L$0$0 == 0x00ca
                    00CA    627 _RCAP3L	=	0x00ca
                    00CB    628 G$RCAP3H$0$0 == 0x00cb
                    00CB    629 _RCAP3H	=	0x00cb
                    00CC    630 G$TMR3L$0$0 == 0x00cc
                    00CC    631 _TMR3L	=	0x00cc
                    00CD    632 G$TMR3H$0$0 == 0x00cd
                    00CD    633 _TMR3H	=	0x00cd
                    00D2    634 G$DAC1L$0$0 == 0x00d2
                    00D2    635 _DAC1L	=	0x00d2
                    00D3    636 G$DAC1H$0$0 == 0x00d3
                    00D3    637 _DAC1H	=	0x00d3
                    00D4    638 G$DAC1CN$0$0 == 0x00d4
                    00D4    639 _DAC1CN	=	0x00d4
                    0088    640 G$CPT1CN$0$0 == 0x0088
                    0088    641 _CPT1CN	=	0x0088
                    0089    642 G$CPT1MD$0$0 == 0x0089
                    0089    643 _CPT1MD	=	0x0089
                    00BA    644 G$AMX2CF$0$0 == 0x00ba
                    00BA    645 _AMX2CF	=	0x00ba
                    00BB    646 G$AMX2SL$0$0 == 0x00bb
                    00BB    647 _AMX2SL	=	0x00bb
                    00BC    648 G$ADC2CF$0$0 == 0x00bc
                    00BC    649 _ADC2CF	=	0x00bc
                    00BE    650 G$ADC2$0$0 == 0x00be
                    00BE    651 _ADC2	=	0x00be
                    00C4    652 G$ADC2GT$0$0 == 0x00c4
                    00C4    653 _ADC2GT	=	0x00c4
                    00C6    654 G$ADC2LT$0$0 == 0x00c6
                    00C6    655 _ADC2LT	=	0x00c6
                    00C8    656 G$TMR4CN$0$0 == 0x00c8
                    00C8    657 _TMR4CN	=	0x00c8
                    00C9    658 G$TMR4CF$0$0 == 0x00c9
                    00C9    659 _TMR4CF	=	0x00c9
                    00CA    660 G$RCAP4L$0$0 == 0x00ca
                    00CA    661 _RCAP4L	=	0x00ca
                    00CB    662 G$RCAP4H$0$0 == 0x00cb
                    00CB    663 _RCAP4H	=	0x00cb
                    00CC    664 G$TMR4L$0$0 == 0x00cc
                    00CC    665 _TMR4L	=	0x00cc
                    00CD    666 G$TMR4H$0$0 == 0x00cd
                    00CD    667 _TMR4H	=	0x00cd
                    00E8    668 G$ADC2CN$0$0 == 0x00e8
                    00E8    669 _ADC2CN	=	0x00e8
                    0091    670 G$MAC0BL$0$0 == 0x0091
                    0091    671 _MAC0BL	=	0x0091
                    0092    672 G$MAC0BH$0$0 == 0x0092
                    0092    673 _MAC0BH	=	0x0092
                    0093    674 G$MAC0ACC0$0$0 == 0x0093
                    0093    675 _MAC0ACC0	=	0x0093
                    0094    676 G$MAC0ACC1$0$0 == 0x0094
                    0094    677 _MAC0ACC1	=	0x0094
                    0095    678 G$MAC0ACC2$0$0 == 0x0095
                    0095    679 _MAC0ACC2	=	0x0095
                    0096    680 G$MAC0ACC3$0$0 == 0x0096
                    0096    681 _MAC0ACC3	=	0x0096
                    0097    682 G$MAC0OVR$0$0 == 0x0097
                    0097    683 _MAC0OVR	=	0x0097
                    00C0    684 G$MAC0STA$0$0 == 0x00c0
                    00C0    685 _MAC0STA	=	0x00c0
                    00C1    686 G$MAC0AL$0$0 == 0x00c1
                    00C1    687 _MAC0AL	=	0x00c1
                    00C2    688 G$MAC0AH$0$0 == 0x00c2
                    00C2    689 _MAC0AH	=	0x00c2
                    00C3    690 G$MAC0CF$0$0 == 0x00c3
                    00C3    691 _MAC0CF	=	0x00c3
                    00CE    692 G$MAC0RNDL$0$0 == 0x00ce
                    00CE    693 _MAC0RNDL	=	0x00ce
                    00CF    694 G$MAC0RNDH$0$0 == 0x00cf
                    00CF    695 _MAC0RNDH	=	0x00cf
                    0088    696 G$FLSTAT$0$0 == 0x0088
                    0088    697 _FLSTAT	=	0x0088
                    0089    698 G$PLL0CN$0$0 == 0x0089
                    0089    699 _PLL0CN	=	0x0089
                    008A    700 G$OSCICN$0$0 == 0x008a
                    008A    701 _OSCICN	=	0x008a
                    008B    702 G$OSCICL$0$0 == 0x008b
                    008B    703 _OSCICL	=	0x008b
                    008C    704 G$OSCXCN$0$0 == 0x008c
                    008C    705 _OSCXCN	=	0x008c
                    008D    706 G$PLL0DIV$0$0 == 0x008d
                    008D    707 _PLL0DIV	=	0x008d
                    008E    708 G$PLL0MUL$0$0 == 0x008e
                    008E    709 _PLL0MUL	=	0x008e
                    008F    710 G$PLL0FLT$0$0 == 0x008f
                    008F    711 _PLL0FLT	=	0x008f
                    0096    712 G$SFRPGCN$0$0 == 0x0096
                    0096    713 _SFRPGCN	=	0x0096
                    0097    714 G$CLKSEL$0$0 == 0x0097
                    0097    715 _CLKSEL	=	0x0097
                    009A    716 G$CCH0MA$0$0 == 0x009a
                    009A    717 _CCH0MA	=	0x009a
                    009C    718 G$P4MDOUT$0$0 == 0x009c
                    009C    719 _P4MDOUT	=	0x009c
                    009D    720 G$P5MDOUT$0$0 == 0x009d
                    009D    721 _P5MDOUT	=	0x009d
                    009E    722 G$P6MDOUT$0$0 == 0x009e
                    009E    723 _P6MDOUT	=	0x009e
                    009F    724 G$P7MDOUT$0$0 == 0x009f
                    009F    725 _P7MDOUT	=	0x009f
                    00A1    726 G$CCH0CN$0$0 == 0x00a1
                    00A1    727 _CCH0CN	=	0x00a1
                    00A2    728 G$CCH0TN$0$0 == 0x00a2
                    00A2    729 _CCH0TN	=	0x00a2
                    00A3    730 G$CCH0LC$0$0 == 0x00a3
                    00A3    731 _CCH0LC	=	0x00a3
                    00A4    732 G$P0MDOUT$0$0 == 0x00a4
                    00A4    733 _P0MDOUT	=	0x00a4
                    00A5    734 G$P1MDOUT$0$0 == 0x00a5
                    00A5    735 _P1MDOUT	=	0x00a5
                    00A6    736 G$P2MDOUT$0$0 == 0x00a6
                    00A6    737 _P2MDOUT	=	0x00a6
                    00A7    738 G$P3MDOUT$0$0 == 0x00a7
                    00A7    739 _P3MDOUT	=	0x00a7
                    00AD    740 G$P1MDIN$0$0 == 0x00ad
                    00AD    741 _P1MDIN	=	0x00ad
                    00B7    742 G$FLACL$0$0 == 0x00b7
                    00B7    743 _FLACL	=	0x00b7
                    00C8    744 G$P4$0$0 == 0x00c8
                    00C8    745 _P4	=	0x00c8
                    00D8    746 G$P5$0$0 == 0x00d8
                    00D8    747 _P5	=	0x00d8
                    00E1    748 G$XBR0$0$0 == 0x00e1
                    00E1    749 _XBR0	=	0x00e1
                    00E2    750 G$XBR1$0$0 == 0x00e2
                    00E2    751 _XBR1	=	0x00e2
                    00E3    752 G$XBR2$0$0 == 0x00e3
                    00E3    753 _XBR2	=	0x00e3
                    00E8    754 G$P6$0$0 == 0x00e8
                    00E8    755 _P6	=	0x00e8
                    00F8    756 G$P7$0$0 == 0x00f8
                    00F8    757 _P7	=	0x00f8
                    8C8A    758 G$TMR0$0$0 == 0x8c8a
                    8C8A    759 _TMR0	=	0x8c8a
                    8D8B    760 G$TMR1$0$0 == 0x8d8b
                    8D8B    761 _TMR1	=	0x8d8b
                    CDCC    762 G$TMR2$0$0 == 0xcdcc
                    CDCC    763 _TMR2	=	0xcdcc
                    CBCA    764 G$RCAP2$0$0 == 0xcbca
                    CBCA    765 _RCAP2	=	0xcbca
                    BFBE    766 G$ADC0$0$0 == 0xbfbe
                    BFBE    767 _ADC0	=	0xbfbe
                    C5C4    768 G$ADC0GT$0$0 == 0xc5c4
                    C5C4    769 _ADC0GT	=	0xc5c4
                    C7C6    770 G$ADC0LT$0$0 == 0xc7c6
                    C7C6    771 _ADC0LT	=	0xc7c6
                    D3D2    772 G$DAC0$0$0 == 0xd3d2
                    D3D2    773 _DAC0	=	0xd3d2
                    FAF9    774 G$PCA0$0$0 == 0xfaf9
                    FAF9    775 _PCA0	=	0xfaf9
                    FCFB    776 G$PCA0CP0$0$0 == 0xfcfb
                    FCFB    777 _PCA0CP0	=	0xfcfb
                    FEFD    778 G$PCA0CP1$0$0 == 0xfefd
                    FEFD    779 _PCA0CP1	=	0xfefd
                    EAE9    780 G$PCA0CP2$0$0 == 0xeae9
                    EAE9    781 _PCA0CP2	=	0xeae9
                    ECEB    782 G$PCA0CP3$0$0 == 0xeceb
                    ECEB    783 _PCA0CP3	=	0xeceb
                    EEED    784 G$PCA0CP4$0$0 == 0xeeed
                    EEED    785 _PCA0CP4	=	0xeeed
                    E2E1    786 G$PCA0CP5$0$0 == 0xe2e1
                    E2E1    787 _PCA0CP5	=	0xe2e1
                    CDCC    788 G$TMR3$0$0 == 0xcdcc
                    CDCC    789 _TMR3	=	0xcdcc
                    CBCA    790 G$RCAP3$0$0 == 0xcbca
                    CBCA    791 _RCAP3	=	0xcbca
                    D3D2    792 G$DAC1$0$0 == 0xd3d2
                    D3D2    793 _DAC1	=	0xd3d2
                    CDCC    794 G$TMR4$0$0 == 0xcdcc
                    CDCC    795 _TMR4	=	0xcdcc
                    CBCA    796 G$RCAP4$0$0 == 0xcbca
                    CBCA    797 _RCAP4	=	0xcbca
                    C2C1    798 G$MAC0A$0$0 == 0xc2c1
                    C2C1    799 _MAC0A	=	0xc2c1
                    96959493    800 G$MAC0ACC$0$0 == 0x96959493
                    96959493    801 _MAC0ACC	=	0x96959493
                    CFCE    802 G$MAC0RND$0$0 == 0xcfce
                    CFCE    803 _MAC0RND	=	0xcfce
                            804 ;--------------------------------------------------------
                            805 ; special function bits
                            806 ;--------------------------------------------------------
                            807 	.area RSEG    (DATA)
                    0080    808 G$P0_0$0$0 == 0x0080
                    0080    809 _P0_0	=	0x0080
                    0081    810 G$P0_1$0$0 == 0x0081
                    0081    811 _P0_1	=	0x0081
                    0082    812 G$P0_2$0$0 == 0x0082
                    0082    813 _P0_2	=	0x0082
                    0083    814 G$P0_3$0$0 == 0x0083
                    0083    815 _P0_3	=	0x0083
                    0084    816 G$P0_4$0$0 == 0x0084
                    0084    817 _P0_4	=	0x0084
                    0085    818 G$P0_5$0$0 == 0x0085
                    0085    819 _P0_5	=	0x0085
                    0086    820 G$P0_6$0$0 == 0x0086
                    0086    821 _P0_6	=	0x0086
                    0087    822 G$P0_7$0$0 == 0x0087
                    0087    823 _P0_7	=	0x0087
                    0088    824 G$IT0$0$0 == 0x0088
                    0088    825 _IT0	=	0x0088
                    0089    826 G$IE0$0$0 == 0x0089
                    0089    827 _IE0	=	0x0089
                    008A    828 G$IT1$0$0 == 0x008a
                    008A    829 _IT1	=	0x008a
                    008B    830 G$IE1$0$0 == 0x008b
                    008B    831 _IE1	=	0x008b
                    008C    832 G$TR0$0$0 == 0x008c
                    008C    833 _TR0	=	0x008c
                    008D    834 G$TF0$0$0 == 0x008d
                    008D    835 _TF0	=	0x008d
                    008E    836 G$TR1$0$0 == 0x008e
                    008E    837 _TR1	=	0x008e
                    008F    838 G$TF1$0$0 == 0x008f
                    008F    839 _TF1	=	0x008f
                    0088    840 G$CP0HYN0$0$0 == 0x0088
                    0088    841 _CP0HYN0	=	0x0088
                    0089    842 G$CP0HYN1$0$0 == 0x0089
                    0089    843 _CP0HYN1	=	0x0089
                    008A    844 G$CP0HYP0$0$0 == 0x008a
                    008A    845 _CP0HYP0	=	0x008a
                    008B    846 G$CP0HYP1$0$0 == 0x008b
                    008B    847 _CP0HYP1	=	0x008b
                    008C    848 G$CP0FIF$0$0 == 0x008c
                    008C    849 _CP0FIF	=	0x008c
                    008D    850 G$CP0RIF$0$0 == 0x008d
                    008D    851 _CP0RIF	=	0x008d
                    008E    852 G$CP0OUT$0$0 == 0x008e
                    008E    853 _CP0OUT	=	0x008e
                    008F    854 G$CP0EN$0$0 == 0x008f
                    008F    855 _CP0EN	=	0x008f
                    0088    856 G$CP1HYN0$0$0 == 0x0088
                    0088    857 _CP1HYN0	=	0x0088
                    0089    858 G$CP1HYN1$0$0 == 0x0089
                    0089    859 _CP1HYN1	=	0x0089
                    008A    860 G$CP1HYP0$0$0 == 0x008a
                    008A    861 _CP1HYP0	=	0x008a
                    008B    862 G$CP1HYP1$0$0 == 0x008b
                    008B    863 _CP1HYP1	=	0x008b
                    008C    864 G$CP1FIF$0$0 == 0x008c
                    008C    865 _CP1FIF	=	0x008c
                    008D    866 G$CP1RIF$0$0 == 0x008d
                    008D    867 _CP1RIF	=	0x008d
                    008E    868 G$CP1OUT$0$0 == 0x008e
                    008E    869 _CP1OUT	=	0x008e
                    008F    870 G$CP1EN$0$0 == 0x008f
                    008F    871 _CP1EN	=	0x008f
                    0088    872 G$FLHBUSY$0$0 == 0x0088
                    0088    873 _FLHBUSY	=	0x0088
                    0090    874 G$P1_0$0$0 == 0x0090
                    0090    875 _P1_0	=	0x0090
                    0091    876 G$P1_1$0$0 == 0x0091
                    0091    877 _P1_1	=	0x0091
                    0092    878 G$P1_2$0$0 == 0x0092
                    0092    879 _P1_2	=	0x0092
                    0093    880 G$P1_3$0$0 == 0x0093
                    0093    881 _P1_3	=	0x0093
                    0094    882 G$P1_4$0$0 == 0x0094
                    0094    883 _P1_4	=	0x0094
                    0095    884 G$P1_5$0$0 == 0x0095
                    0095    885 _P1_5	=	0x0095
                    0096    886 G$P1_6$0$0 == 0x0096
                    0096    887 _P1_6	=	0x0096
                    0097    888 G$P1_7$0$0 == 0x0097
                    0097    889 _P1_7	=	0x0097
                    0098    890 G$RI0$0$0 == 0x0098
                    0098    891 _RI0	=	0x0098
                    0098    892 G$RI$0$0 == 0x0098
                    0098    893 _RI	=	0x0098
                    0099    894 G$TI0$0$0 == 0x0099
                    0099    895 _TI0	=	0x0099
                    0099    896 G$TI$0$0 == 0x0099
                    0099    897 _TI	=	0x0099
                    009A    898 G$RB80$0$0 == 0x009a
                    009A    899 _RB80	=	0x009a
                    009B    900 G$TB80$0$0 == 0x009b
                    009B    901 _TB80	=	0x009b
                    009C    902 G$REN0$0$0 == 0x009c
                    009C    903 _REN0	=	0x009c
                    009C    904 G$REN$0$0 == 0x009c
                    009C    905 _REN	=	0x009c
                    009D    906 G$SM20$0$0 == 0x009d
                    009D    907 _SM20	=	0x009d
                    009E    908 G$SM10$0$0 == 0x009e
                    009E    909 _SM10	=	0x009e
                    009F    910 G$SM00$0$0 == 0x009f
                    009F    911 _SM00	=	0x009f
                    0098    912 G$RI1$0$0 == 0x0098
                    0098    913 _RI1	=	0x0098
                    0099    914 G$TI1$0$0 == 0x0099
                    0099    915 _TI1	=	0x0099
                    009A    916 G$RB81$0$0 == 0x009a
                    009A    917 _RB81	=	0x009a
                    009B    918 G$TB81$0$0 == 0x009b
                    009B    919 _TB81	=	0x009b
                    009C    920 G$REN1$0$0 == 0x009c
                    009C    921 _REN1	=	0x009c
                    009D    922 G$MCE1$0$0 == 0x009d
                    009D    923 _MCE1	=	0x009d
                    009F    924 G$S1MODE$0$0 == 0x009f
                    009F    925 _S1MODE	=	0x009f
                    00A0    926 G$P2_0$0$0 == 0x00a0
                    00A0    927 _P2_0	=	0x00a0
                    00A1    928 G$P2_1$0$0 == 0x00a1
                    00A1    929 _P2_1	=	0x00a1
                    00A2    930 G$P2_2$0$0 == 0x00a2
                    00A2    931 _P2_2	=	0x00a2
                    00A3    932 G$P2_3$0$0 == 0x00a3
                    00A3    933 _P2_3	=	0x00a3
                    00A4    934 G$P2_4$0$0 == 0x00a4
                    00A4    935 _P2_4	=	0x00a4
                    00A5    936 G$P2_5$0$0 == 0x00a5
                    00A5    937 _P2_5	=	0x00a5
                    00A6    938 G$P2_6$0$0 == 0x00a6
                    00A6    939 _P2_6	=	0x00a6
                    00A7    940 G$P2_7$0$0 == 0x00a7
                    00A7    941 _P2_7	=	0x00a7
                    00A8    942 G$EX0$0$0 == 0x00a8
                    00A8    943 _EX0	=	0x00a8
                    00A9    944 G$ET0$0$0 == 0x00a9
                    00A9    945 _ET0	=	0x00a9
                    00AA    946 G$EX1$0$0 == 0x00aa
                    00AA    947 _EX1	=	0x00aa
                    00AB    948 G$ET1$0$0 == 0x00ab
                    00AB    949 _ET1	=	0x00ab
                    00AC    950 G$ES0$0$0 == 0x00ac
                    00AC    951 _ES0	=	0x00ac
                    00AC    952 G$ES$0$0 == 0x00ac
                    00AC    953 _ES	=	0x00ac
                    00AD    954 G$ET2$0$0 == 0x00ad
                    00AD    955 _ET2	=	0x00ad
                    00AF    956 G$EA$0$0 == 0x00af
                    00AF    957 _EA	=	0x00af
                    00B0    958 G$P3_0$0$0 == 0x00b0
                    00B0    959 _P3_0	=	0x00b0
                    00B1    960 G$P3_1$0$0 == 0x00b1
                    00B1    961 _P3_1	=	0x00b1
                    00B2    962 G$P3_2$0$0 == 0x00b2
                    00B2    963 _P3_2	=	0x00b2
                    00B3    964 G$P3_3$0$0 == 0x00b3
                    00B3    965 _P3_3	=	0x00b3
                    00B4    966 G$P3_4$0$0 == 0x00b4
                    00B4    967 _P3_4	=	0x00b4
                    00B5    968 G$P3_5$0$0 == 0x00b5
                    00B5    969 _P3_5	=	0x00b5
                    00B6    970 G$P3_6$0$0 == 0x00b6
                    00B6    971 _P3_6	=	0x00b6
                    00B7    972 G$P3_7$0$0 == 0x00b7
                    00B7    973 _P3_7	=	0x00b7
                    00B8    974 G$PX0$0$0 == 0x00b8
                    00B8    975 _PX0	=	0x00b8
                    00B9    976 G$PT0$0$0 == 0x00b9
                    00B9    977 _PT0	=	0x00b9
                    00BA    978 G$PX1$0$0 == 0x00ba
                    00BA    979 _PX1	=	0x00ba
                    00BB    980 G$PT1$0$0 == 0x00bb
                    00BB    981 _PT1	=	0x00bb
                    00BC    982 G$PS0$0$0 == 0x00bc
                    00BC    983 _PS0	=	0x00bc
                    00BC    984 G$PS$0$0 == 0x00bc
                    00BC    985 _PS	=	0x00bc
                    00BD    986 G$PT2$0$0 == 0x00bd
                    00BD    987 _PT2	=	0x00bd
                    00C0    988 G$SMBTOE$0$0 == 0x00c0
                    00C0    989 _SMBTOE	=	0x00c0
                    00C1    990 G$SMBFTE$0$0 == 0x00c1
                    00C1    991 _SMBFTE	=	0x00c1
                    00C2    992 G$AA$0$0 == 0x00c2
                    00C2    993 _AA	=	0x00c2
                    00C3    994 G$SI$0$0 == 0x00c3
                    00C3    995 _SI	=	0x00c3
                    00C4    996 G$STO$0$0 == 0x00c4
                    00C4    997 _STO	=	0x00c4
                    00C5    998 G$STA$0$0 == 0x00c5
                    00C5    999 _STA	=	0x00c5
                    00C6   1000 G$ENSMB$0$0 == 0x00c6
                    00C6   1001 _ENSMB	=	0x00c6
                    00C7   1002 G$BUSY$0$0 == 0x00c7
                    00C7   1003 _BUSY	=	0x00c7
                    00C0   1004 G$MAC0N$0$0 == 0x00c0
                    00C0   1005 _MAC0N	=	0x00c0
                    00C1   1006 G$MAC0SO$0$0 == 0x00c1
                    00C1   1007 _MAC0SO	=	0x00c1
                    00C2   1008 G$MAC0Z$0$0 == 0x00c2
                    00C2   1009 _MAC0Z	=	0x00c2
                    00C3   1010 G$MAC0HO$0$0 == 0x00c3
                    00C3   1011 _MAC0HO	=	0x00c3
                    00C8   1012 G$CPRL2$0$0 == 0x00c8
                    00C8   1013 _CPRL2	=	0x00c8
                    00C9   1014 G$CT2$0$0 == 0x00c9
                    00C9   1015 _CT2	=	0x00c9
                    00CA   1016 G$TR2$0$0 == 0x00ca
                    00CA   1017 _TR2	=	0x00ca
                    00CB   1018 G$EXEN2$0$0 == 0x00cb
                    00CB   1019 _EXEN2	=	0x00cb
                    00CE   1020 G$EXF2$0$0 == 0x00ce
                    00CE   1021 _EXF2	=	0x00ce
                    00CF   1022 G$TF2$0$0 == 0x00cf
                    00CF   1023 _TF2	=	0x00cf
                    00C8   1024 G$CPRL3$0$0 == 0x00c8
                    00C8   1025 _CPRL3	=	0x00c8
                    00C9   1026 G$CT3$0$0 == 0x00c9
                    00C9   1027 _CT3	=	0x00c9
                    00CA   1028 G$TR3$0$0 == 0x00ca
                    00CA   1029 _TR3	=	0x00ca
                    00CB   1030 G$EXEN3$0$0 == 0x00cb
                    00CB   1031 _EXEN3	=	0x00cb
                    00CE   1032 G$EXF3$0$0 == 0x00ce
                    00CE   1033 _EXF3	=	0x00ce
                    00CF   1034 G$TF3$0$0 == 0x00cf
                    00CF   1035 _TF3	=	0x00cf
                    00C8   1036 G$CPRL4$0$0 == 0x00c8
                    00C8   1037 _CPRL4	=	0x00c8
                    00C9   1038 G$CT4$0$0 == 0x00c9
                    00C9   1039 _CT4	=	0x00c9
                    00CA   1040 G$TR4$0$0 == 0x00ca
                    00CA   1041 _TR4	=	0x00ca
                    00CB   1042 G$EXEN4$0$0 == 0x00cb
                    00CB   1043 _EXEN4	=	0x00cb
                    00CE   1044 G$EXF4$0$0 == 0x00ce
                    00CE   1045 _EXF4	=	0x00ce
                    00CF   1046 G$TF4$0$0 == 0x00cf
                    00CF   1047 _TF4	=	0x00cf
                    00C8   1048 G$P4_0$0$0 == 0x00c8
                    00C8   1049 _P4_0	=	0x00c8
                    00C9   1050 G$P4_1$0$0 == 0x00c9
                    00C9   1051 _P4_1	=	0x00c9
                    00CA   1052 G$P4_2$0$0 == 0x00ca
                    00CA   1053 _P4_2	=	0x00ca
                    00CB   1054 G$P4_3$0$0 == 0x00cb
                    00CB   1055 _P4_3	=	0x00cb
                    00CC   1056 G$P4_4$0$0 == 0x00cc
                    00CC   1057 _P4_4	=	0x00cc
                    00CD   1058 G$P4_5$0$0 == 0x00cd
                    00CD   1059 _P4_5	=	0x00cd
                    00CE   1060 G$P4_6$0$0 == 0x00ce
                    00CE   1061 _P4_6	=	0x00ce
                    00CF   1062 G$P4_7$0$0 == 0x00cf
                    00CF   1063 _P4_7	=	0x00cf
                    00D0   1064 G$P$0$0 == 0x00d0
                    00D0   1065 _P	=	0x00d0
                    00D1   1066 G$F1$0$0 == 0x00d1
                    00D1   1067 _F1	=	0x00d1
                    00D2   1068 G$OV$0$0 == 0x00d2
                    00D2   1069 _OV	=	0x00d2
                    00D3   1070 G$RS0$0$0 == 0x00d3
                    00D3   1071 _RS0	=	0x00d3
                    00D4   1072 G$RS1$0$0 == 0x00d4
                    00D4   1073 _RS1	=	0x00d4
                    00D5   1074 G$F0$0$0 == 0x00d5
                    00D5   1075 _F0	=	0x00d5
                    00D6   1076 G$AC$0$0 == 0x00d6
                    00D6   1077 _AC	=	0x00d6
                    00D7   1078 G$CY$0$0 == 0x00d7
                    00D7   1079 _CY	=	0x00d7
                    00D8   1080 G$CCF0$0$0 == 0x00d8
                    00D8   1081 _CCF0	=	0x00d8
                    00D9   1082 G$CCF1$0$0 == 0x00d9
                    00D9   1083 _CCF1	=	0x00d9
                    00DA   1084 G$CCF2$0$0 == 0x00da
                    00DA   1085 _CCF2	=	0x00da
                    00DB   1086 G$CCF3$0$0 == 0x00db
                    00DB   1087 _CCF3	=	0x00db
                    00DC   1088 G$CCF4$0$0 == 0x00dc
                    00DC   1089 _CCF4	=	0x00dc
                    00DD   1090 G$CCF5$0$0 == 0x00dd
                    00DD   1091 _CCF5	=	0x00dd
                    00DE   1092 G$CR$0$0 == 0x00de
                    00DE   1093 _CR	=	0x00de
                    00DF   1094 G$CF$0$0 == 0x00df
                    00DF   1095 _CF	=	0x00df
                    00D8   1096 G$P5_0$0$0 == 0x00d8
                    00D8   1097 _P5_0	=	0x00d8
                    00D9   1098 G$P5_1$0$0 == 0x00d9
                    00D9   1099 _P5_1	=	0x00d9
                    00DA   1100 G$P5_2$0$0 == 0x00da
                    00DA   1101 _P5_2	=	0x00da
                    00DB   1102 G$P5_3$0$0 == 0x00db
                    00DB   1103 _P5_3	=	0x00db
                    00DC   1104 G$P5_4$0$0 == 0x00dc
                    00DC   1105 _P5_4	=	0x00dc
                    00DD   1106 G$P5_5$0$0 == 0x00dd
                    00DD   1107 _P5_5	=	0x00dd
                    00DE   1108 G$P5_6$0$0 == 0x00de
                    00DE   1109 _P5_6	=	0x00de
                    00DF   1110 G$P5_7$0$0 == 0x00df
                    00DF   1111 _P5_7	=	0x00df
                    00E8   1112 G$AD0LJST$0$0 == 0x00e8
                    00E8   1113 _AD0LJST	=	0x00e8
                    00E9   1114 G$AD0WINT$0$0 == 0x00e9
                    00E9   1115 _AD0WINT	=	0x00e9
                    00EA   1116 G$AD0CM0$0$0 == 0x00ea
                    00EA   1117 _AD0CM0	=	0x00ea
                    00EB   1118 G$AD0CM1$0$0 == 0x00eb
                    00EB   1119 _AD0CM1	=	0x00eb
                    00EC   1120 G$AD0BUSY$0$0 == 0x00ec
                    00EC   1121 _AD0BUSY	=	0x00ec
                    00ED   1122 G$AD0INT$0$0 == 0x00ed
                    00ED   1123 _AD0INT	=	0x00ed
                    00EE   1124 G$AD0TM$0$0 == 0x00ee
                    00EE   1125 _AD0TM	=	0x00ee
                    00EF   1126 G$AD0EN$0$0 == 0x00ef
                    00EF   1127 _AD0EN	=	0x00ef
                    00E8   1128 G$AD2WINT$0$0 == 0x00e8
                    00E8   1129 _AD2WINT	=	0x00e8
                    00E9   1130 G$AD2CM0$0$0 == 0x00e9
                    00E9   1131 _AD2CM0	=	0x00e9
                    00EA   1132 G$AD2CM1$0$0 == 0x00ea
                    00EA   1133 _AD2CM1	=	0x00ea
                    00EB   1134 G$AD2CM2$0$0 == 0x00eb
                    00EB   1135 _AD2CM2	=	0x00eb
                    00EC   1136 G$AD2BUSY$0$0 == 0x00ec
                    00EC   1137 _AD2BUSY	=	0x00ec
                    00ED   1138 G$AD2INT$0$0 == 0x00ed
                    00ED   1139 _AD2INT	=	0x00ed
                    00EE   1140 G$AD2TM$0$0 == 0x00ee
                    00EE   1141 _AD2TM	=	0x00ee
                    00EF   1142 G$AD2EN$0$0 == 0x00ef
                    00EF   1143 _AD2EN	=	0x00ef
                    00E8   1144 G$P6_0$0$0 == 0x00e8
                    00E8   1145 _P6_0	=	0x00e8
                    00E9   1146 G$P6_1$0$0 == 0x00e9
                    00E9   1147 _P6_1	=	0x00e9
                    00EA   1148 G$P6_2$0$0 == 0x00ea
                    00EA   1149 _P6_2	=	0x00ea
                    00EB   1150 G$P6_3$0$0 == 0x00eb
                    00EB   1151 _P6_3	=	0x00eb
                    00EC   1152 G$P6_4$0$0 == 0x00ec
                    00EC   1153 _P6_4	=	0x00ec
                    00ED   1154 G$P6_5$0$0 == 0x00ed
                    00ED   1155 _P6_5	=	0x00ed
                    00EE   1156 G$P6_6$0$0 == 0x00ee
                    00EE   1157 _P6_6	=	0x00ee
                    00EF   1158 G$P6_7$0$0 == 0x00ef
                    00EF   1159 _P6_7	=	0x00ef
                    00F8   1160 G$SPIEN$0$0 == 0x00f8
                    00F8   1161 _SPIEN	=	0x00f8
                    00F9   1162 G$TXBMT$0$0 == 0x00f9
                    00F9   1163 _TXBMT	=	0x00f9
                    00FA   1164 G$NSSMD0$0$0 == 0x00fa
                    00FA   1165 _NSSMD0	=	0x00fa
                    00FB   1166 G$NSSMD1$0$0 == 0x00fb
                    00FB   1167 _NSSMD1	=	0x00fb
                    00FC   1168 G$RXOVRN$0$0 == 0x00fc
                    00FC   1169 _RXOVRN	=	0x00fc
                    00FD   1170 G$MODF$0$0 == 0x00fd
                    00FD   1171 _MODF	=	0x00fd
                    00FE   1172 G$WCOL$0$0 == 0x00fe
                    00FE   1173 _WCOL	=	0x00fe
                    00FF   1174 G$SPIF$0$0 == 0x00ff
                    00FF   1175 _SPIF	=	0x00ff
                    00F8   1176 G$P7_0$0$0 == 0x00f8
                    00F8   1177 _P7_0	=	0x00f8
                    00F9   1178 G$P7_1$0$0 == 0x00f9
                    00F9   1179 _P7_1	=	0x00f9
                    00FA   1180 G$P7_2$0$0 == 0x00fa
                    00FA   1181 _P7_2	=	0x00fa
                    00FB   1182 G$P7_3$0$0 == 0x00fb
                    00FB   1183 _P7_3	=	0x00fb
                    00FC   1184 G$P7_4$0$0 == 0x00fc
                    00FC   1185 _P7_4	=	0x00fc
                    00FD   1186 G$P7_5$0$0 == 0x00fd
                    00FD   1187 _P7_5	=	0x00fd
                    00FE   1188 G$P7_6$0$0 == 0x00fe
                    00FE   1189 _P7_6	=	0x00fe
                    00FF   1190 G$P7_7$0$0 == 0x00ff
                    00FF   1191 _P7_7	=	0x00ff
                    0096   1192 G$LED$0$0 == 0x0096
                    0096   1193 _LED	=	0x0096
                    00B7   1194 G$SW2$0$0 == 0x00b7
                    00B7   1195 _SW2	=	0x00b7
                    00C9   1196 G$AB4_SW1$0$0 == 0x00c9
                    00C9   1197 _AB4_SW1	=	0x00c9
                    00CA   1198 G$AB4_SW2$0$0 == 0x00ca
                    00CA   1199 _AB4_SW2	=	0x00ca
                    00CB   1200 G$AB4_LED1$0$0 == 0x00cb
                    00CB   1201 _AB4_LED1	=	0x00cb
                    00CC   1202 G$AB4_LED2$0$0 == 0x00cc
                    00CC   1203 _AB4_LED2	=	0x00cc
                           1204 ;--------------------------------------------------------
                           1205 ; overlayable register banks
                           1206 ;--------------------------------------------------------
                           1207 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                    1208 	.ds 8
                           1209 ;--------------------------------------------------------
                           1210 ; internal ram data
                           1211 ;--------------------------------------------------------
                           1212 	.area DSEG    (DATA)
                           1213 ;--------------------------------------------------------
                           1214 ; overlayable items in internal ram 
                           1215 ;--------------------------------------------------------
                           1216 	.area OSEG    (OVR,DATA)
                           1217 ;--------------------------------------------------------
                           1218 ; indirectly addressable internal ram data
                           1219 ;--------------------------------------------------------
                           1220 	.area ISEG    (DATA)
                           1221 ;--------------------------------------------------------
                           1222 ; absolute internal ram data
                           1223 ;--------------------------------------------------------
                           1224 	.area IABS    (ABS,DATA)
                           1225 	.area IABS    (ABS,DATA)
                           1226 ;--------------------------------------------------------
                           1227 ; bit data
                           1228 ;--------------------------------------------------------
                           1229 	.area BSEG    (BIT)
                           1230 ;--------------------------------------------------------
                           1231 ; paged external ram data
                           1232 ;--------------------------------------------------------
                           1233 	.area PSEG    (PAG,XDATA)
                           1234 ;--------------------------------------------------------
                           1235 ; external ram data
                           1236 ;--------------------------------------------------------
                           1237 	.area XSEG    (XDATA)
                    0000   1238 Ftasks$pxReadyTasksLists$0$0==.
   0000                    1239 _pxReadyTasksLists:
   0000                    1240 	.ds 48
                    0030   1241 Ftasks$xDelayedTaskList1$0$0==.
   0030                    1242 _xDelayedTaskList1:
   0030                    1243 	.ds 12
                    003C   1244 Ftasks$xDelayedTaskList2$0$0==.
   003C                    1245 _xDelayedTaskList2:
   003C                    1246 	.ds 12
                    0048   1247 Ftasks$pxDelayedTaskList$0$0==.
   0048                    1248 _pxDelayedTaskList:
   0048                    1249 	.ds 3
                    004B   1250 Ftasks$pxOverflowDelayedTaskList$0$0==.
   004B                    1251 _pxOverflowDelayedTaskList:
   004B                    1252 	.ds 3
                    004E   1253 Ftasks$xPendingReadyList$0$0==.
   004E                    1254 _xPendingReadyList:
   004E                    1255 	.ds 12
                           1256 ;--------------------------------------------------------
                           1257 ; absolute external ram data
                           1258 ;--------------------------------------------------------
                           1259 	.area XABS    (ABS,XDATA)
                           1260 ;--------------------------------------------------------
                           1261 ; external initialized ram data
                           1262 ;--------------------------------------------------------
                           1263 	.area XISEG   (XDATA)
                    0000   1264 G$pxCurrentTCB$0$0==.
   0000                    1265 _pxCurrentTCB::
   0000                    1266 	.ds 3
                    0003   1267 Ftasks$uxCurrentNumberOfTasks$0$0==.
   0003                    1268 _uxCurrentNumberOfTasks:
   0003                    1269 	.ds 1
                    0004   1270 Ftasks$xTickCount$0$0==.
   0004                    1271 _xTickCount:
   0004                    1272 	.ds 2
                    0006   1273 Ftasks$uxTopUsedPriority$0$0==.
   0006                    1274 _uxTopUsedPriority:
   0006                    1275 	.ds 1
                    0007   1276 Ftasks$uxTopReadyPriority$0$0==.
   0007                    1277 _uxTopReadyPriority:
   0007                    1278 	.ds 1
                    0008   1279 Ftasks$xSchedulerRunning$0$0==.
   0008                    1280 _xSchedulerRunning:
   0008                    1281 	.ds 1
                    0009   1282 Ftasks$uxSchedulerSuspended$0$0==.
   0009                    1283 _uxSchedulerSuspended:
   0009                    1284 	.ds 1
                    000A   1285 Ftasks$uxMissedTicks$0$0==.
   000A                    1286 _uxMissedTicks:
   000A                    1287 	.ds 1
                    000B   1288 Ftasks$xMissedYield$0$0==.
   000B                    1289 _xMissedYield:
   000B                    1290 	.ds 1
                    000C   1291 Ftasks$xNumOfOverflows$0$0==.
   000C                    1292 _xNumOfOverflows:
   000C                    1293 	.ds 1
                           1294 	.area HOME    (CODE)
                           1295 	.area GSINIT0 (CODE)
                           1296 	.area GSINIT1 (CODE)
                           1297 	.area GSINIT2 (CODE)
                           1298 	.area GSINIT3 (CODE)
                           1299 	.area GSINIT4 (CODE)
                           1300 	.area GSINIT5 (CODE)
                           1301 	.area GSINIT  (CODE)
                           1302 	.area GSFINAL (CODE)
                           1303 	.area CSEG    (CODE)
                           1304 ;--------------------------------------------------------
                           1305 ; global & static initialisations
                           1306 ;--------------------------------------------------------
                           1307 	.area HOME    (CODE)
                           1308 	.area GSINIT  (CODE)
                           1309 	.area GSFINAL (CODE)
                           1310 	.area GSINIT  (CODE)
                           1311 ;--------------------------------------------------------
                           1312 ; Home
                           1313 ;--------------------------------------------------------
                           1314 	.area HOME    (CODE)
                           1315 	.area HOME    (CODE)
                           1316 ;--------------------------------------------------------
                           1317 ; code
                           1318 ;--------------------------------------------------------
                           1319 	.area CSEG    (CODE)
                           1320 ;------------------------------------------------------------
                           1321 ;Allocation info for local variables in function 'xTaskCreate'
                           1322 ;------------------------------------------------------------
                           1323 ;pcName                    Allocated to stack - offset -5
                           1324 ;usStackDepth              Allocated to stack - offset -7
                           1325 ;pvParameters              Allocated to stack - offset -10
                           1326 ;uxPriority                Allocated to stack - offset -11
                           1327 ;pxCreatedTask             Allocated to stack - offset -14
                           1328 ;pvTaskCode                Allocated to stack - offset 1
                           1329 ;xReturn                   Allocated to registers r2 
                           1330 ;pxNewTCB                  Allocated to stack - offset 3
                           1331 ;pxTopOfStack              Allocated to registers r7 r2 r3 
                           1332 ;------------------------------------------------------------
                    0000   1333 	G$xTaskCreate$0$0 ==.
                    0000   1334 	C$tasks.c$425$0$0 ==.
                           1335 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:425: signed portBASE_TYPE xTaskCreate( pdTASK_CODE pvTaskCode, const signed portCHAR * const pcName, unsigned portSHORT usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask )
                           1336 ;	-----------------------------------------
                           1337 ;	 function xTaskCreate
                           1338 ;	-----------------------------------------
   0000                    1339 _xTaskCreate:
                    0002   1340 	ar2 = 0x02
                    0003   1341 	ar3 = 0x03
                    0004   1342 	ar4 = 0x04
                    0005   1343 	ar5 = 0x05
                    0006   1344 	ar6 = 0x06
                    0007   1345 	ar7 = 0x07
                    0000   1346 	ar0 = 0x00
                    0001   1347 	ar1 = 0x01
   0000 C0*00              1348 	push	_bp
   0002 85 81*00           1349 	mov	_bp,sp
   0005 C0 82              1350 	push	dpl
   0007 C0 83              1351 	push	dph
   0009 05 81              1352 	inc	sp
   000B 05 81              1353 	inc	sp
   000D 05 81              1354 	inc	sp
                    000F   1355 	C$tasks.c$432$1$1 ==.
                           1356 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:432: pxNewTCB = prvAllocateTCBAndStack( usStackDepth );
   000F E5*00              1357 	mov	a,_bp
   0011 24 F9              1358 	add	a,#0xf9
   0013 F8                 1359 	mov	r0,a
   0014 86 82              1360 	mov	dpl,@r0
   0016 08                 1361 	inc	r0
   0017 86 83              1362 	mov	dph,@r0
   0019 12s11r32           1363 	lcall	_prvAllocateTCBAndStack
   001C AC 82              1364 	mov	r4,dpl
   001E AD 83              1365 	mov	r5,dph
   0020 AE F0              1366 	mov	r6,b
   0022 A8*00              1367 	mov	r0,_bp
   0024 08                 1368 	inc	r0
   0025 08                 1369 	inc	r0
   0026 08                 1370 	inc	r0
   0027 A6 04              1371 	mov	@r0,ar4
   0029 08                 1372 	inc	r0
   002A A6 05              1373 	mov	@r0,ar5
   002C 08                 1374 	inc	r0
   002D A6 06              1375 	mov	@r0,ar6
                    002F   1376 	C$tasks.c$434$1$1 ==.
                           1377 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:434: if( pxNewTCB != NULL )
   002F A8*00              1378 	mov	r0,_bp
   0031 08                 1379 	inc	r0
   0032 08                 1380 	inc	r0
   0033 08                 1381 	inc	r0
   0034 B6 00 0B           1382 	cjne	@r0,#0x00,00135$
   0037 08                 1383 	inc	r0
   0038 B6 00 07           1384 	cjne	@r0,#0x00,00135$
   003B 08                 1385 	inc	r0
   003C B6 00 03           1386 	cjne	@r0,#0x00,00135$
   003F 02s01rDE           1387 	ljmp	00113$
   0042                    1388 00135$:
                    0042   1389 	C$tasks.c$439$2$2 ==.
                           1390 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:439: prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority );
   0042 E5*00              1391 	mov	a,_bp
   0044 24 F5              1392 	add	a,#0xf5
   0046 F8                 1393 	mov	r0,a
   0047 E6                 1394 	mov	a,@r0
   0048 C0 E0              1395 	push	acc
   004A E5*00              1396 	mov	a,_bp
   004C 24 FB              1397 	add	a,#0xfb
   004E F8                 1398 	mov	r0,a
   004F E6                 1399 	mov	a,@r0
   0050 C0 E0              1400 	push	acc
   0052 08                 1401 	inc	r0
   0053 E6                 1402 	mov	a,@r0
   0054 C0 E0              1403 	push	acc
   0056 08                 1404 	inc	r0
   0057 E6                 1405 	mov	a,@r0
   0058 C0 E0              1406 	push	acc
   005A A8*00              1407 	mov	r0,_bp
   005C 08                 1408 	inc	r0
   005D 08                 1409 	inc	r0
   005E 08                 1410 	inc	r0
   005F 86 82              1411 	mov	dpl,@r0
   0061 08                 1412 	inc	r0
   0062 86 83              1413 	mov	dph,@r0
   0064 08                 1414 	inc	r0
   0065 86 F0              1415 	mov	b,@r0
   0067 12s0Fr63           1416 	lcall	_prvInitialiseTCBVariables
   006A E5 81              1417 	mov	a,sp
   006C 24 FC              1418 	add	a,#0xfc
   006E F5 81              1419 	mov	sp,a
                    0070   1420 	C$tasks.c$451$3$3 ==.
                           1421 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:451: pxTopOfStack = pxNewTCB->pxStack;	
   0070 A8*00              1422 	mov	r0,_bp
   0072 08                 1423 	inc	r0
   0073 08                 1424 	inc	r0
   0074 08                 1425 	inc	r0
   0075 74 20              1426 	mov	a,#0x20
   0077 26                 1427 	add	a,@r0
   0078 FF                 1428 	mov	r7,a
   0079 74 00              1429 	mov	a,#0x00
   007B 08                 1430 	inc	r0
   007C 36                 1431 	addc	a,@r0
   007D FA                 1432 	mov	r2,a
   007E 08                 1433 	inc	r0
   007F 86 03              1434 	mov	ar3,@r0
   0081 8F 82              1435 	mov	dpl,r7
   0083 8A 83              1436 	mov	dph,r2
   0085 8B F0              1437 	mov	b,r3
   0087 12s00r00           1438 	lcall	__gptrget
   008A FF                 1439 	mov	r7,a
   008B A3                 1440 	inc	dptr
   008C 12s00r00           1441 	lcall	__gptrget
   008F FA                 1442 	mov	r2,a
   0090 A3                 1443 	inc	dptr
   0091 12s00r00           1444 	lcall	__gptrget
   0094 FB                 1445 	mov	r3,a
                    0095   1446 	C$tasks.c$459$2$2 ==.
                           1447 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:459: pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pvTaskCode, pvParameters );
   0095 E5*00              1448 	mov	a,_bp
   0097 24 F6              1449 	add	a,#0xf6
   0099 F8                 1450 	mov	r0,a
   009A E6                 1451 	mov	a,@r0
   009B C0 E0              1452 	push	acc
   009D 08                 1453 	inc	r0
   009E E6                 1454 	mov	a,@r0
   009F C0 E0              1455 	push	acc
   00A1 08                 1456 	inc	r0
   00A2 E6                 1457 	mov	a,@r0
   00A3 C0 E0              1458 	push	acc
   00A5 A8*00              1459 	mov	r0,_bp
   00A7 08                 1460 	inc	r0
   00A8 E6                 1461 	mov	a,@r0
   00A9 C0 E0              1462 	push	acc
   00AB 08                 1463 	inc	r0
   00AC E6                 1464 	mov	a,@r0
   00AD C0 E0              1465 	push	acc
   00AF 8F 82              1466 	mov	dpl,r7
   00B1 8A 83              1467 	mov	dph,r2
   00B3 8B F0              1468 	mov	b,r3
   00B5 12s00r00           1469 	lcall	_pxPortInitialiseStack
   00B8 AA 82              1470 	mov	r2,dpl
   00BA AB 83              1471 	mov	r3,dph
   00BC AF F0              1472 	mov	r7,b
   00BE E5 81              1473 	mov	a,sp
   00C0 24 FB              1474 	add	a,#0xfb
   00C2 F5 81              1475 	mov	sp,a
   00C4 A8*00              1476 	mov	r0,_bp
   00C6 08                 1477 	inc	r0
   00C7 08                 1478 	inc	r0
   00C8 08                 1479 	inc	r0
   00C9 86 82              1480 	mov	dpl,@r0
   00CB 08                 1481 	inc	r0
   00CC 86 83              1482 	mov	dph,@r0
   00CE 08                 1483 	inc	r0
   00CF 86 F0              1484 	mov	b,@r0
   00D1 EA                 1485 	mov	a,r2
   00D2 12s00r00           1486 	lcall	__gptrput
   00D5 A3                 1487 	inc	dptr
   00D6 EB                 1488 	mov	a,r3
   00D7 12s00r00           1489 	lcall	__gptrput
   00DA A3                 1490 	inc	dptr
   00DB EF                 1491 	mov	a,r7
   00DC 12s00r00           1492 	lcall	__gptrput
                    00DF   1493 	C$tasks.c$463$2$2 ==.
                           1494 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:463: portENTER_CRITICAL();
   00DF C0 E0 C0 A8        1495 	 push ACC push IE 
   00E3 C2 AF              1496 	clr	_EA
                    00E5   1497 	C$tasks.c$465$3$4 ==.
                           1498 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:465: uxCurrentNumberOfTasks++;
   00E5 90s00r03           1499 	mov	dptr,#_uxCurrentNumberOfTasks
   00E8 E0                 1500 	movx	a,@dptr
   00E9 24 01              1501 	add	a,#0x01
   00EB F0                 1502 	movx	@dptr,a
                    00EC   1503 	C$tasks.c$466$3$4 ==.
                           1504 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:466: if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   00EC 90s00r03           1505 	mov	dptr,#_uxCurrentNumberOfTasks
   00EF E0                 1506 	movx	a,@dptr
   00F0 FA                 1507 	mov	r2,a
   00F1 BA 01 02           1508 	cjne	r2,#0x01,00136$
   00F4 80 03              1509 	sjmp	00137$
   00F6                    1510 00136$:
   00F6 02s01r11           1511 	ljmp	00106$
   00F9                    1512 00137$:
                    00F9   1513 	C$tasks.c$469$4$5 ==.
                           1514 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:469: pxCurrentTCB =  pxNewTCB;
   00F9 A8*00              1515 	mov	r0,_bp
   00FB 08                 1516 	inc	r0
   00FC 08                 1517 	inc	r0
   00FD 08                 1518 	inc	r0
   00FE 90s00r00           1519 	mov	dptr,#_pxCurrentTCB
   0101 E6                 1520 	mov	a,@r0
   0102 F0                 1521 	movx	@dptr,a
   0103 08                 1522 	inc	r0
   0104 A3                 1523 	inc	dptr
   0105 E6                 1524 	mov	a,@r0
   0106 F0                 1525 	movx	@dptr,a
   0107 08                 1526 	inc	r0
   0108 A3                 1527 	inc	dptr
   0109 E6                 1528 	mov	a,@r0
   010A F0                 1529 	movx	@dptr,a
                    010B   1530 	C$tasks.c$474$4$5 ==.
                           1531 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:474: prvInitialiseTaskLists();
   010B 12s10rC6           1532 	lcall	_prvInitialiseTaskLists
   010E 02s01r5A           1533 	ljmp	00107$
   0111                    1534 00106$:
                    0111   1535 	C$tasks.c$481$4$6 ==.
                           1536 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:481: if( xSchedulerRunning == pdFALSE )
   0111 90s00r08           1537 	mov	dptr,#_xSchedulerRunning
   0114 E0                 1538 	movx	a,@dptr
   0115 FA                 1539 	mov	r2,a
   0116 EA                 1540 	mov	a,r2
   0117 60 03              1541 	jz	00138$
   0119 02s01r5A           1542 	ljmp	00107$
   011C                    1543 00138$:
                    011C   1544 	C$tasks.c$483$5$7 ==.
                           1545 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:483: if( pxCurrentTCB->uxPriority <= uxPriority )
   011C 90s00r00           1546 	mov	dptr,#_pxCurrentTCB
   011F E0                 1547 	movx	a,@dptr
   0120 FA                 1548 	mov	r2,a
   0121 A3                 1549 	inc	dptr
   0122 E0                 1550 	movx	a,@dptr
   0123 FB                 1551 	mov	r3,a
   0124 A3                 1552 	inc	dptr
   0125 E0                 1553 	movx	a,@dptr
   0126 FF                 1554 	mov	r7,a
   0127 74 1F              1555 	mov	a,#0x1F
   0129 25 02              1556 	add	a,ar2
   012B FA                 1557 	mov	r2,a
   012C 74 00              1558 	mov	a,#0x00
   012E 35 03              1559 	addc	a,ar3
   0130 FB                 1560 	mov	r3,a
   0131 8A 82              1561 	mov	dpl,r2
   0133 8B 83              1562 	mov	dph,r3
   0135 8F F0              1563 	mov	b,r7
   0137 12s00r00           1564 	lcall	__gptrget
   013A FA                 1565 	mov	r2,a
   013B E5*00              1566 	mov	a,_bp
   013D 24 F5              1567 	add	a,#0xf5
   013F F8                 1568 	mov	r0,a
   0140 C3                 1569 	clr	c
   0141 E6                 1570 	mov	a,@r0
   0142 9A                 1571 	subb	a,r2
   0143 50 03              1572 	jnc	00139$
   0145 02s01r5A           1573 	ljmp	00107$
   0148                    1574 00139$:
                    0148   1575 	C$tasks.c$485$6$8 ==.
                           1576 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:485: pxCurrentTCB = pxNewTCB;	
   0148 A8*00              1577 	mov	r0,_bp
   014A 08                 1578 	inc	r0
   014B 08                 1579 	inc	r0
   014C 08                 1580 	inc	r0
   014D 90s00r00           1581 	mov	dptr,#_pxCurrentTCB
   0150 E6                 1582 	mov	a,@r0
   0151 F0                 1583 	movx	@dptr,a
   0152 08                 1584 	inc	r0
   0153 A3                 1585 	inc	dptr
   0154 E6                 1586 	mov	a,@r0
   0155 F0                 1587 	movx	@dptr,a
   0156 08                 1588 	inc	r0
   0157 A3                 1589 	inc	dptr
   0158 E6                 1590 	mov	a,@r0
   0159 F0                 1591 	movx	@dptr,a
   015A                    1592 00107$:
                    015A   1593 	C$tasks.c$492$3$4 ==.
                           1594 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:492: if( pxNewTCB->uxPriority > uxTopUsedPriority )
   015A A8*00              1595 	mov	r0,_bp
   015C 08                 1596 	inc	r0
   015D 08                 1597 	inc	r0
   015E 08                 1598 	inc	r0
   015F 74 1F              1599 	mov	a,#0x1F
   0161 26                 1600 	add	a,@r0
   0162 FA                 1601 	mov	r2,a
   0163 74 00              1602 	mov	a,#0x00
   0165 08                 1603 	inc	r0
   0166 36                 1604 	addc	a,@r0
   0167 FB                 1605 	mov	r3,a
   0168 08                 1606 	inc	r0
   0169 86 07              1607 	mov	ar7,@r0
   016B 8A 82              1608 	mov	dpl,r2
   016D 8B 83              1609 	mov	dph,r3
   016F 8F F0              1610 	mov	b,r7
   0171 12s00r00           1611 	lcall	__gptrget
   0174 FA                 1612 	mov	r2,a
   0175 90s00r06           1613 	mov	dptr,#_uxTopUsedPriority
   0178 E0                 1614 	movx	a,@dptr
   0179 FB                 1615 	mov	r3,a
   017A C3                 1616 	clr	c
   017B EB                 1617 	mov	a,r3
   017C 9A                 1618 	subb	a,r2
   017D 40 03              1619 	jc	00140$
   017F 02s01r87           1620 	ljmp	00109$
   0182                    1621 00140$:
                    0182   1622 	C$tasks.c$494$4$9 ==.
                           1623 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:494: uxTopUsedPriority = pxNewTCB->uxPriority;
   0182 90s00r06           1624 	mov	dptr,#_uxTopUsedPriority
   0185 EA                 1625 	mov	a,r2
   0186 F0                 1626 	movx	@dptr,a
   0187                    1627 00109$:
                    0187   1628 	C$tasks.c$505$4$10 ==.
                           1629 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:505: prvAddTaskToReadyQueue( pxNewTCB );
   0187 90s00r07           1630 	mov	dptr,#_uxTopReadyPriority
   018A E0                 1631 	movx	a,@dptr
   018B FB                 1632 	mov	r3,a
   018C C3                 1633 	clr	c
   018D EB                 1634 	mov	a,r3
   018E 9A                 1635 	subb	a,r2
   018F 40 03              1636 	jc	00141$
   0191 02s01r99           1637 	ljmp	00111$
   0194                    1638 00141$:
   0194 90s00r07           1639 	mov	dptr,#_uxTopReadyPriority
   0197 EA                 1640 	mov	a,r2
   0198 F0                 1641 	movx	@dptr,a
   0199                    1642 00111$:
   0199 A8*00              1643 	mov	r0,_bp
   019B 08                 1644 	inc	r0
   019C 08                 1645 	inc	r0
   019D 08                 1646 	inc	r0
   019E 74 03              1647 	mov	a,#0x03
   01A0 26                 1648 	add	a,@r0
   01A1 FB                 1649 	mov	r3,a
   01A2 74 00              1650 	mov	a,#0x00
   01A4 08                 1651 	inc	r0
   01A5 36                 1652 	addc	a,@r0
   01A6 FF                 1653 	mov	r7,a
   01A7 08                 1654 	inc	r0
   01A8 86 04              1655 	mov	ar4,@r0
   01AA EA                 1656 	mov	a,r2
   01AB 75 F0 0C           1657 	mov	b,#0x0C
   01AE A4                 1658 	mul	ab
   01AF 24r00              1659 	add	a,#_pxReadyTasksLists
   01B1 FA                 1660 	mov	r2,a
   01B2 74s00              1661 	mov	a,#(_pxReadyTasksLists >> 8)
   01B4 34 00              1662 	addc	a,#0x00
   01B6 FD                 1663 	mov	r5,a
   01B7 7E 00              1664 	mov	r6,#0x00
   01B9 C0 03              1665 	push	ar3
   01BB C0 07              1666 	push	ar7
   01BD C0 04              1667 	push	ar4
   01BF 8A 82              1668 	mov	dpl,r2
   01C1 8D 83              1669 	mov	dph,r5
   01C3 8E F0              1670 	mov	b,r6
   01C5 12s00r00           1671 	lcall	_vListInsertEnd
   01C8 15 81              1672 	dec	sp
   01CA 15 81              1673 	dec	sp
   01CC 15 81              1674 	dec	sp
                    01CE   1675 	C$tasks.c$507$3$4 ==.
                           1676 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:507: xReturn = pdPASS;
   01CE 7A 01              1677 	mov	r2,#0x01
                    01D0   1678 	C$tasks.c$510$2$2 ==.
                           1679 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:510: portEXIT_CRITICAL();
   01D0 D0 E0              1680 	 pop ACC 
   01D2 53 E0 80           1681 	anl	_ACC,#0x80
   01D5 E5 E0              1682 	mov	a,_ACC
   01D7 42 A8              1683 	orl	_IE,a
   01D9 D0 E0              1684 	 pop ACC 
   01DB 02s01rE0           1685 	ljmp	00114$
   01DE                    1686 00113$:
                    01DE   1687 	C$tasks.c$514$2$12 ==.
                           1688 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:514: xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   01DE 7A FF              1689 	mov	r2,#0xFF
   01E0                    1690 00114$:
                    01E0   1691 	C$tasks.c$518$1$1 ==.
                           1692 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:518: if( xReturn == pdPASS )
   01E0 BA 01 02           1693 	cjne	r2,#0x01,00142$
   01E3 80 03              1694 	sjmp	00143$
   01E5                    1695 00142$:
   01E5 02s02r56           1696 	ljmp	00122$
   01E8                    1697 00143$:
                    01E8   1698 	C$tasks.c$520$2$13 ==.
                           1699 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:520: if( ( void * ) pxCreatedTask != NULL )
   01E8 E5*00              1700 	mov	a,_bp
   01EA 24 F2              1701 	add	a,#0xf2
   01EC F8                 1702 	mov	r0,a
   01ED 86 03              1703 	mov	ar3,@r0
   01EF 08                 1704 	inc	r0
   01F0 86 04              1705 	mov	ar4,@r0
   01F2 08                 1706 	inc	r0
   01F3 86 05              1707 	mov	ar5,@r0
   01F5 BB 00 09           1708 	cjne	r3,#0x00,00144$
   01F8 BC 00 06           1709 	cjne	r4,#0x00,00144$
   01FB BD 00 03           1710 	cjne	r5,#0x00,00144$
   01FE 02s02r1C           1711 	ljmp	00116$
   0201                    1712 00144$:
                    0201   1713 	C$tasks.c$525$3$14 ==.
                           1714 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:525: *pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   0201 8B 82              1715 	mov	dpl,r3
   0203 8C 83              1716 	mov	dph,r4
   0205 8D F0              1717 	mov	b,r5
   0207 A8*00              1718 	mov	r0,_bp
   0209 08                 1719 	inc	r0
   020A 08                 1720 	inc	r0
   020B 08                 1721 	inc	r0
   020C E6                 1722 	mov	a,@r0
   020D 12s00r00           1723 	lcall	__gptrput
   0210 A3                 1724 	inc	dptr
   0211 08                 1725 	inc	r0
   0212 E6                 1726 	mov	a,@r0
   0213 12s00r00           1727 	lcall	__gptrput
   0216 A3                 1728 	inc	dptr
   0217 08                 1729 	inc	r0
   0218 E6                 1730 	mov	a,@r0
   0219 12s00r00           1731 	lcall	__gptrput
   021C                    1732 00116$:
                    021C   1733 	C$tasks.c$528$2$13 ==.
                           1734 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:528: if( xSchedulerRunning != pdFALSE )
   021C 90s00r08           1735 	mov	dptr,#_xSchedulerRunning
   021F E0                 1736 	movx	a,@dptr
   0220 FB                 1737 	mov	r3,a
   0221 EB                 1738 	mov	a,r3
   0222 70 03              1739 	jnz	00145$
   0224 02s02r56           1740 	ljmp	00122$
   0227                    1741 00145$:
                    0227   1742 	C$tasks.c$532$3$15 ==.
                           1743 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:532: if( pxCurrentTCB->uxPriority < uxPriority )
   0227 90s00r00           1744 	mov	dptr,#_pxCurrentTCB
   022A E0                 1745 	movx	a,@dptr
   022B FB                 1746 	mov	r3,a
   022C A3                 1747 	inc	dptr
   022D E0                 1748 	movx	a,@dptr
   022E FC                 1749 	mov	r4,a
   022F A3                 1750 	inc	dptr
   0230 E0                 1751 	movx	a,@dptr
   0231 FD                 1752 	mov	r5,a
   0232 74 1F              1753 	mov	a,#0x1F
   0234 25 03              1754 	add	a,ar3
   0236 FB                 1755 	mov	r3,a
   0237 74 00              1756 	mov	a,#0x00
   0239 35 04              1757 	addc	a,ar4
   023B FC                 1758 	mov	r4,a
   023C 8B 82              1759 	mov	dpl,r3
   023E 8C 83              1760 	mov	dph,r4
   0240 8D F0              1761 	mov	b,r5
   0242 12s00r00           1762 	lcall	__gptrget
   0245 FB                 1763 	mov	r3,a
   0246 E5*00              1764 	mov	a,_bp
   0248 24 F5              1765 	add	a,#0xf5
   024A F8                 1766 	mov	r0,a
   024B C3                 1767 	clr	c
   024C EB                 1768 	mov	a,r3
   024D 96                 1769 	subb	a,@r0
   024E 40 03              1770 	jc	00146$
   0250 02s02r56           1771 	ljmp	00122$
   0253                    1772 00146$:
                    0253   1773 	C$tasks.c$534$4$16 ==.
                           1774 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:534: taskYIELD();
   0253 12s00r00           1775 	lcall	_vPortYield
   0256                    1776 00122$:
                    0256   1777 	C$tasks.c$539$1$1 ==.
                           1778 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:539: return xReturn;
   0256 8A 82              1779 	mov	dpl,r2
   0258                    1780 00123$:
   0258 85*00 81           1781 	mov	sp,_bp
   025B D0*00              1782 	pop	_bp
                    025D   1783 	C$tasks.c$540$1$1 ==.
                    025D   1784 	XG$xTaskCreate$0$0 ==.
   025D 22                 1785 	ret
                           1786 ;------------------------------------------------------------
                           1787 ;Allocation info for local variables in function 'vTaskDelayUntil'
                           1788 ;------------------------------------------------------------
                           1789 ;xTimeIncrement            Allocated to stack - offset -4
                           1790 ;pxPreviousWakeTime        Allocated to stack - offset 1
                           1791 ;xTimeToWake               Allocated to registers r3 r2 
                           1792 ;xAlreadyYielded           Allocated to registers r2 
                           1793 ;xShouldDelay              Allocated to stack - offset 4
                           1794 ;------------------------------------------------------------
                    025E   1795 	G$vTaskDelayUntil$0$0 ==.
                    025E   1796 	C$tasks.c$607$1$1 ==.
                           1797 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:607: void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
                           1798 ;	-----------------------------------------
                           1799 ;	 function vTaskDelayUntil
                           1800 ;	-----------------------------------------
   025E                    1801 _vTaskDelayUntil:
   025E C0*00              1802 	push	_bp
   0260 85 81*00           1803 	mov	_bp,sp
   0263 C0 82              1804 	push	dpl
   0265 C0 83              1805 	push	dph
   0267 C0 F0              1806 	push	b
   0269 05 81              1807 	inc	sp
                    026B   1808 	C$tasks.c$610$1$1 ==.
                           1809 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:610: portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
   026B E5*00              1810 	mov	a,_bp
   026D 24 04              1811 	add	a,#0x04
   026F F8                 1812 	mov	r0,a
   0270 76 00              1813 	mov	@r0,#0x00
                    0272   1814 	C$tasks.c$612$1$1 ==.
                           1815 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:612: vTaskSuspendAll();
   0272 12s05r54           1816 	lcall	_vTaskSuspendAll
                    0275   1817 	C$tasks.c$615$2$2 ==.
                           1818 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:615: xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   0275 A8*00              1819 	mov	r0,_bp
   0277 08                 1820 	inc	r0
   0278 86 82              1821 	mov	dpl,@r0
   027A 08                 1822 	inc	r0
   027B 86 83              1823 	mov	dph,@r0
   027D 08                 1824 	inc	r0
   027E 86 F0              1825 	mov	b,@r0
   0280 12s00r00           1826 	lcall	__gptrget
   0283 FE                 1827 	mov	r6,a
   0284 A3                 1828 	inc	dptr
   0285 12s00r00           1829 	lcall	__gptrget
   0288 FF                 1830 	mov	r7,a
   0289 E5*00              1831 	mov	a,_bp
   028B 24 FC              1832 	add	a,#0xfc
   028D F8                 1833 	mov	r0,a
   028E E6                 1834 	mov	a,@r0
   028F 25 06              1835 	add	a,ar6
   0291 FD                 1836 	mov	r5,a
   0292 08                 1837 	inc	r0
   0293 E6                 1838 	mov	a,@r0
   0294 35 07              1839 	addc	a,ar7
   0296 FA                 1840 	mov	r2,a
   0297 8D 03              1841 	mov	ar3,r5
                    0299   1842 	C$tasks.c$617$2$2 ==.
                           1843 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:617: if( xTickCount < *pxPreviousWakeTime )
   0299 90s00r04           1844 	mov	dptr,#_xTickCount
   029C E0                 1845 	movx	a,@dptr
   029D FC                 1846 	mov	r4,a
   029E A3                 1847 	inc	dptr
   029F E0                 1848 	movx	a,@dptr
   02A0 FD                 1849 	mov	r5,a
   02A1 C3                 1850 	clr	c
   02A2 EC                 1851 	mov	a,r4
   02A3 9E                 1852 	subb	a,r6
   02A4 ED                 1853 	mov	a,r5
   02A5 9F                 1854 	subb	a,r7
   02A6 40 03              1855 	jc	00126$
   02A8 02s02rD1           1856 	ljmp	00108$
   02AB                    1857 00126$:
                    02AB   1858 	C$tasks.c$624$3$3 ==.
                           1859 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:624: if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   02AB C3                 1860 	clr	c
   02AC EB                 1861 	mov	a,r3
   02AD 9E                 1862 	subb	a,r6
   02AE EA                 1863 	mov	a,r2
   02AF 9F                 1864 	subb	a,r7
   02B0 40 03              1865 	jc	00127$
   02B2 02s02rF4           1866 	ljmp	00109$
   02B5                    1867 00127$:
   02B5 90s00r04           1868 	mov	dptr,#_xTickCount
   02B8 E0                 1869 	movx	a,@dptr
   02B9 FC                 1870 	mov	r4,a
   02BA A3                 1871 	inc	dptr
   02BB E0                 1872 	movx	a,@dptr
   02BC FD                 1873 	mov	r5,a
   02BD C3                 1874 	clr	c
   02BE EC                 1875 	mov	a,r4
   02BF 9B                 1876 	subb	a,r3
   02C0 ED                 1877 	mov	a,r5
   02C1 9A                 1878 	subb	a,r2
   02C2 40 03              1879 	jc	00128$
   02C4 02s02rF4           1880 	ljmp	00109$
   02C7                    1881 00128$:
                    02C7   1882 	C$tasks.c$626$4$4 ==.
                           1883 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:626: xShouldDelay = pdTRUE;
   02C7 E5*00              1884 	mov	a,_bp
   02C9 24 04              1885 	add	a,#0x04
   02CB F8                 1886 	mov	r0,a
   02CC 76 01              1887 	mov	@r0,#0x01
   02CE 02s02rF4           1888 	ljmp	00109$
   02D1                    1889 00108$:
                    02D1   1890 	C$tasks.c$634$3$5 ==.
                           1891 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:634: if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   02D1 C3                 1892 	clr	c
   02D2 EB                 1893 	mov	a,r3
   02D3 9E                 1894 	subb	a,r6
   02D4 EA                 1895 	mov	a,r2
   02D5 9F                 1896 	subb	a,r7
   02D6 50 03              1897 	jnc	00129$
   02D8 02s02rED           1898 	ljmp	00104$
   02DB                    1899 00129$:
   02DB 90s00r04           1900 	mov	dptr,#_xTickCount
   02DE E0                 1901 	movx	a,@dptr
   02DF FC                 1902 	mov	r4,a
   02E0 A3                 1903 	inc	dptr
   02E1 E0                 1904 	movx	a,@dptr
   02E2 FD                 1905 	mov	r5,a
   02E3 C3                 1906 	clr	c
   02E4 EC                 1907 	mov	a,r4
   02E5 9B                 1908 	subb	a,r3
   02E6 ED                 1909 	mov	a,r5
   02E7 9A                 1910 	subb	a,r2
   02E8 40 03              1911 	jc	00130$
   02EA 02s02rF4           1912 	ljmp	00109$
   02ED                    1913 00130$:
   02ED                    1914 00104$:
                    02ED   1915 	C$tasks.c$636$4$6 ==.
                           1916 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:636: xShouldDelay = pdTRUE;
   02ED E5*00              1917 	mov	a,_bp
   02EF 24 04              1918 	add	a,#0x04
   02F1 F8                 1919 	mov	r0,a
   02F2 76 01              1920 	mov	@r0,#0x01
   02F4                    1921 00109$:
                    02F4   1922 	C$tasks.c$641$2$2 ==.
                           1923 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:641: *pxPreviousWakeTime = xTimeToWake;
   02F4 A8*00              1924 	mov	r0,_bp
   02F6 08                 1925 	inc	r0
   02F7 86 82              1926 	mov	dpl,@r0
   02F9 08                 1927 	inc	r0
   02FA 86 83              1928 	mov	dph,@r0
   02FC 08                 1929 	inc	r0
   02FD 86 F0              1930 	mov	b,@r0
   02FF EB                 1931 	mov	a,r3
   0300 12s00r00           1932 	lcall	__gptrput
   0303 A3                 1933 	inc	dptr
   0304 EA                 1934 	mov	a,r2
   0305 12s00r00           1935 	lcall	__gptrput
                    0308   1936 	C$tasks.c$643$2$2 ==.
                           1937 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:643: if( xShouldDelay )
   0308 E5*00              1938 	mov	a,_bp
   030A 24 04              1939 	add	a,#0x04
   030C F8                 1940 	mov	r0,a
   030D E6                 1941 	mov	a,@r0
   030E 70 03              1942 	jnz	00131$
   0310 02s03rDC           1943 	ljmp	00114$
   0313                    1944 00131$:
                    0313   1945 	C$tasks.c$650$3$7 ==.
                           1946 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:650: vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   0313 90s00r00           1947 	mov	dptr,#_pxCurrentTCB
   0316 E0                 1948 	movx	a,@dptr
   0317 FC                 1949 	mov	r4,a
   0318 A3                 1950 	inc	dptr
   0319 E0                 1951 	movx	a,@dptr
   031A FD                 1952 	mov	r5,a
   031B A3                 1953 	inc	dptr
   031C E0                 1954 	movx	a,@dptr
   031D FE                 1955 	mov	r6,a
   031E 74 03              1956 	mov	a,#0x03
   0320 25 04              1957 	add	a,ar4
   0322 FC                 1958 	mov	r4,a
   0323 74 00              1959 	mov	a,#0x00
   0325 35 05              1960 	addc	a,ar5
   0327 FD                 1961 	mov	r5,a
   0328 8C 82              1962 	mov	dpl,r4
   032A 8D 83              1963 	mov	dph,r5
   032C 8E F0              1964 	mov	b,r6
   032E C0 02              1965 	push	ar2
   0330 C0 03              1966 	push	ar3
   0332 12s00r00           1967 	lcall	_vListRemove
   0335 D0 03              1968 	pop	ar3
   0337 D0 02              1969 	pop	ar2
                    0339   1970 	C$tasks.c$653$3$7 ==.
                           1971 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:653: listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   0339 90s00r00           1972 	mov	dptr,#_pxCurrentTCB
   033C E0                 1973 	movx	a,@dptr
   033D FC                 1974 	mov	r4,a
   033E A3                 1975 	inc	dptr
   033F E0                 1976 	movx	a,@dptr
   0340 FD                 1977 	mov	r5,a
   0341 A3                 1978 	inc	dptr
   0342 E0                 1979 	movx	a,@dptr
   0343 FE                 1980 	mov	r6,a
   0344 74 03              1981 	mov	a,#0x03
   0346 25 04              1982 	add	a,ar4
   0348 FC                 1983 	mov	r4,a
   0349 74 00              1984 	mov	a,#0x00
   034B 35 05              1985 	addc	a,ar5
   034D FD                 1986 	mov	r5,a
   034E 8C 82              1987 	mov	dpl,r4
   0350 8D 83              1988 	mov	dph,r5
   0352 8E F0              1989 	mov	b,r6
   0354 EB                 1990 	mov	a,r3
   0355 12s00r00           1991 	lcall	__gptrput
   0358 A3                 1992 	inc	dptr
   0359 EA                 1993 	mov	a,r2
   035A 12s00r00           1994 	lcall	__gptrput
                    035D   1995 	C$tasks.c$655$3$7 ==.
                           1996 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:655: if( xTimeToWake < xTickCount )
   035D 90s00r04           1997 	mov	dptr,#_xTickCount
   0360 E0                 1998 	movx	a,@dptr
   0361 FC                 1999 	mov	r4,a
   0362 A3                 2000 	inc	dptr
   0363 E0                 2001 	movx	a,@dptr
   0364 FD                 2002 	mov	r5,a
   0365 C3                 2003 	clr	c
   0366 EB                 2004 	mov	a,r3
   0367 9C                 2005 	subb	a,r4
   0368 EA                 2006 	mov	a,r2
   0369 9D                 2007 	subb	a,r5
   036A 40 03              2008 	jc	00132$
   036C 02s03rA7           2009 	ljmp	00111$
   036F                    2010 00132$:
                    036F   2011 	C$tasks.c$659$4$8 ==.
                           2012 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:659: vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   036F 90s00r00           2013 	mov	dptr,#_pxCurrentTCB
   0372 E0                 2014 	movx	a,@dptr
   0373 FA                 2015 	mov	r2,a
   0374 A3                 2016 	inc	dptr
   0375 E0                 2017 	movx	a,@dptr
   0376 FB                 2018 	mov	r3,a
   0377 A3                 2019 	inc	dptr
   0378 E0                 2020 	movx	a,@dptr
   0379 FC                 2021 	mov	r4,a
   037A 74 03              2022 	mov	a,#0x03
   037C 25 02              2023 	add	a,ar2
   037E FA                 2024 	mov	r2,a
   037F 74 00              2025 	mov	a,#0x00
   0381 35 03              2026 	addc	a,ar3
   0383 FB                 2027 	mov	r3,a
   0384 90s00r4B           2028 	mov	dptr,#_pxOverflowDelayedTaskList
   0387 E0                 2029 	movx	a,@dptr
   0388 FD                 2030 	mov	r5,a
   0389 A3                 2031 	inc	dptr
   038A E0                 2032 	movx	a,@dptr
   038B FE                 2033 	mov	r6,a
   038C A3                 2034 	inc	dptr
   038D E0                 2035 	movx	a,@dptr
   038E FF                 2036 	mov	r7,a
   038F C0 02              2037 	push	ar2
   0391 C0 03              2038 	push	ar3
   0393 C0 04              2039 	push	ar4
   0395 8D 82              2040 	mov	dpl,r5
   0397 8E 83              2041 	mov	dph,r6
   0399 8F F0              2042 	mov	b,r7
   039B 12s00r00           2043 	lcall	_vListInsert
   039E 15 81              2044 	dec	sp
   03A0 15 81              2045 	dec	sp
   03A2 15 81              2046 	dec	sp
   03A4 02s03rDC           2047 	ljmp	00114$
   03A7                    2048 00111$:
                    03A7   2049 	C$tasks.c$665$4$9 ==.
                           2050 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:665: vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   03A7 90s00r00           2051 	mov	dptr,#_pxCurrentTCB
   03AA E0                 2052 	movx	a,@dptr
   03AB FA                 2053 	mov	r2,a
   03AC A3                 2054 	inc	dptr
   03AD E0                 2055 	movx	a,@dptr
   03AE FB                 2056 	mov	r3,a
   03AF A3                 2057 	inc	dptr
   03B0 E0                 2058 	movx	a,@dptr
   03B1 FC                 2059 	mov	r4,a
   03B2 74 03              2060 	mov	a,#0x03
   03B4 25 02              2061 	add	a,ar2
   03B6 FA                 2062 	mov	r2,a
   03B7 74 00              2063 	mov	a,#0x00
   03B9 35 03              2064 	addc	a,ar3
   03BB FB                 2065 	mov	r3,a
   03BC 90s00r48           2066 	mov	dptr,#_pxDelayedTaskList
   03BF E0                 2067 	movx	a,@dptr
   03C0 FD                 2068 	mov	r5,a
   03C1 A3                 2069 	inc	dptr
   03C2 E0                 2070 	movx	a,@dptr
   03C3 FE                 2071 	mov	r6,a
   03C4 A3                 2072 	inc	dptr
   03C5 E0                 2073 	movx	a,@dptr
   03C6 FF                 2074 	mov	r7,a
   03C7 C0 02              2075 	push	ar2
   03C9 C0 03              2076 	push	ar3
   03CB C0 04              2077 	push	ar4
   03CD 8D 82              2078 	mov	dpl,r5
   03CF 8E 83              2079 	mov	dph,r6
   03D1 8F F0              2080 	mov	b,r7
   03D3 12s00r00           2081 	lcall	_vListInsert
   03D6 15 81              2082 	dec	sp
   03D8 15 81              2083 	dec	sp
   03DA 15 81              2084 	dec	sp
   03DC                    2085 00114$:
                    03DC   2086 	C$tasks.c$669$1$1 ==.
                           2087 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:669: xAlreadyYielded = xTaskResumeAll();
   03DC 12s05r6D           2088 	lcall	_xTaskResumeAll
   03DF AA 82              2089 	mov	r2,dpl
                    03E1   2090 	C$tasks.c$673$1$1 ==.
                           2091 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:673: if( !xAlreadyYielded )
   03E1 EA                 2092 	mov	a,r2
   03E2 60 03              2093 	jz	00133$
   03E4 02s03rEA           2094 	ljmp	00117$
   03E7                    2095 00133$:
                    03E7   2096 	C$tasks.c$675$2$10 ==.
                           2097 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:675: taskYIELD();
   03E7 12s00r00           2098 	lcall	_vPortYield
   03EA                    2099 00117$:
   03EA 85*00 81           2100 	mov	sp,_bp
   03ED D0*00              2101 	pop	_bp
                    03EF   2102 	C$tasks.c$677$2$1 ==.
                    03EF   2103 	XG$vTaskDelayUntil$0$0 ==.
   03EF 22                 2104 	ret
                           2105 ;------------------------------------------------------------
                           2106 ;Allocation info for local variables in function 'vTaskDelay'
                           2107 ;------------------------------------------------------------
                           2108 ;xTicksToDelay             Allocated to registers r2 r3 
                           2109 ;xTimeToWake               Allocated to registers r2 r3 
                           2110 ;xAlreadyYielded           Allocated to registers r4 
                           2111 ;sloc0                     Allocated to stack - offset 6
                           2112 ;------------------------------------------------------------
                    03F0   2113 	G$vTaskDelay$0$0 ==.
                    03F0   2114 	C$tasks.c$684$2$1 ==.
                           2115 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:684: void vTaskDelay( portTickType xTicksToDelay )
                           2116 ;	-----------------------------------------
                           2117 ;	 function vTaskDelay
                           2118 ;	-----------------------------------------
   03F0                    2119 _vTaskDelay:
   03F0 AA 82              2120 	mov	r2,dpl
   03F2 AB 83              2121 	mov	r3,dph
                    03F4   2122 	C$tasks.c$687$1$1 ==.
                           2123 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:687: signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   03F4 7C 00              2124 	mov	r4,#0x00
                    03F6   2125 	C$tasks.c$690$1$1 ==.
                           2126 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:690: if( xTicksToDelay > ( portTickType ) 0 )
   03F6 EA                 2127 	mov	a,r2
   03F7 4B                 2128 	orl	a,r3
   03F8 70 03              2129 	jnz	00113$
   03FA 02s04rEA           2130 	ljmp	00105$
   03FD                    2131 00113$:
                    03FD   2132 	C$tasks.c$692$2$2 ==.
                           2133 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:692: vTaskSuspendAll();
   03FD C0 02              2134 	push	ar2
   03FF C0 03              2135 	push	ar3
   0401 12s05r54           2136 	lcall	_vTaskSuspendAll
   0404 D0 03              2137 	pop	ar3
   0406 D0 02              2138 	pop	ar2
                    0408   2139 	C$tasks.c$706$3$3 ==.
                           2140 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:706: xTimeToWake = xTickCount + xTicksToDelay;
   0408 90s00r04           2141 	mov	dptr,#_xTickCount
   040B E0                 2142 	movx	a,@dptr
   040C FD                 2143 	mov	r5,a
   040D A3                 2144 	inc	dptr
   040E E0                 2145 	movx	a,@dptr
   040F FE                 2146 	mov	r6,a
   0410 E5 02              2147 	mov	a,ar2
   0412 25 05              2148 	add	a,ar5
   0414 FA                 2149 	mov	r2,a
   0415 E5 03              2150 	mov	a,ar3
   0417 35 06              2151 	addc	a,ar6
   0419 FB                 2152 	mov	r3,a
                    041A   2153 	C$tasks.c$711$3$3 ==.
                           2154 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:711: vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   041A 90s00r00           2155 	mov	dptr,#_pxCurrentTCB
   041D E0                 2156 	movx	a,@dptr
   041E FD                 2157 	mov	r5,a
   041F A3                 2158 	inc	dptr
   0420 E0                 2159 	movx	a,@dptr
   0421 FE                 2160 	mov	r6,a
   0422 A3                 2161 	inc	dptr
   0423 E0                 2162 	movx	a,@dptr
   0424 FF                 2163 	mov	r7,a
   0425 74 03              2164 	mov	a,#0x03
   0427 25 05              2165 	add	a,ar5
   0429 FD                 2166 	mov	r5,a
   042A 74 00              2167 	mov	a,#0x00
   042C 35 06              2168 	addc	a,ar6
   042E FE                 2169 	mov	r6,a
   042F 8D 82              2170 	mov	dpl,r5
   0431 8E 83              2171 	mov	dph,r6
   0433 8F F0              2172 	mov	b,r7
   0435 C0 02              2173 	push	ar2
   0437 C0 03              2174 	push	ar3
   0439 12s00r00           2175 	lcall	_vListRemove
   043C D0 03              2176 	pop	ar3
   043E D0 02              2177 	pop	ar2
                    0440   2178 	C$tasks.c$714$3$3 ==.
                           2179 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:714: listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   0440 90s00r00           2180 	mov	dptr,#_pxCurrentTCB
   0443 E0                 2181 	movx	a,@dptr
   0444 FD                 2182 	mov	r5,a
   0445 A3                 2183 	inc	dptr
   0446 E0                 2184 	movx	a,@dptr
   0447 FE                 2185 	mov	r6,a
   0448 A3                 2186 	inc	dptr
   0449 E0                 2187 	movx	a,@dptr
   044A FF                 2188 	mov	r7,a
   044B 74 03              2189 	mov	a,#0x03
   044D 25 05              2190 	add	a,ar5
   044F FD                 2191 	mov	r5,a
   0450 74 00              2192 	mov	a,#0x00
   0452 35 06              2193 	addc	a,ar6
   0454 FE                 2194 	mov	r6,a
   0455 8D 82              2195 	mov	dpl,r5
   0457 8E 83              2196 	mov	dph,r6
   0459 8F F0              2197 	mov	b,r7
   045B EA                 2198 	mov	a,r2
   045C 12s00r00           2199 	lcall	__gptrput
   045F A3                 2200 	inc	dptr
   0460 EB                 2201 	mov	a,r3
   0461 12s00r00           2202 	lcall	__gptrput
                    0464   2203 	C$tasks.c$716$3$3 ==.
                           2204 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:716: if( xTimeToWake < xTickCount )
   0464 90s00r04           2205 	mov	dptr,#_xTickCount
   0467 E0                 2206 	movx	a,@dptr
   0468 FD                 2207 	mov	r5,a
   0469 A3                 2208 	inc	dptr
   046A E0                 2209 	movx	a,@dptr
   046B FE                 2210 	mov	r6,a
   046C C3                 2211 	clr	c
   046D EA                 2212 	mov	a,r2
   046E 9D                 2213 	subb	a,r5
   046F EB                 2214 	mov	a,r3
   0470 9E                 2215 	subb	a,r6
   0471 40 03              2216 	jc	00114$
   0473 02s04rAE           2217 	ljmp	00102$
   0476                    2218 00114$:
                    0476   2219 	C$tasks.c$720$4$4 ==.
                           2220 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:720: vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   0476 90s00r00           2221 	mov	dptr,#_pxCurrentTCB
   0479 E0                 2222 	movx	a,@dptr
   047A FA                 2223 	mov	r2,a
   047B A3                 2224 	inc	dptr
   047C E0                 2225 	movx	a,@dptr
   047D FB                 2226 	mov	r3,a
   047E A3                 2227 	inc	dptr
   047F E0                 2228 	movx	a,@dptr
   0480 FD                 2229 	mov	r5,a
   0481 74 03              2230 	mov	a,#0x03
   0483 25 02              2231 	add	a,ar2
   0485 FC                 2232 	mov	r4,a
   0486 74 00              2233 	mov	a,#0x00
   0488 35 03              2234 	addc	a,ar3
   048A FB                 2235 	mov	r3,a
   048B 90s00r4B           2236 	mov	dptr,#_pxOverflowDelayedTaskList
   048E E0                 2237 	movx	a,@dptr
   048F FE                 2238 	mov	r6,a
   0490 A3                 2239 	inc	dptr
   0491 E0                 2240 	movx	a,@dptr
   0492 FF                 2241 	mov	r7,a
   0493 A3                 2242 	inc	dptr
   0494 E0                 2243 	movx	a,@dptr
   0495 FA                 2244 	mov	r2,a
   0496 C0 04              2245 	push	ar4
   0498 C0 03              2246 	push	ar3
   049A C0 05              2247 	push	ar5
   049C 8E 82              2248 	mov	dpl,r6
   049E 8F 83              2249 	mov	dph,r7
   04A0 8A F0              2250 	mov	b,r2
   04A2 12s00r00           2251 	lcall	_vListInsert
   04A5 15 81              2252 	dec	sp
   04A7 15 81              2253 	dec	sp
   04A9 15 81              2254 	dec	sp
   04AB 02s04rE3           2255 	ljmp	00103$
   04AE                    2256 00102$:
                    04AE   2257 	C$tasks.c$726$4$5 ==.
                           2258 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:726: vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   04AE 90s00r00           2259 	mov	dptr,#_pxCurrentTCB
   04B1 E0                 2260 	movx	a,@dptr
   04B2 FA                 2261 	mov	r2,a
   04B3 A3                 2262 	inc	dptr
   04B4 E0                 2263 	movx	a,@dptr
   04B5 FB                 2264 	mov	r3,a
   04B6 A3                 2265 	inc	dptr
   04B7 E0                 2266 	movx	a,@dptr
   04B8 FD                 2267 	mov	r5,a
   04B9 74 03              2268 	mov	a,#0x03
   04BB 25 02              2269 	add	a,ar2
   04BD FC                 2270 	mov	r4,a
   04BE 74 00              2271 	mov	a,#0x00
   04C0 35 03              2272 	addc	a,ar3
   04C2 FB                 2273 	mov	r3,a
   04C3 90s00r48           2274 	mov	dptr,#_pxDelayedTaskList
   04C6 E0                 2275 	movx	a,@dptr
   04C7 FE                 2276 	mov	r6,a
   04C8 A3                 2277 	inc	dptr
   04C9 E0                 2278 	movx	a,@dptr
   04CA FF                 2279 	mov	r7,a
   04CB A3                 2280 	inc	dptr
   04CC E0                 2281 	movx	a,@dptr
   04CD FA                 2282 	mov	r2,a
   04CE C0 04              2283 	push	ar4
   04D0 C0 03              2284 	push	ar3
   04D2 C0 05              2285 	push	ar5
   04D4 8E 82              2286 	mov	dpl,r6
   04D6 8F 83              2287 	mov	dph,r7
   04D8 8A F0              2288 	mov	b,r2
   04DA 12s00r00           2289 	lcall	_vListInsert
   04DD 15 81              2290 	dec	sp
   04DF 15 81              2291 	dec	sp
   04E1 15 81              2292 	dec	sp
   04E3                    2293 00103$:
                    04E3   2294 	C$tasks.c$729$2$2 ==.
                           2295 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:729: xAlreadyYielded = xTaskResumeAll();
   04E3 12s05r6D           2296 	lcall	_xTaskResumeAll
   04E6 AA 82              2297 	mov	r2,dpl
   04E8 8A 04              2298 	mov	ar4,r2
   04EA                    2299 00105$:
                    04EA   2300 	C$tasks.c$734$1$1 ==.
                           2301 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:734: if( !xAlreadyYielded )
   04EA EC                 2302 	mov	a,r4
   04EB 60 03              2303 	jz	00115$
   04ED 02s04rF3           2304 	ljmp	00108$
   04F0                    2305 00115$:
                    04F0   2306 	C$tasks.c$736$2$6 ==.
                           2307 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:736: taskYIELD();
   04F0 12s00r00           2308 	lcall	_vPortYield
   04F3                    2309 00108$:
                    04F3   2310 	C$tasks.c$738$2$1 ==.
                    04F3   2311 	XG$vTaskDelay$0$0 ==.
   04F3 22                 2312 	ret
                           2313 ;------------------------------------------------------------
                           2314 ;Allocation info for local variables in function 'vTaskStartScheduler'
                           2315 ;------------------------------------------------------------
                           2316 ;xReturn                   Allocated to registers r2 
                           2317 ;------------------------------------------------------------
                    04F4   2318 	G$vTaskStartScheduler$0$0 ==.
                    04F4   2319 	C$tasks.c$1027$2$1 ==.
                           2320 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1027: void vTaskStartScheduler( void )
                           2321 ;	-----------------------------------------
                           2322 ;	 function vTaskStartScheduler
                           2323 ;	-----------------------------------------
   04F4                    2324 _vTaskStartScheduler:
                    04F4   2325 	C$tasks.c$1032$1$1 ==.
                           2326 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1032: xReturn = xTaskCreate( prvIdleTask, ( signed portCHAR * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, tskIDLE_PRIORITY, ( xTaskHandle * ) NULL );
   04F4 74 00              2327 	mov	a,#0x00
   04F6 C0 E0              2328 	push	acc
   04F8 C0 E0              2329 	push	acc
   04FA C0 E0              2330 	push	acc
   04FC 74 00              2331 	mov	a,#0x00
   04FE C0 E0              2332 	push	acc
   0500 74 00              2333 	mov	a,#0x00
   0502 C0 E0              2334 	push	acc
   0504 C0 E0              2335 	push	acc
   0506 C0 E0              2336 	push	acc
   0508 74 BB              2337 	mov	a,#0xBB
   050A C0 E0              2338 	push	acc
   050C 74 00              2339 	mov	a,#0x00
   050E C0 E0              2340 	push	acc
   0510 74r00              2341 	mov	a,#__str_0
   0512 C0 E0              2342 	push	acc
   0514 74s00              2343 	mov	a,#(__str_0 >> 8)
   0516 C0 E0              2344 	push	acc
   0518 74 80              2345 	mov	a,#0x80
   051A C0 E0              2346 	push	acc
   051C 75 82r4B           2347 	mov	dpl,#_prvIdleTask
   051F 75 83s0F           2348 	mov	dph,#(_prvIdleTask >> 8)
   0522 12s00r00           2349 	lcall	_xTaskCreate
   0525 AA 82              2350 	mov	r2,dpl
   0527 E5 81              2351 	mov	a,sp
   0529 24 F4              2352 	add	a,#0xf4
   052B F5 81              2353 	mov	sp,a
                    052D   2354 	C$tasks.c$1034$1$1 ==.
                           2355 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1034: if( xReturn == pdPASS )
   052D BA 01 02           2356 	cjne	r2,#0x01,00108$
   0530 80 03              2357 	sjmp	00109$
   0532                    2358 00108$:
   0532 02s05r47           2359 	ljmp	00105$
   0535                    2360 00109$:
                    0535   2361 	C$tasks.c$1044$2$2 ==.
                           2362 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1044: portDISABLE_INTERRUPTS();
   0535 C2 AF              2363 	clr	_EA
                    0537   2364 	C$tasks.c$1046$2$2 ==.
                           2365 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1046: xSchedulerRunning = pdTRUE;
   0537 90s00r08           2366 	mov	dptr,#_xSchedulerRunning
   053A 74 01              2367 	mov	a,#0x01
   053C F0                 2368 	movx	@dptr,a
                    053D   2369 	C$tasks.c$1047$2$2 ==.
                           2370 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1047: xTickCount = ( portTickType ) 0;
   053D 90s00r04           2371 	mov	dptr,#_xTickCount
   0540 E4                 2372 	clr	a
   0541 F0                 2373 	movx	@dptr,a
   0542 A3                 2374 	inc	dptr
   0543 F0                 2375 	movx	@dptr,a
                    0544   2376 	C$tasks.c$1051$2$2 ==.
                           2377 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1051: if( xPortStartScheduler() )
   0544 12s00r00           2378 	lcall	_xPortStartScheduler
   0547                    2379 00105$:
                    0547   2380 	C$tasks.c$1061$2$1 ==.
                    0547   2381 	XG$vTaskStartScheduler$0$0 ==.
   0547 22                 2382 	ret
                           2383 ;------------------------------------------------------------
                           2384 ;Allocation info for local variables in function 'vTaskEndScheduler'
                           2385 ;------------------------------------------------------------
                           2386 ;------------------------------------------------------------
                    0548   2387 	G$vTaskEndScheduler$0$0 ==.
                    0548   2388 	C$tasks.c$1064$2$1 ==.
                           2389 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1064: void vTaskEndScheduler( void )
                           2390 ;	-----------------------------------------
                           2391 ;	 function vTaskEndScheduler
                           2392 ;	-----------------------------------------
   0548                    2393 _vTaskEndScheduler:
                    0548   2394 	C$tasks.c$1069$1$1 ==.
                           2395 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1069: portDISABLE_INTERRUPTS();
   0548 C2 AF              2396 	clr	_EA
                    054A   2397 	C$tasks.c$1070$1$1 ==.
                           2398 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1070: xSchedulerRunning = pdFALSE;
   054A 90s00r08           2399 	mov	dptr,#_xSchedulerRunning
   054D 74 00              2400 	mov	a,#0x00
   054F F0                 2401 	movx	@dptr,a
                    0550   2402 	C$tasks.c$1071$1$1 ==.
                           2403 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1071: vPortEndScheduler();
   0550 12s00r00           2404 	lcall	_vPortEndScheduler
   0553                    2405 00101$:
                    0553   2406 	C$tasks.c$1072$1$1 ==.
                    0553   2407 	XG$vTaskEndScheduler$0$0 ==.
   0553 22                 2408 	ret
                           2409 ;------------------------------------------------------------
                           2410 ;Allocation info for local variables in function 'vTaskSuspendAll'
                           2411 ;------------------------------------------------------------
                           2412 ;------------------------------------------------------------
                    0554   2413 	G$vTaskSuspendAll$0$0 ==.
                    0554   2414 	C$tasks.c$1075$1$1 ==.
                           2415 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1075: void vTaskSuspendAll( void )
                           2416 ;	-----------------------------------------
                           2417 ;	 function vTaskSuspendAll
                           2418 ;	-----------------------------------------
   0554                    2419 _vTaskSuspendAll:
                    0554   2420 	C$tasks.c$1077$1$1 ==.
                           2421 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1077: portENTER_CRITICAL();
   0554 C0 E0 C0 A8        2422 	 push ACC push IE 
   0558 C2 AF              2423 	clr	_EA
                    055A   2424 	C$tasks.c$1078$1$1 ==.
                           2425 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1078: ++uxSchedulerSuspended;
   055A 90s00r09           2426 	mov	dptr,#_uxSchedulerSuspended
   055D E0                 2427 	movx	a,@dptr
   055E 24 01              2428 	add	a,#0x01
   0560 F0                 2429 	movx	@dptr,a
                    0561   2430 	C$tasks.c$1079$1$1 ==.
                           2431 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1079: portEXIT_CRITICAL();
   0561 D0 E0              2432 	 pop ACC 
   0563 53 E0 80           2433 	anl	_ACC,#0x80
   0566 E5 E0              2434 	mov	a,_ACC
   0568 42 A8              2435 	orl	_IE,a
   056A D0 E0              2436 	 pop ACC 
   056C                    2437 00101$:
                    056C   2438 	C$tasks.c$1080$1$1 ==.
                    056C   2439 	XG$vTaskSuspendAll$0$0 ==.
   056C 22                 2440 	ret
                           2441 ;------------------------------------------------------------
                           2442 ;Allocation info for local variables in function 'xTaskResumeAll'
                           2443 ;------------------------------------------------------------
                           2444 ;pxTCB                     Allocated to registers r7 r3 r2 
                           2445 ;xAlreadyYielded           Allocated to stack - offset 1
                           2446 ;xYieldRequired            Allocated to stack - offset 2
                           2447 ;sloc0                     Allocated to stack - offset 3
                           2448 ;sloc1                     Allocated to stack - offset 4
                           2449 ;------------------------------------------------------------
                    056D   2450 	G$xTaskResumeAll$0$0 ==.
                    056D   2451 	C$tasks.c$1083$1$1 ==.
                           2452 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1083: signed portBASE_TYPE xTaskResumeAll( void )
                           2453 ;	-----------------------------------------
                           2454 ;	 function xTaskResumeAll
                           2455 ;	-----------------------------------------
   056D                    2456 _xTaskResumeAll:
   056D C0*00              2457 	push	_bp
   056F 85 81*00           2458 	mov	_bp,sp
   0572 E5 81              2459 	mov	a,sp
   0574 24 06              2460 	add	a,#0x06
   0576 F5 81              2461 	mov	sp,a
                    0578   2462 	C$tasks.c$1086$1$1 ==.
                           2463 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1086: signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   0578 A8*00              2464 	mov	r0,_bp
   057A 08                 2465 	inc	r0
   057B 76 00              2466 	mov	@r0,#0x00
                    057D   2467 	C$tasks.c$1093$1$1 ==.
                           2468 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1093: portENTER_CRITICAL();
   057D C0 E0 C0 A8        2469 	 push ACC push IE 
   0581 C2 AF              2470 	clr	_EA
                    0583   2471 	C$tasks.c$1095$2$2 ==.
                           2472 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1095: --uxSchedulerSuspended;
   0583 90s00r09           2473 	mov	dptr,#_uxSchedulerSuspended
   0586 E0                 2474 	movx	a,@dptr
   0587 14                 2475 	dec	a
   0588 90s00r09           2476 	mov	dptr,#_uxSchedulerSuspended
   058B F0                 2477 	movx	@dptr,a
                    058C   2478 	C$tasks.c$1097$2$2 ==.
                           2479 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1097: if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   058C 90s00r09           2480 	mov	dptr,#_uxSchedulerSuspended
   058F E0                 2481 	movx	a,@dptr
   0590 FB                 2482 	mov	r3,a
   0591 EB                 2483 	mov	a,r3
   0592 60 03              2484 	jz	00134$
   0594 02s07r66           2485 	ljmp	00119$
   0597                    2486 00134$:
                    0597   2487 	C$tasks.c$1099$3$3 ==.
                           2488 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1099: if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0 )
   0597 90s00r03           2489 	mov	dptr,#_uxCurrentNumberOfTasks
   059A E0                 2490 	movx	a,@dptr
   059B FB                 2491 	mov	r3,a
   059C EB                 2492 	mov	a,r3
   059D 70 03              2493 	jnz	00135$
   059F 02s07r66           2494 	ljmp	00119$
   05A2                    2495 00135$:
                    05A2   2496 	C$tasks.c$1101$4$3 ==.
                           2497 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1101: portBASE_TYPE xYieldRequired = pdFALSE;
   05A2 A8*00              2498 	mov	r0,_bp
   05A4 08                 2499 	inc	r0
   05A5 08                 2500 	inc	r0
   05A6 76 00              2501 	mov	@r0,#0x00
                    05A8   2502 	C$tasks.c$1105$4$4 ==.
                           2503 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1105: while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) ) ) != NULL )
   05A8                    2504 00105$:
   05A8 90s00r4E           2505 	mov	dptr,#_xPendingReadyList
   05AB E0                 2506 	movx	a,@dptr
   05AC 70 03              2507 	jnz	00136$
   05AE 02s05rE6           2508 	ljmp	00122$
   05B1                    2509 00136$:
   05B1 90s00r54           2510 	mov	dptr,#(_xPendingReadyList + 0x0006)
   05B4 75 F0 00           2511 	mov	b,#0x00
   05B7 12s00r00           2512 	lcall	__gptrget
   05BA FC                 2513 	mov	r4,a
   05BB A3                 2514 	inc	dptr
   05BC 12s00r00           2515 	lcall	__gptrget
   05BF FD                 2516 	mov	r5,a
   05C0 A3                 2517 	inc	dptr
   05C1 12s00r00           2518 	lcall	__gptrget
   05C4 FE                 2519 	mov	r6,a
   05C5 74 08              2520 	mov	a,#0x08
   05C7 25 04              2521 	add	a,ar4
   05C9 FC                 2522 	mov	r4,a
   05CA 74 00              2523 	mov	a,#0x00
   05CC 35 05              2524 	addc	a,ar5
   05CE FD                 2525 	mov	r5,a
   05CF 8C 82              2526 	mov	dpl,r4
   05D1 8D 83              2527 	mov	dph,r5
   05D3 8E F0              2528 	mov	b,r6
   05D5 12s00r00           2529 	lcall	__gptrget
   05D8 FC                 2530 	mov	r4,a
   05D9 A3                 2531 	inc	dptr
   05DA 12s00r00           2532 	lcall	__gptrget
   05DD FD                 2533 	mov	r5,a
   05DE A3                 2534 	inc	dptr
   05DF 12s00r00           2535 	lcall	__gptrget
   05E2 FE                 2536 	mov	r6,a
   05E3 02s05rEC           2537 	ljmp	00123$
   05E6                    2538 00122$:
   05E6 7C 00              2539 	mov	r4,#0x00
   05E8 7D 00              2540 	mov	r5,#0x00
   05EA 7E 00              2541 	mov	r6,#0x00
   05EC                    2542 00123$:
   05EC 8C 07              2543 	mov	ar7,r4
   05EE 8D 03              2544 	mov	ar3,r5
   05F0 8E 02              2545 	mov	ar2,r6
   05F2 BC 00 09           2546 	cjne	r4,#0x00,00137$
   05F5 BD 00 06           2547 	cjne	r5,#0x00,00137$
   05F8 BE 00 03           2548 	cjne	r6,#0x00,00137$
   05FB 02s07r16           2549 	ljmp	00107$
   05FE                    2550 00137$:
                    05FE   2551 	C$tasks.c$1107$5$5 ==.
                           2552 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1107: vListRemove( &( pxTCB->xEventListItem ) );
   05FE 74 11              2553 	mov	a,#0x11
   0600 25 07              2554 	add	a,ar7
   0602 FC                 2555 	mov	r4,a
   0603 74 00              2556 	mov	a,#0x00
   0605 35 03              2557 	addc	a,ar3
   0607 FD                 2558 	mov	r5,a
   0608 8A 06              2559 	mov	ar6,r2
   060A 8C 82              2560 	mov	dpl,r4
   060C 8D 83              2561 	mov	dph,r5
   060E 8E F0              2562 	mov	b,r6
   0610 C0 02              2563 	push	ar2
   0612 C0 03              2564 	push	ar3
   0614 C0 07              2565 	push	ar7
   0616 12s00r00           2566 	lcall	_vListRemove
   0619 D0 07              2567 	pop	ar7
   061B D0 03              2568 	pop	ar3
   061D D0 02              2569 	pop	ar2
                    061F   2570 	C$tasks.c$1108$5$5 ==.
                           2571 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1108: vListRemove( &( pxTCB->xGenericListItem ) );
   061F 74 03              2572 	mov	a,#0x03
   0621 25 07              2573 	add	a,ar7
   0623 FC                 2574 	mov	r4,a
   0624 74 00              2575 	mov	a,#0x00
   0626 35 03              2576 	addc	a,ar3
   0628 FD                 2577 	mov	r5,a
   0629 8A 06              2578 	mov	ar6,r2
   062B 8C 82              2579 	mov	dpl,r4
   062D 8D 83              2580 	mov	dph,r5
   062F 8E F0              2581 	mov	b,r6
   0631 C0 02              2582 	push	ar2
   0633 C0 03              2583 	push	ar3
   0635 C0 07              2584 	push	ar7
   0637 12s00r00           2585 	lcall	_vListRemove
   063A D0 07              2586 	pop	ar7
   063C D0 03              2587 	pop	ar3
   063E D0 02              2588 	pop	ar2
                    0640   2589 	C$tasks.c$1109$6$6 ==.
                           2590 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1109: prvAddTaskToReadyQueue( pxTCB );
   0640 74 1F              2591 	mov	a,#0x1F
   0642 25 07              2592 	add	a,ar7
   0644 FC                 2593 	mov	r4,a
   0645 74 00              2594 	mov	a,#0x00
   0647 35 03              2595 	addc	a,ar3
   0649 FD                 2596 	mov	r5,a
   064A 8A 06              2597 	mov	ar6,r2
   064C 8C 82              2598 	mov	dpl,r4
   064E 8D 83              2599 	mov	dph,r5
   0650 8E F0              2600 	mov	b,r6
   0652 A8*00              2601 	mov	r0,_bp
   0654 08                 2602 	inc	r0
   0655 08                 2603 	inc	r0
   0656 08                 2604 	inc	r0
   0657 12s00r00           2605 	lcall	__gptrget
   065A F6                 2606 	mov	@r0,a
   065B C0 07              2607 	push	ar7
   065D C0 03              2608 	push	ar3
   065F C0 02              2609 	push	ar2
   0661 90s00r07           2610 	mov	dptr,#_uxTopReadyPriority
   0664 E0                 2611 	movx	a,@dptr
   0665 FA                 2612 	mov	r2,a
   0666 A8*00              2613 	mov	r0,_bp
   0668 08                 2614 	inc	r0
   0669 08                 2615 	inc	r0
   066A 08                 2616 	inc	r0
   066B C3                 2617 	clr	c
   066C EA                 2618 	mov	a,r2
   066D 96                 2619 	subb	a,@r0
   066E E4                 2620 	clr	a
   066F 33                 2621 	rlc	a
   0670 D0 02              2622 	pop	ar2
   0672 D0 03              2623 	pop	ar3
   0674 D0 07              2624 	pop	ar7
   0676 70 03              2625 	jnz	00138$
   0678 02s06r85           2626 	ljmp	00102$
   067B                    2627 00138$:
   067B A8*00              2628 	mov	r0,_bp
   067D 08                 2629 	inc	r0
   067E 08                 2630 	inc	r0
   067F 08                 2631 	inc	r0
   0680 90s00r07           2632 	mov	dptr,#_uxTopReadyPriority
   0683 E6                 2633 	mov	a,@r0
   0684 F0                 2634 	movx	@dptr,a
   0685                    2635 00102$:
   0685 E5*00              2636 	mov	a,_bp
   0687 24 04              2637 	add	a,#0x04
   0689 F8                 2638 	mov	r0,a
   068A 74 03              2639 	mov	a,#0x03
   068C 25 07              2640 	add	a,ar7
   068E F6                 2641 	mov	@r0,a
   068F 74 00              2642 	mov	a,#0x00
   0691 35 03              2643 	addc	a,ar3
   0693 08                 2644 	inc	r0
   0694 F6                 2645 	mov	@r0,a
   0695 08                 2646 	inc	r0
   0696 A6 02              2647 	mov	@r0,ar2
   0698 8C 82              2648 	mov	dpl,r4
   069A 8D 83              2649 	mov	dph,r5
   069C 8E F0              2650 	mov	b,r6
   069E 12s00r00           2651 	lcall	__gptrget
   06A1 FA                 2652 	mov	r2,a
   06A2 EA                 2653 	mov	a,r2
   06A3 75 F0 0C           2654 	mov	b,#0x0C
   06A6 A4                 2655 	mul	ab
   06A7 24r00              2656 	add	a,#_pxReadyTasksLists
   06A9 FA                 2657 	mov	r2,a
   06AA 74s00              2658 	mov	a,#(_pxReadyTasksLists >> 8)
   06AC 34 00              2659 	addc	a,#0x00
   06AE FB                 2660 	mov	r3,a
   06AF 7F 00              2661 	mov	r7,#0x00
   06B1 C0 04              2662 	push	ar4
   06B3 C0 05              2663 	push	ar5
   06B5 C0 06              2664 	push	ar6
   06B7 E5*00              2665 	mov	a,_bp
   06B9 24 04              2666 	add	a,#0x04
   06BB F8                 2667 	mov	r0,a
   06BC E6                 2668 	mov	a,@r0
   06BD C0 E0              2669 	push	acc
   06BF 08                 2670 	inc	r0
   06C0 E6                 2671 	mov	a,@r0
   06C1 C0 E0              2672 	push	acc
   06C3 08                 2673 	inc	r0
   06C4 E6                 2674 	mov	a,@r0
   06C5 C0 E0              2675 	push	acc
   06C7 8A 82              2676 	mov	dpl,r2
   06C9 8B 83              2677 	mov	dph,r3
   06CB 8F F0              2678 	mov	b,r7
   06CD 12s00r00           2679 	lcall	_vListInsertEnd
   06D0 15 81              2680 	dec	sp
   06D2 15 81              2681 	dec	sp
   06D4 15 81              2682 	dec	sp
   06D6 D0 06              2683 	pop	ar6
   06D8 D0 05              2684 	pop	ar5
   06DA D0 04              2685 	pop	ar4
                    06DC   2686 	C$tasks.c$1113$5$5 ==.
                           2687 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1113: if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   06DC 8C 82              2688 	mov	dpl,r4
   06DE 8D 83              2689 	mov	dph,r5
   06E0 8E F0              2690 	mov	b,r6
   06E2 12s00r00           2691 	lcall	__gptrget
   06E5 FC                 2692 	mov	r4,a
   06E6 90s00r00           2693 	mov	dptr,#_pxCurrentTCB
   06E9 E0                 2694 	movx	a,@dptr
   06EA FA                 2695 	mov	r2,a
   06EB A3                 2696 	inc	dptr
   06EC E0                 2697 	movx	a,@dptr
   06ED FB                 2698 	mov	r3,a
   06EE A3                 2699 	inc	dptr
   06EF E0                 2700 	movx	a,@dptr
   06F0 FD                 2701 	mov	r5,a
   06F1 74 1F              2702 	mov	a,#0x1F
   06F3 25 02              2703 	add	a,ar2
   06F5 FA                 2704 	mov	r2,a
   06F6 74 00              2705 	mov	a,#0x00
   06F8 35 03              2706 	addc	a,ar3
   06FA FB                 2707 	mov	r3,a
   06FB 8A 82              2708 	mov	dpl,r2
   06FD 8B 83              2709 	mov	dph,r3
   06FF 8D F0              2710 	mov	b,r5
   0701 12s00r00           2711 	lcall	__gptrget
   0704 FA                 2712 	mov	r2,a
   0705 C3                 2713 	clr	c
   0706 EC                 2714 	mov	a,r4
   0707 9A                 2715 	subb	a,r2
   0708 50 03              2716 	jnc	00139$
   070A 02s05rA8           2717 	ljmp	00105$
   070D                    2718 00139$:
                    070D   2719 	C$tasks.c$1115$6$8 ==.
                           2720 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1115: xYieldRequired = pdTRUE;
   070D A8*00              2721 	mov	r0,_bp
   070F 08                 2722 	inc	r0
   0710 08                 2723 	inc	r0
   0711 76 01              2724 	mov	@r0,#0x01
   0713 02s05rA8           2725 	ljmp	00105$
   0716                    2726 00107$:
                    0716   2727 	C$tasks.c$1122$4$4 ==.
                           2728 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1122: if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
   0716 90s00r0A           2729 	mov	dptr,#_uxMissedTicks
   0719 E0                 2730 	movx	a,@dptr
   071A FA                 2731 	mov	r2,a
   071B EA                 2732 	mov	a,r2
   071C 70 03              2733 	jnz	00140$
   071E 02s07r41           2734 	ljmp	00112$
   0721                    2735 00140$:
                    0721   2736 	C$tasks.c$1124$5$9 ==.
                           2737 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1124: while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
   0721                    2738 00108$:
   0721 90s00r0A           2739 	mov	dptr,#_uxMissedTicks
   0724 E0                 2740 	movx	a,@dptr
   0725 FA                 2741 	mov	r2,a
   0726 EA                 2742 	mov	a,r2
   0727 70 03              2743 	jnz	00141$
   0729 02s07r3B           2744 	ljmp	00110$
   072C                    2745 00141$:
                    072C   2746 	C$tasks.c$1126$6$10 ==.
                           2747 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1126: vTaskIncrementTick();
   072C 12s07rB3           2748 	lcall	_vTaskIncrementTick
                    072F   2749 	C$tasks.c$1127$6$10 ==.
                           2750 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1127: --uxMissedTicks;
   072F 90s00r0A           2751 	mov	dptr,#_uxMissedTicks
   0732 E0                 2752 	movx	a,@dptr
   0733 14                 2753 	dec	a
   0734 90s00r0A           2754 	mov	dptr,#_uxMissedTicks
   0737 F0                 2755 	movx	@dptr,a
   0738 02s07r21           2756 	ljmp	00108$
   073B                    2757 00110$:
                    073B   2758 	C$tasks.c$1135$6$11 ==.
                           2759 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1135: xYieldRequired = pdTRUE;
   073B A8*00              2760 	mov	r0,_bp
   073D 08                 2761 	inc	r0
   073E 08                 2762 	inc	r0
   073F 76 01              2763 	mov	@r0,#0x01
   0741                    2764 00112$:
                    0741   2765 	C$tasks.c$1140$4$4 ==.
                           2766 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1140: if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   0741 A8*00              2767 	mov	r0,_bp
   0743 08                 2768 	inc	r0
   0744 08                 2769 	inc	r0
   0745 B6 01 03           2770 	cjne	@r0,#0x01,00142$
   0748 02s07r58           2771 	ljmp	00113$
   074B                    2772 00142$:
   074B 90s00r0B           2773 	mov	dptr,#_xMissedYield
   074E E0                 2774 	movx	a,@dptr
   074F FA                 2775 	mov	r2,a
   0750 BA 01 02           2776 	cjne	r2,#0x01,00143$
   0753 80 03              2777 	sjmp	00144$
   0755                    2778 00143$:
   0755 02s07r66           2779 	ljmp	00119$
   0758                    2780 00144$:
   0758                    2781 00113$:
                    0758   2782 	C$tasks.c$1142$5$12 ==.
                           2783 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1142: xAlreadyYielded = pdTRUE;
   0758 A8*00              2784 	mov	r0,_bp
   075A 08                 2785 	inc	r0
   075B 76 01              2786 	mov	@r0,#0x01
                    075D   2787 	C$tasks.c$1143$5$12 ==.
                           2788 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1143: xMissedYield = pdFALSE;
   075D 90s00r0B           2789 	mov	dptr,#_xMissedYield
   0760 74 00              2790 	mov	a,#0x00
   0762 F0                 2791 	movx	@dptr,a
                    0763   2792 	C$tasks.c$1144$5$12 ==.
                           2793 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1144: taskYIELD();
   0763 12s00r00           2794 	lcall	_vPortYield
   0766                    2795 00119$:
                    0766   2796 	C$tasks.c$1149$1$1 ==.
                           2797 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1149: portEXIT_CRITICAL();
   0766 D0 E0              2798 	 pop ACC 
   0768 53 E0 80           2799 	anl	_ACC,#0x80
   076B E5 E0              2800 	mov	a,_ACC
   076D 42 A8              2801 	orl	_IE,a
   076F D0 E0              2802 	 pop ACC 
                    0771   2803 	C$tasks.c$1151$1$1 ==.
                           2804 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1151: return xAlreadyYielded;
   0771 A8*00              2805 	mov	r0,_bp
   0773 08                 2806 	inc	r0
   0774 86 82              2807 	mov	dpl,@r0
   0776                    2808 00120$:
   0776 85*00 81           2809 	mov	sp,_bp
   0779 D0*00              2810 	pop	_bp
                    077B   2811 	C$tasks.c$1152$1$1 ==.
                    077B   2812 	XG$xTaskResumeAll$0$0 ==.
   077B 22                 2813 	ret
                           2814 ;------------------------------------------------------------
                           2815 ;Allocation info for local variables in function 'xTaskGetTickCount'
                           2816 ;------------------------------------------------------------
                           2817 ;xTicks                    Allocated to registers r2 r3 
                           2818 ;------------------------------------------------------------
                    077C   2819 	G$xTaskGetTickCount$0$0 ==.
                    077C   2820 	C$tasks.c$1165$1$1 ==.
                           2821 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1165: portTickType xTaskGetTickCount( void )
                           2822 ;	-----------------------------------------
                           2823 ;	 function xTaskGetTickCount
                           2824 ;	-----------------------------------------
   077C                    2825 _xTaskGetTickCount:
                    077C   2826 	C$tasks.c$1170$1$1 ==.
                           2827 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1170: taskENTER_CRITICAL();
   077C C0 E0 C0 A8        2828 	 push ACC push IE 
   0780 C2 AF              2829 	clr	_EA
                    0782   2830 	C$tasks.c$1172$2$2 ==.
                           2831 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1172: xTicks = xTickCount;
   0782 90s00r04           2832 	mov	dptr,#_xTickCount
   0785 E0                 2833 	movx	a,@dptr
   0786 FA                 2834 	mov	r2,a
   0787 A3                 2835 	inc	dptr
   0788 E0                 2836 	movx	a,@dptr
   0789 FB                 2837 	mov	r3,a
                    078A   2838 	C$tasks.c$1174$1$1 ==.
                           2839 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1174: taskEXIT_CRITICAL();
   078A D0 E0              2840 	 pop ACC 
   078C 53 E0 80           2841 	anl	_ACC,#0x80
   078F E5 E0              2842 	mov	a,_ACC
   0791 42 A8              2843 	orl	_IE,a
   0793 D0 E0              2844 	 pop ACC 
                    0795   2845 	C$tasks.c$1176$1$1 ==.
                           2846 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1176: return xTicks;
   0795 8A 82              2847 	mov	dpl,r2
   0797 8B 83              2848 	mov	dph,r3
   0799                    2849 00101$:
                    0799   2850 	C$tasks.c$1177$1$1 ==.
                    0799   2851 	XG$xTaskGetTickCount$0$0 ==.
   0799 22                 2852 	ret
                           2853 ;------------------------------------------------------------
                           2854 ;Allocation info for local variables in function 'uxTaskGetNumberOfTasks'
                           2855 ;------------------------------------------------------------
                           2856 ;uxNumberOfTasks           Allocated to registers r2 
                           2857 ;------------------------------------------------------------
                    079A   2858 	G$uxTaskGetNumberOfTasks$0$0 ==.
                    079A   2859 	C$tasks.c$1180$1$1 ==.
                           2860 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1180: unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
                           2861 ;	-----------------------------------------
                           2862 ;	 function uxTaskGetNumberOfTasks
                           2863 ;	-----------------------------------------
   079A                    2864 _uxTaskGetNumberOfTasks:
                    079A   2865 	C$tasks.c$1184$1$1 ==.
                           2866 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1184: taskENTER_CRITICAL();
   079A C0 E0 C0 A8        2867 	 push ACC push IE 
   079E C2 AF              2868 	clr	_EA
                    07A0   2869 	C$tasks.c$1185$1$1 ==.
                           2870 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1185: uxNumberOfTasks = uxCurrentNumberOfTasks;
   07A0 90s00r03           2871 	mov	dptr,#_uxCurrentNumberOfTasks
   07A3 E0                 2872 	movx	a,@dptr
   07A4 FA                 2873 	mov	r2,a
                    07A5   2874 	C$tasks.c$1186$1$1 ==.
                           2875 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1186: taskEXIT_CRITICAL();
   07A5 D0 E0              2876 	 pop ACC 
   07A7 53 E0 80           2877 	anl	_ACC,#0x80
   07AA E5 E0              2878 	mov	a,_ACC
   07AC 42 A8              2879 	orl	_IE,a
   07AE D0 E0              2880 	 pop ACC 
                    07B0   2881 	C$tasks.c$1188$1$1 ==.
                           2882 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1188: return uxNumberOfTasks;
   07B0 8A 82              2883 	mov	dpl,r2
   07B2                    2884 00101$:
                    07B2   2885 	C$tasks.c$1189$1$1 ==.
                    07B2   2886 	XG$uxTaskGetNumberOfTasks$0$0 ==.
   07B2 22                 2887 	ret
                           2888 ;------------------------------------------------------------
                           2889 ;Allocation info for local variables in function 'vTaskIncrementTick'
                           2890 ;------------------------------------------------------------
                           2891 ;pxTemp                    Allocated to registers r2 r3 r4 
                           2892 ;pxTCB                     Allocated to registers r5 r6 r7 
                           2893 ;sloc0                     Allocated to stack - offset 1
                           2894 ;------------------------------------------------------------
                    07B3   2895 	G$vTaskIncrementTick$0$0 ==.
                    07B3   2896 	C$tasks.c$1289$1$1 ==.
                           2897 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1289: void vTaskIncrementTick( void )
                           2898 ;	-----------------------------------------
                           2899 ;	 function vTaskIncrementTick
                           2900 ;	-----------------------------------------
   07B3                    2901 _vTaskIncrementTick:
   07B3 C0*00              2902 	push	_bp
   07B5 85 81*00           2903 	mov	_bp,sp
   07B8 05 81              2904 	inc	sp
                    07BA   2905 	C$tasks.c$1294$1$1 ==.
                           2906 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1294: if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   07BA 90s00r09           2907 	mov	dptr,#_uxSchedulerSuspended
   07BD E0                 2908 	movx	a,@dptr
   07BE FA                 2909 	mov	r2,a
   07BF EA                 2910 	mov	a,r2
   07C0 60 03              2911 	jz	00127$
   07C2 02s09rC3           2912 	ljmp	00113$
   07C5                    2913 00127$:
                    07C5   2914 	C$tasks.c$1296$2$2 ==.
                           2915 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1296: ++xTickCount;
   07C5 90s00r04           2916 	mov	dptr,#_xTickCount
   07C8 E0                 2917 	movx	a,@dptr
   07C9 24 01              2918 	add	a,#0x01
   07CB F0                 2919 	movx	@dptr,a
   07CC A3                 2920 	inc	dptr
   07CD E0                 2921 	movx	a,@dptr
   07CE 34 00              2922 	addc	a,#0x00
   07D0 F0                 2923 	movx	@dptr,a
                    07D1   2924 	C$tasks.c$1297$2$2 ==.
                           2925 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1297: if( xTickCount == ( portTickType ) 0 )
   07D1 90s00r04           2926 	mov	dptr,#_xTickCount
   07D4 E0                 2927 	movx	a,@dptr
   07D5 FA                 2928 	mov	r2,a
   07D6 A3                 2929 	inc	dptr
   07D7 E0                 2930 	movx	a,@dptr
   07D8 FB                 2931 	mov	r3,a
   07D9 EA                 2932 	mov	a,r2
   07DA 4B                 2933 	orl	a,r3
   07DB 60 03              2934 	jz	00128$
   07DD 02s08r13           2935 	ljmp	00109$
   07E0                    2936 00128$:
                    07E0   2937 	C$tasks.c$1304$3$3 ==.
                           2938 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1304: pxTemp = pxDelayedTaskList;
   07E0 90s00r48           2939 	mov	dptr,#_pxDelayedTaskList
   07E3 E0                 2940 	movx	a,@dptr
   07E4 FA                 2941 	mov	r2,a
   07E5 A3                 2942 	inc	dptr
   07E6 E0                 2943 	movx	a,@dptr
   07E7 FB                 2944 	mov	r3,a
   07E8 A3                 2945 	inc	dptr
   07E9 E0                 2946 	movx	a,@dptr
   07EA FC                 2947 	mov	r4,a
                    07EB   2948 	C$tasks.c$1305$3$3 ==.
                           2949 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1305: pxDelayedTaskList = pxOverflowDelayedTaskList;
   07EB 90s00r4B           2950 	mov	dptr,#_pxOverflowDelayedTaskList
   07EE E0                 2951 	movx	a,@dptr
   07EF FD                 2952 	mov	r5,a
   07F0 A3                 2953 	inc	dptr
   07F1 E0                 2954 	movx	a,@dptr
   07F2 FE                 2955 	mov	r6,a
   07F3 A3                 2956 	inc	dptr
   07F4 E0                 2957 	movx	a,@dptr
   07F5 FF                 2958 	mov	r7,a
   07F6 90s00r48           2959 	mov	dptr,#_pxDelayedTaskList
   07F9 ED                 2960 	mov	a,r5
   07FA F0                 2961 	movx	@dptr,a
   07FB A3                 2962 	inc	dptr
   07FC EE                 2963 	mov	a,r6
   07FD F0                 2964 	movx	@dptr,a
   07FE A3                 2965 	inc	dptr
   07FF EF                 2966 	mov	a,r7
   0800 F0                 2967 	movx	@dptr,a
                    0801   2968 	C$tasks.c$1306$3$3 ==.
                           2969 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1306: pxOverflowDelayedTaskList = pxTemp;
   0801 90s00r4B           2970 	mov	dptr,#_pxOverflowDelayedTaskList
   0804 EA                 2971 	mov	a,r2
   0805 F0                 2972 	movx	@dptr,a
   0806 A3                 2973 	inc	dptr
   0807 EB                 2974 	mov	a,r3
   0808 F0                 2975 	movx	@dptr,a
   0809 A3                 2976 	inc	dptr
   080A EC                 2977 	mov	a,r4
   080B F0                 2978 	movx	@dptr,a
                    080C   2979 	C$tasks.c$1307$3$3 ==.
                           2980 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1307: xNumOfOverflows++;
   080C 90s00r0C           2981 	mov	dptr,#_xNumOfOverflows
   080F E0                 2982 	movx	a,@dptr
   0810 24 01              2983 	add	a,#0x01
   0812 F0                 2984 	movx	@dptr,a
                    0813   2985 	C$tasks.c$1311$3$4 ==.
                           2986 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1311: prvCheckDelayedTasks();
   0813                    2987 00109$:
   0813 90s00r48           2988 	mov	dptr,#_pxDelayedTaskList
   0816 E0                 2989 	movx	a,@dptr
   0817 FA                 2990 	mov	r2,a
   0818 A3                 2991 	inc	dptr
   0819 E0                 2992 	movx	a,@dptr
   081A FB                 2993 	mov	r3,a
   081B A3                 2994 	inc	dptr
   081C E0                 2995 	movx	a,@dptr
   081D FC                 2996 	mov	r4,a
   081E 8A 82              2997 	mov	dpl,r2
   0820 8B 83              2998 	mov	dph,r3
   0822 8C F0              2999 	mov	b,r4
   0824 12s00r00           3000 	lcall	__gptrget
   0827 70 03              3001 	jnz	00129$
   0829 02s08r80           3002 	ljmp	00117$
   082C                    3003 00129$:
   082C 90s00r48           3004 	mov	dptr,#_pxDelayedTaskList
   082F E0                 3005 	movx	a,@dptr
   0830 FA                 3006 	mov	r2,a
   0831 A3                 3007 	inc	dptr
   0832 E0                 3008 	movx	a,@dptr
   0833 FB                 3009 	mov	r3,a
   0834 A3                 3010 	inc	dptr
   0835 E0                 3011 	movx	a,@dptr
   0836 FC                 3012 	mov	r4,a
   0837 74 04              3013 	mov	a,#0x04
   0839 25 02              3014 	add	a,ar2
   083B FA                 3015 	mov	r2,a
   083C 74 00              3016 	mov	a,#0x00
   083E 35 03              3017 	addc	a,ar3
   0840 FB                 3018 	mov	r3,a
   0841 74 02              3019 	mov	a,#0x02
   0843 25 02              3020 	add	a,ar2
   0845 FA                 3021 	mov	r2,a
   0846 74 00              3022 	mov	a,#0x00
   0848 35 03              3023 	addc	a,ar3
   084A FB                 3024 	mov	r3,a
   084B 8A 82              3025 	mov	dpl,r2
   084D 8B 83              3026 	mov	dph,r3
   084F 8C F0              3027 	mov	b,r4
   0851 12s00r00           3028 	lcall	__gptrget
   0854 FA                 3029 	mov	r2,a
   0855 A3                 3030 	inc	dptr
   0856 12s00r00           3031 	lcall	__gptrget
   0859 FB                 3032 	mov	r3,a
   085A A3                 3033 	inc	dptr
   085B 12s00r00           3034 	lcall	__gptrget
   085E FC                 3035 	mov	r4,a
   085F 74 08              3036 	mov	a,#0x08
   0861 25 02              3037 	add	a,ar2
   0863 FA                 3038 	mov	r2,a
   0864 74 00              3039 	mov	a,#0x00
   0866 35 03              3040 	addc	a,ar3
   0868 FB                 3041 	mov	r3,a
   0869 8A 82              3042 	mov	dpl,r2
   086B 8B 83              3043 	mov	dph,r3
   086D 8C F0              3044 	mov	b,r4
   086F 12s00r00           3045 	lcall	__gptrget
   0872 FA                 3046 	mov	r2,a
   0873 A3                 3047 	inc	dptr
   0874 12s00r00           3048 	lcall	__gptrget
   0877 FB                 3049 	mov	r3,a
   0878 A3                 3050 	inc	dptr
   0879 12s00r00           3051 	lcall	__gptrget
   087C FC                 3052 	mov	r4,a
   087D 02s08r86           3053 	ljmp	00118$
   0880                    3054 00117$:
   0880 7A 00              3055 	mov	r2,#0x00
   0882 7B 00              3056 	mov	r3,#0x00
   0884 7C 00              3057 	mov	r4,#0x00
   0886                    3058 00118$:
   0886 8A 05              3059 	mov	ar5,r2
   0888 8B 06              3060 	mov	ar6,r3
   088A 8C 07              3061 	mov	ar7,r4
   088C BA 00 09           3062 	cjne	r2,#0x00,00130$
   088F BB 00 06           3063 	cjne	r3,#0x00,00130$
   0892 BC 00 03           3064 	cjne	r4,#0x00,00130$
   0895 02s09rCA           3065 	ljmp	00115$
   0898                    3066 00130$:
   0898 74 03              3067 	mov	a,#0x03
   089A 25 05              3068 	add	a,ar5
   089C FA                 3069 	mov	r2,a
   089D 74 00              3070 	mov	a,#0x00
   089F 35 06              3071 	addc	a,ar6
   08A1 FB                 3072 	mov	r3,a
   08A2 8F 04              3073 	mov	ar4,r7
   08A4 8A 82              3074 	mov	dpl,r2
   08A6 8B 83              3075 	mov	dph,r3
   08A8 8C F0              3076 	mov	b,r4
   08AA 12s00r00           3077 	lcall	__gptrget
   08AD FA                 3078 	mov	r2,a
   08AE A3                 3079 	inc	dptr
   08AF 12s00r00           3080 	lcall	__gptrget
   08B2 FB                 3081 	mov	r3,a
   08B3 C0 05              3082 	push	ar5
   08B5 C0 06              3083 	push	ar6
   08B7 C0 07              3084 	push	ar7
   08B9 90s00r04           3085 	mov	dptr,#_xTickCount
   08BC E0                 3086 	movx	a,@dptr
   08BD FC                 3087 	mov	r4,a
   08BE A3                 3088 	inc	dptr
   08BF E0                 3089 	movx	a,@dptr
   08C0 FD                 3090 	mov	r5,a
   08C1 C3                 3091 	clr	c
   08C2 EC                 3092 	mov	a,r4
   08C3 9A                 3093 	subb	a,r2
   08C4 ED                 3094 	mov	a,r5
   08C5 9B                 3095 	subb	a,r3
   08C6 E4                 3096 	clr	a
   08C7 33                 3097 	rlc	a
   08C8 D0 07              3098 	pop	ar7
   08CA D0 06              3099 	pop	ar6
   08CC D0 05              3100 	pop	ar5
   08CE 60 03              3101 	jz	00131$
   08D0 02s09rCA           3102 	ljmp	00115$
   08D3                    3103 00131$:
   08D3 74 03              3104 	mov	a,#0x03
   08D5 25 05              3105 	add	a,ar5
   08D7 FA                 3106 	mov	r2,a
   08D8 74 00              3107 	mov	a,#0x00
   08DA 35 06              3108 	addc	a,ar6
   08DC FB                 3109 	mov	r3,a
   08DD 8F 04              3110 	mov	ar4,r7
   08DF 8A 82              3111 	mov	dpl,r2
   08E1 8B 83              3112 	mov	dph,r3
   08E3 8C F0              3113 	mov	b,r4
   08E5 C0 05              3114 	push	ar5
   08E7 C0 06              3115 	push	ar6
   08E9 C0 07              3116 	push	ar7
   08EB 12s00r00           3117 	lcall	_vListRemove
   08EE D0 07              3118 	pop	ar7
   08F0 D0 06              3119 	pop	ar6
   08F2 D0 05              3120 	pop	ar5
   08F4 74 11              3121 	mov	a,#0x11
   08F6 25 05              3122 	add	a,ar5
   08F8 FA                 3123 	mov	r2,a
   08F9 74 00              3124 	mov	a,#0x00
   08FB 35 06              3125 	addc	a,ar6
   08FD FB                 3126 	mov	r3,a
   08FE 8F 04              3127 	mov	ar4,r7
   0900 C0 05              3128 	push	ar5
   0902 C0 06              3129 	push	ar6
   0904 C0 07              3130 	push	ar7
   0906 74 0B              3131 	mov	a,#0x0B
   0908 25 02              3132 	add	a,ar2
   090A FD                 3133 	mov	r5,a
   090B 74 00              3134 	mov	a,#0x00
   090D 35 03              3135 	addc	a,ar3
   090F FE                 3136 	mov	r6,a
   0910 8C 07              3137 	mov	ar7,r4
   0912 8D 82              3138 	mov	dpl,r5
   0914 8E 83              3139 	mov	dph,r6
   0916 8F F0              3140 	mov	b,r7
   0918 12s00r00           3141 	lcall	__gptrget
   091B FD                 3142 	mov	r5,a
   091C A3                 3143 	inc	dptr
   091D 12s00r00           3144 	lcall	__gptrget
   0920 FE                 3145 	mov	r6,a
   0921 A3                 3146 	inc	dptr
   0922 12s00r00           3147 	lcall	__gptrget
   0925 FF                 3148 	mov	r7,a
   0926 ED                 3149 	mov	a,r5
   0927 4E                 3150 	orl	a,r6
   0928 4F                 3151 	orl	a,r7
   0929 D0 07              3152 	pop	ar7
   092B D0 06              3153 	pop	ar6
   092D D0 05              3154 	pop	ar5
   092F 70 03              3155 	jnz	00132$
   0931 02s09r49           3156 	ljmp	00106$
   0934                    3157 00132$:
   0934 8A 82              3158 	mov	dpl,r2
   0936 8B 83              3159 	mov	dph,r3
   0938 8C F0              3160 	mov	b,r4
   093A C0 05              3161 	push	ar5
   093C C0 06              3162 	push	ar6
   093E C0 07              3163 	push	ar7
   0940 12s00r00           3164 	lcall	_vListRemove
   0943 D0 07              3165 	pop	ar7
   0945 D0 06              3166 	pop	ar6
   0947 D0 05              3167 	pop	ar5
   0949                    3168 00106$:
   0949 74 1F              3169 	mov	a,#0x1F
   094B 25 05              3170 	add	a,ar5
   094D FA                 3171 	mov	r2,a
   094E 74 00              3172 	mov	a,#0x00
   0950 35 06              3173 	addc	a,ar6
   0952 FB                 3174 	mov	r3,a
   0953 8F 04              3175 	mov	ar4,r7
   0955 8A 82              3176 	mov	dpl,r2
   0957 8B 83              3177 	mov	dph,r3
   0959 8C F0              3178 	mov	b,r4
   095B A8*00              3179 	mov	r0,_bp
   095D 08                 3180 	inc	r0
   095E 12s00r00           3181 	lcall	__gptrget
   0961 F6                 3182 	mov	@r0,a
   0962 C0 05              3183 	push	ar5
   0964 C0 06              3184 	push	ar6
   0966 C0 07              3185 	push	ar7
   0968 90s00r07           3186 	mov	dptr,#_uxTopReadyPriority
   096B E0                 3187 	movx	a,@dptr
   096C FD                 3188 	mov	r5,a
   096D A8*00              3189 	mov	r0,_bp
   096F 08                 3190 	inc	r0
   0970 C3                 3191 	clr	c
   0971 ED                 3192 	mov	a,r5
   0972 96                 3193 	subb	a,@r0
   0973 E4                 3194 	clr	a
   0974 33                 3195 	rlc	a
   0975 D0 07              3196 	pop	ar7
   0977 D0 06              3197 	pop	ar6
   0979 D0 05              3198 	pop	ar5
   097B 70 03              3199 	jnz	00133$
   097D 02s09r88           3200 	ljmp	00108$
   0980                    3201 00133$:
   0980 A8*00              3202 	mov	r0,_bp
   0982 08                 3203 	inc	r0
   0983 90s00r07           3204 	mov	dptr,#_uxTopReadyPriority
   0986 E6                 3205 	mov	a,@r0
   0987 F0                 3206 	movx	@dptr,a
   0988                    3207 00108$:
   0988 74 03              3208 	mov	a,#0x03
   098A 25 05              3209 	add	a,ar5
   098C FD                 3210 	mov	r5,a
   098D 74 00              3211 	mov	a,#0x00
   098F 35 06              3212 	addc	a,ar6
   0991 FE                 3213 	mov	r6,a
   0992 8A 82              3214 	mov	dpl,r2
   0994 8B 83              3215 	mov	dph,r3
   0996 8C F0              3216 	mov	b,r4
   0998 12s00r00           3217 	lcall	__gptrget
   099B FA                 3218 	mov	r2,a
   099C EA                 3219 	mov	a,r2
   099D 75 F0 0C           3220 	mov	b,#0x0C
   09A0 A4                 3221 	mul	ab
   09A1 24r00              3222 	add	a,#_pxReadyTasksLists
   09A3 FA                 3223 	mov	r2,a
   09A4 74s00              3224 	mov	a,#(_pxReadyTasksLists >> 8)
   09A6 34 00              3225 	addc	a,#0x00
   09A8 FB                 3226 	mov	r3,a
   09A9 7C 00              3227 	mov	r4,#0x00
   09AB C0 05              3228 	push	ar5
   09AD C0 06              3229 	push	ar6
   09AF C0 07              3230 	push	ar7
   09B1 8A 82              3231 	mov	dpl,r2
   09B3 8B 83              3232 	mov	dph,r3
   09B5 8C F0              3233 	mov	b,r4
   09B7 12s00r00           3234 	lcall	_vListInsertEnd
   09BA 15 81              3235 	dec	sp
   09BC 15 81              3236 	dec	sp
   09BE 15 81              3237 	dec	sp
   09C0 02s08r13           3238 	ljmp	00109$
   09C3                    3239 00113$:
                    09C3   3240 	C$tasks.c$1315$2$10 ==.
                           3241 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1315: ++uxMissedTicks;
   09C3 90s00r0A           3242 	mov	dptr,#_uxMissedTicks
   09C6 E0                 3243 	movx	a,@dptr
   09C7 24 01              3244 	add	a,#0x01
   09C9 F0                 3245 	movx	@dptr,a
   09CA                    3246 00115$:
   09CA 85*00 81           3247 	mov	sp,_bp
   09CD D0*00              3248 	pop	_bp
                    09CF   3249 	C$tasks.c$1342$1$1 ==.
                    09CF   3250 	XG$vTaskIncrementTick$0$0 ==.
   09CF 22                 3251 	ret
                           3252 ;------------------------------------------------------------
                           3253 ;Allocation info for local variables in function 'vTaskSwitchContext'
                           3254 ;------------------------------------------------------------
                           3255 ;pxConstList               Allocated to stack - offset 1
                           3256 ;sloc0                     Allocated to stack - offset 4
                           3257 ;------------------------------------------------------------
                    09D0   3258 	G$vTaskSwitchContext$0$0 ==.
                    09D0   3259 	C$tasks.c$1455$1$1 ==.
                           3260 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1455: void vTaskSwitchContext( void )
                           3261 ;	-----------------------------------------
                           3262 ;	 function vTaskSwitchContext
                           3263 ;	-----------------------------------------
   09D0                    3264 _vTaskSwitchContext:
   09D0 C0*00              3265 	push	_bp
   09D2 85 81*00           3266 	mov	_bp,sp
   09D5 E5 81              3267 	mov	a,sp
   09D7 24 06              3268 	add	a,#0x06
   09D9 F5 81              3269 	mov	sp,a
                    09DB   3270 	C$tasks.c$1459$1$1 ==.
                           3271 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1459: if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   09DB 90s00r09           3272 	mov	dptr,#_uxSchedulerSuspended
   09DE E0                 3273 	movx	a,@dptr
   09DF FA                 3274 	mov	r2,a
   09E0 EA                 3275 	mov	a,r2
   09E1 70 03              3276 	jnz	00114$
   09E3 02s09rEF           3277 	ljmp	00112$
   09E6                    3278 00114$:
                    09E6   3279 	C$tasks.c$1463$2$2 ==.
                           3280 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1463: xMissedYield = pdTRUE;
   09E6 90s00r0B           3281 	mov	dptr,#_xMissedYield
   09E9 74 01              3282 	mov	a,#0x01
   09EB F0                 3283 	movx	@dptr,a
                    09EC   3284 	C$tasks.c$1464$2$2 ==.
                           3285 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1464: return;
   09EC 02s0Br4E           3286 	ljmp	00108$
                    09EF   3287 	C$tasks.c$1470$2$4 ==.
                           3288 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1470: while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
   09EF                    3289 00112$:
   09EF                    3290 00103$:
   09EF 90s00r07           3291 	mov	dptr,#_uxTopReadyPriority
   09F2 E0                 3292 	movx	a,@dptr
   09F3 FA                 3293 	mov	r2,a
   09F4 EA                 3294 	mov	a,r2
   09F5 75 F0 0C           3295 	mov	b,#0x0C
   09F8 A4                 3296 	mul	ab
   09F9 24r00              3297 	add	a,#_pxReadyTasksLists
   09FB FA                 3298 	mov	r2,a
   09FC 74s00              3299 	mov	a,#(_pxReadyTasksLists >> 8)
   09FE 34 00              3300 	addc	a,#0x00
   0A00 FB                 3301 	mov	r3,a
   0A01 8A 82              3302 	mov	dpl,r2
   0A03 8B 83              3303 	mov	dph,r3
   0A05 E0                 3304 	movx	a,@dptr
   0A06 60 03              3305 	jz	00115$
   0A08 02s0Ar17           3306 	ljmp	00105$
   0A0B                    3307 00115$:
                    0A0B   3308 	C$tasks.c$1472$2$3 ==.
                           3309 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1472: --uxTopReadyPriority;
   0A0B 90s00r07           3310 	mov	dptr,#_uxTopReadyPriority
   0A0E E0                 3311 	movx	a,@dptr
   0A0F 14                 3312 	dec	a
   0A10 90s00r07           3313 	mov	dptr,#_uxTopReadyPriority
   0A13 F0                 3314 	movx	@dptr,a
   0A14 02s09rEF           3315 	ljmp	00103$
   0A17                    3316 00105$:
                    0A17   3317 	C$tasks.c$1477$2$4 ==.
                           3318 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1477: listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
   0A17 90s00r07           3319 	mov	dptr,#_uxTopReadyPriority
   0A1A E0                 3320 	movx	a,@dptr
   0A1B FA                 3321 	mov	r2,a
   0A1C EA                 3322 	mov	a,r2
   0A1D 75 F0 0C           3323 	mov	b,#0x0C
   0A20 A4                 3324 	mul	ab
   0A21 24r00              3325 	add	a,#_pxReadyTasksLists
   0A23 FA                 3326 	mov	r2,a
   0A24 74s00              3327 	mov	a,#(_pxReadyTasksLists >> 8)
   0A26 34 00              3328 	addc	a,#0x00
   0A28 FB                 3329 	mov	r3,a
   0A29 A8*00              3330 	mov	r0,_bp
   0A2B 08                 3331 	inc	r0
   0A2C A6 02              3332 	mov	@r0,ar2
   0A2E 08                 3333 	inc	r0
   0A2F A6 03              3334 	mov	@r0,ar3
   0A31 08                 3335 	inc	r0
   0A32 76 00              3336 	mov	@r0,#0x00
   0A34 A8*00              3337 	mov	r0,_bp
   0A36 08                 3338 	inc	r0
   0A37 74 01              3339 	mov	a,#0x01
   0A39 26                 3340 	add	a,@r0
   0A3A FD                 3341 	mov	r5,a
   0A3B 74 00              3342 	mov	a,#0x00
   0A3D 08                 3343 	inc	r0
   0A3E 36                 3344 	addc	a,@r0
   0A3F FE                 3345 	mov	r6,a
   0A40 08                 3346 	inc	r0
   0A41 86 07              3347 	mov	ar7,@r0
   0A43 8D 82              3348 	mov	dpl,r5
   0A45 8E 83              3349 	mov	dph,r6
   0A47 8F F0              3350 	mov	b,r7
   0A49 12s00r00           3351 	lcall	__gptrget
   0A4C FA                 3352 	mov	r2,a
   0A4D A3                 3353 	inc	dptr
   0A4E 12s00r00           3354 	lcall	__gptrget
   0A51 FB                 3355 	mov	r3,a
   0A52 A3                 3356 	inc	dptr
   0A53 12s00r00           3357 	lcall	__gptrget
   0A56 FC                 3358 	mov	r4,a
   0A57 74 02              3359 	mov	a,#0x02
   0A59 25 02              3360 	add	a,ar2
   0A5B FA                 3361 	mov	r2,a
   0A5C 74 00              3362 	mov	a,#0x00
   0A5E 35 03              3363 	addc	a,ar3
   0A60 FB                 3364 	mov	r3,a
   0A61 8A 82              3365 	mov	dpl,r2
   0A63 8B 83              3366 	mov	dph,r3
   0A65 8C F0              3367 	mov	b,r4
   0A67 12s00r00           3368 	lcall	__gptrget
   0A6A FA                 3369 	mov	r2,a
   0A6B A3                 3370 	inc	dptr
   0A6C 12s00r00           3371 	lcall	__gptrget
   0A6F FB                 3372 	mov	r3,a
   0A70 A3                 3373 	inc	dptr
   0A71 12s00r00           3374 	lcall	__gptrget
   0A74 FC                 3375 	mov	r4,a
   0A75 8D 82              3376 	mov	dpl,r5
   0A77 8E 83              3377 	mov	dph,r6
   0A79 8F F0              3378 	mov	b,r7
   0A7B EA                 3379 	mov	a,r2
   0A7C 12s00r00           3380 	lcall	__gptrput
   0A7F A3                 3381 	inc	dptr
   0A80 EB                 3382 	mov	a,r3
   0A81 12s00r00           3383 	lcall	__gptrput
   0A84 A3                 3384 	inc	dptr
   0A85 EC                 3385 	mov	a,r4
   0A86 12s00r00           3386 	lcall	__gptrput
   0A89 8D 82              3387 	mov	dpl,r5
   0A8B 8E 83              3388 	mov	dph,r6
   0A8D 8F F0              3389 	mov	b,r7
   0A8F E5*00              3390 	mov	a,_bp
   0A91 24 04              3391 	add	a,#0x04
   0A93 F8                 3392 	mov	r0,a
   0A94 12s00r00           3393 	lcall	__gptrget
   0A97 F6                 3394 	mov	@r0,a
   0A98 A3                 3395 	inc	dptr
   0A99 12s00r00           3396 	lcall	__gptrget
   0A9C 08                 3397 	inc	r0
   0A9D F6                 3398 	mov	@r0,a
   0A9E A3                 3399 	inc	dptr
   0A9F 12s00r00           3400 	lcall	__gptrget
   0AA2 08                 3401 	inc	r0
   0AA3 F6                 3402 	mov	@r0,a
   0AA4 A8*00              3403 	mov	r0,_bp
   0AA6 08                 3404 	inc	r0
   0AA7 74 04              3405 	mov	a,#0x04
   0AA9 26                 3406 	add	a,@r0
   0AAA FA                 3407 	mov	r2,a
   0AAB 74 00              3408 	mov	a,#0x00
   0AAD 08                 3409 	inc	r0
   0AAE 36                 3410 	addc	a,@r0
   0AAF FB                 3411 	mov	r3,a
   0AB0 08                 3412 	inc	r0
   0AB1 86 04              3413 	mov	ar4,@r0
   0AB3 E5*00              3414 	mov	a,_bp
   0AB5 24 04              3415 	add	a,#0x04
   0AB7 F8                 3416 	mov	r0,a
   0AB8 E6                 3417 	mov	a,@r0
   0AB9 B5 02 0C           3418 	cjne	a,ar2,00116$
   0ABC 08                 3419 	inc	r0
   0ABD E6                 3420 	mov	a,@r0
   0ABE B5 03 07           3421 	cjne	a,ar3,00116$
   0AC1 08                 3422 	inc	r0
   0AC2 E6                 3423 	mov	a,@r0
   0AC3 B5 04 02           3424 	cjne	a,ar4,00116$
   0AC6 80 03              3425 	sjmp	00117$
   0AC8                    3426 00116$:
   0AC8 02s0Br11           3427 	ljmp	00107$
   0ACB                    3428 00117$:
   0ACB 8D 82              3429 	mov	dpl,r5
   0ACD 8E 83              3430 	mov	dph,r6
   0ACF 8F F0              3431 	mov	b,r7
   0AD1 12s00r00           3432 	lcall	__gptrget
   0AD4 FA                 3433 	mov	r2,a
   0AD5 A3                 3434 	inc	dptr
   0AD6 12s00r00           3435 	lcall	__gptrget
   0AD9 FB                 3436 	mov	r3,a
   0ADA A3                 3437 	inc	dptr
   0ADB 12s00r00           3438 	lcall	__gptrget
   0ADE FC                 3439 	mov	r4,a
   0ADF 74 02              3440 	mov	a,#0x02
   0AE1 25 02              3441 	add	a,ar2
   0AE3 FA                 3442 	mov	r2,a
   0AE4 74 00              3443 	mov	a,#0x00
   0AE6 35 03              3444 	addc	a,ar3
   0AE8 FB                 3445 	mov	r3,a
   0AE9 8A 82              3446 	mov	dpl,r2
   0AEB 8B 83              3447 	mov	dph,r3
   0AED 8C F0              3448 	mov	b,r4
   0AEF 12s00r00           3449 	lcall	__gptrget
   0AF2 FA                 3450 	mov	r2,a
   0AF3 A3                 3451 	inc	dptr
   0AF4 12s00r00           3452 	lcall	__gptrget
   0AF7 FB                 3453 	mov	r3,a
   0AF8 A3                 3454 	inc	dptr
   0AF9 12s00r00           3455 	lcall	__gptrget
   0AFC FC                 3456 	mov	r4,a
   0AFD 8D 82              3457 	mov	dpl,r5
   0AFF 8E 83              3458 	mov	dph,r6
   0B01 8F F0              3459 	mov	b,r7
   0B03 EA                 3460 	mov	a,r2
   0B04 12s00r00           3461 	lcall	__gptrput
   0B07 A3                 3462 	inc	dptr
   0B08 EB                 3463 	mov	a,r3
   0B09 12s00r00           3464 	lcall	__gptrput
   0B0C A3                 3465 	inc	dptr
   0B0D EC                 3466 	mov	a,r4
   0B0E 12s00r00           3467 	lcall	__gptrput
   0B11                    3468 00107$:
   0B11 8D 82              3469 	mov	dpl,r5
   0B13 8E 83              3470 	mov	dph,r6
   0B15 8F F0              3471 	mov	b,r7
   0B17 12s00r00           3472 	lcall	__gptrget
   0B1A FD                 3473 	mov	r5,a
   0B1B A3                 3474 	inc	dptr
   0B1C 12s00r00           3475 	lcall	__gptrget
   0B1F FE                 3476 	mov	r6,a
   0B20 A3                 3477 	inc	dptr
   0B21 12s00r00           3478 	lcall	__gptrget
   0B24 FF                 3479 	mov	r7,a
   0B25 74 08              3480 	mov	a,#0x08
   0B27 25 05              3481 	add	a,ar5
   0B29 FD                 3482 	mov	r5,a
   0B2A 74 00              3483 	mov	a,#0x00
   0B2C 35 06              3484 	addc	a,ar6
   0B2E FE                 3485 	mov	r6,a
   0B2F 8D 82              3486 	mov	dpl,r5
   0B31 8E 83              3487 	mov	dph,r6
   0B33 8F F0              3488 	mov	b,r7
   0B35 12s00r00           3489 	lcall	__gptrget
   0B38 FD                 3490 	mov	r5,a
   0B39 A3                 3491 	inc	dptr
   0B3A 12s00r00           3492 	lcall	__gptrget
   0B3D FE                 3493 	mov	r6,a
   0B3E A3                 3494 	inc	dptr
   0B3F 12s00r00           3495 	lcall	__gptrget
   0B42 FF                 3496 	mov	r7,a
   0B43 90s00r00           3497 	mov	dptr,#_pxCurrentTCB
   0B46 ED                 3498 	mov	a,r5
   0B47 F0                 3499 	movx	@dptr,a
   0B48 A3                 3500 	inc	dptr
   0B49 EE                 3501 	mov	a,r6
   0B4A F0                 3502 	movx	@dptr,a
   0B4B A3                 3503 	inc	dptr
   0B4C EF                 3504 	mov	a,r7
   0B4D F0                 3505 	movx	@dptr,a
   0B4E                    3506 00108$:
   0B4E 85*00 81           3507 	mov	sp,_bp
   0B51 D0*00              3508 	pop	_bp
                    0B53   3509 	C$tasks.c$1481$2$4 ==.
                    0B53   3510 	XG$vTaskSwitchContext$0$0 ==.
   0B53 22                 3511 	ret
                           3512 ;------------------------------------------------------------
                           3513 ;Allocation info for local variables in function 'vTaskPlaceOnEventList'
                           3514 ;------------------------------------------------------------
                           3515 ;xTicksToWait              Allocated to stack - offset -4
                           3516 ;pxEventList               Allocated to registers r2 r3 r4 
                           3517 ;xTimeToWake               Allocated to registers r2 r3 
                           3518 ;------------------------------------------------------------
                    0B54   3519 	G$vTaskPlaceOnEventList$0$0 ==.
                    0B54   3520 	C$tasks.c$1484$2$4 ==.
                           3521 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1484: void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
                           3522 ;	-----------------------------------------
                           3523 ;	 function vTaskPlaceOnEventList
                           3524 ;	-----------------------------------------
   0B54                    3525 _vTaskPlaceOnEventList:
   0B54 C0*00              3526 	push	_bp
   0B56 85 81*00           3527 	mov	_bp,sp
   0B59 AA 82              3528 	mov	r2,dpl
   0B5B AB 83              3529 	mov	r3,dph
   0B5D AC F0              3530 	mov	r4,b
                    0B5F   3531 	C$tasks.c$1494$1$1 ==.
                           3532 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1494: vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   0B5F 90s00r00           3533 	mov	dptr,#_pxCurrentTCB
   0B62 E0                 3534 	movx	a,@dptr
   0B63 FD                 3535 	mov	r5,a
   0B64 A3                 3536 	inc	dptr
   0B65 E0                 3537 	movx	a,@dptr
   0B66 FE                 3538 	mov	r6,a
   0B67 A3                 3539 	inc	dptr
   0B68 E0                 3540 	movx	a,@dptr
   0B69 FF                 3541 	mov	r7,a
   0B6A 74 11              3542 	mov	a,#0x11
   0B6C 25 05              3543 	add	a,ar5
   0B6E FD                 3544 	mov	r5,a
   0B6F 74 00              3545 	mov	a,#0x00
   0B71 35 06              3546 	addc	a,ar6
   0B73 FE                 3547 	mov	r6,a
   0B74 C0 05              3548 	push	ar5
   0B76 C0 06              3549 	push	ar6
   0B78 C0 07              3550 	push	ar7
   0B7A 8A 82              3551 	mov	dpl,r2
   0B7C 8B 83              3552 	mov	dph,r3
   0B7E 8C F0              3553 	mov	b,r4
   0B80 12s00r00           3554 	lcall	_vListInsert
   0B83 15 81              3555 	dec	sp
   0B85 15 81              3556 	dec	sp
   0B87 15 81              3557 	dec	sp
                    0B89   3558 	C$tasks.c$1499$1$1 ==.
                           3559 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1499: vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   0B89 90s00r00           3560 	mov	dptr,#_pxCurrentTCB
   0B8C E0                 3561 	movx	a,@dptr
   0B8D FA                 3562 	mov	r2,a
   0B8E A3                 3563 	inc	dptr
   0B8F E0                 3564 	movx	a,@dptr
   0B90 FB                 3565 	mov	r3,a
   0B91 A3                 3566 	inc	dptr
   0B92 E0                 3567 	movx	a,@dptr
   0B93 FC                 3568 	mov	r4,a
   0B94 74 03              3569 	mov	a,#0x03
   0B96 25 02              3570 	add	a,ar2
   0B98 FA                 3571 	mov	r2,a
   0B99 74 00              3572 	mov	a,#0x00
   0B9B 35 03              3573 	addc	a,ar3
   0B9D FB                 3574 	mov	r3,a
   0B9E 8A 82              3575 	mov	dpl,r2
   0BA0 8B 83              3576 	mov	dph,r3
   0BA2 8C F0              3577 	mov	b,r4
   0BA4 12s00r00           3578 	lcall	_vListRemove
                    0BA7   3579 	C$tasks.c$1535$2$2 ==.
                           3580 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1535: xTimeToWake = xTickCount + xTicksToWait;
   0BA7 90s00r04           3581 	mov	dptr,#_xTickCount
   0BAA E0                 3582 	movx	a,@dptr
   0BAB FA                 3583 	mov	r2,a
   0BAC A3                 3584 	inc	dptr
   0BAD E0                 3585 	movx	a,@dptr
   0BAE FB                 3586 	mov	r3,a
   0BAF E5*00              3587 	mov	a,_bp
   0BB1 24 FC              3588 	add	a,#0xfc
   0BB3 F8                 3589 	mov	r0,a
   0BB4 E6                 3590 	mov	a,@r0
   0BB5 25 02              3591 	add	a,ar2
   0BB7 FA                 3592 	mov	r2,a
   0BB8 08                 3593 	inc	r0
   0BB9 E6                 3594 	mov	a,@r0
   0BBA 35 03              3595 	addc	a,ar3
   0BBC FB                 3596 	mov	r3,a
                    0BBD   3597 	C$tasks.c$1537$2$2 ==.
                           3598 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1537: listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   0BBD 90s00r00           3599 	mov	dptr,#_pxCurrentTCB
   0BC0 E0                 3600 	movx	a,@dptr
   0BC1 FC                 3601 	mov	r4,a
   0BC2 A3                 3602 	inc	dptr
   0BC3 E0                 3603 	movx	a,@dptr
   0BC4 FD                 3604 	mov	r5,a
   0BC5 A3                 3605 	inc	dptr
   0BC6 E0                 3606 	movx	a,@dptr
   0BC7 FE                 3607 	mov	r6,a
   0BC8 74 03              3608 	mov	a,#0x03
   0BCA 25 04              3609 	add	a,ar4
   0BCC FC                 3610 	mov	r4,a
   0BCD 74 00              3611 	mov	a,#0x00
   0BCF 35 05              3612 	addc	a,ar5
   0BD1 FD                 3613 	mov	r5,a
   0BD2 8C 82              3614 	mov	dpl,r4
   0BD4 8D 83              3615 	mov	dph,r5
   0BD6 8E F0              3616 	mov	b,r6
   0BD8 EA                 3617 	mov	a,r2
   0BD9 12s00r00           3618 	lcall	__gptrput
   0BDC A3                 3619 	inc	dptr
   0BDD EB                 3620 	mov	a,r3
   0BDE 12s00r00           3621 	lcall	__gptrput
                    0BE1   3622 	C$tasks.c$1539$2$2 ==.
                           3623 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1539: if( xTimeToWake < xTickCount )
   0BE1 90s00r04           3624 	mov	dptr,#_xTickCount
   0BE4 E0                 3625 	movx	a,@dptr
   0BE5 FC                 3626 	mov	r4,a
   0BE6 A3                 3627 	inc	dptr
   0BE7 E0                 3628 	movx	a,@dptr
   0BE8 FD                 3629 	mov	r5,a
   0BE9 C3                 3630 	clr	c
   0BEA EA                 3631 	mov	a,r2
   0BEB 9C                 3632 	subb	a,r4
   0BEC EB                 3633 	mov	a,r3
   0BED 9D                 3634 	subb	a,r5
   0BEE 40 03              3635 	jc	00107$
   0BF0 02s0Cr2B           3636 	ljmp	00102$
   0BF3                    3637 00107$:
                    0BF3   3638 	C$tasks.c$1542$3$3 ==.
                           3639 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1542: vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   0BF3 90s00r00           3640 	mov	dptr,#_pxCurrentTCB
   0BF6 E0                 3641 	movx	a,@dptr
   0BF7 FA                 3642 	mov	r2,a
   0BF8 A3                 3643 	inc	dptr
   0BF9 E0                 3644 	movx	a,@dptr
   0BFA FB                 3645 	mov	r3,a
   0BFB A3                 3646 	inc	dptr
   0BFC E0                 3647 	movx	a,@dptr
   0BFD FC                 3648 	mov	r4,a
   0BFE 74 03              3649 	mov	a,#0x03
   0C00 25 02              3650 	add	a,ar2
   0C02 FA                 3651 	mov	r2,a
   0C03 74 00              3652 	mov	a,#0x00
   0C05 35 03              3653 	addc	a,ar3
   0C07 FB                 3654 	mov	r3,a
   0C08 90s00r4B           3655 	mov	dptr,#_pxOverflowDelayedTaskList
   0C0B E0                 3656 	movx	a,@dptr
   0C0C FD                 3657 	mov	r5,a
   0C0D A3                 3658 	inc	dptr
   0C0E E0                 3659 	movx	a,@dptr
   0C0F FE                 3660 	mov	r6,a
   0C10 A3                 3661 	inc	dptr
   0C11 E0                 3662 	movx	a,@dptr
   0C12 FF                 3663 	mov	r7,a
   0C13 C0 02              3664 	push	ar2
   0C15 C0 03              3665 	push	ar3
   0C17 C0 04              3666 	push	ar4
   0C19 8D 82              3667 	mov	dpl,r5
   0C1B 8E 83              3668 	mov	dph,r6
   0C1D 8F F0              3669 	mov	b,r7
   0C1F 12s00r00           3670 	lcall	_vListInsert
   0C22 15 81              3671 	dec	sp
   0C24 15 81              3672 	dec	sp
   0C26 15 81              3673 	dec	sp
   0C28 02s0Cr60           3674 	ljmp	00104$
   0C2B                    3675 00102$:
                    0C2B   3676 	C$tasks.c$1547$3$4 ==.
                           3677 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1547: vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   0C2B 90s00r00           3678 	mov	dptr,#_pxCurrentTCB
   0C2E E0                 3679 	movx	a,@dptr
   0C2F FA                 3680 	mov	r2,a
   0C30 A3                 3681 	inc	dptr
   0C31 E0                 3682 	movx	a,@dptr
   0C32 FB                 3683 	mov	r3,a
   0C33 A3                 3684 	inc	dptr
   0C34 E0                 3685 	movx	a,@dptr
   0C35 FC                 3686 	mov	r4,a
   0C36 74 03              3687 	mov	a,#0x03
   0C38 25 02              3688 	add	a,ar2
   0C3A FA                 3689 	mov	r2,a
   0C3B 74 00              3690 	mov	a,#0x00
   0C3D 35 03              3691 	addc	a,ar3
   0C3F FB                 3692 	mov	r3,a
   0C40 90s00r48           3693 	mov	dptr,#_pxDelayedTaskList
   0C43 E0                 3694 	movx	a,@dptr
   0C44 FD                 3695 	mov	r5,a
   0C45 A3                 3696 	inc	dptr
   0C46 E0                 3697 	movx	a,@dptr
   0C47 FE                 3698 	mov	r6,a
   0C48 A3                 3699 	inc	dptr
   0C49 E0                 3700 	movx	a,@dptr
   0C4A FF                 3701 	mov	r7,a
   0C4B C0 02              3702 	push	ar2
   0C4D C0 03              3703 	push	ar3
   0C4F C0 04              3704 	push	ar4
   0C51 8D 82              3705 	mov	dpl,r5
   0C53 8E 83              3706 	mov	dph,r6
   0C55 8F F0              3707 	mov	b,r7
   0C57 12s00r00           3708 	lcall	_vListInsert
   0C5A 15 81              3709 	dec	sp
   0C5C 15 81              3710 	dec	sp
   0C5E 15 81              3711 	dec	sp
   0C60                    3712 00104$:
   0C60 D0*00              3713 	pop	_bp
                    0C62   3714 	C$tasks.c$1551$2$2 ==.
                    0C62   3715 	XG$vTaskPlaceOnEventList$0$0 ==.
   0C62 22                 3716 	ret
                           3717 ;------------------------------------------------------------
                           3718 ;Allocation info for local variables in function 'xTaskRemoveFromEventList'
                           3719 ;------------------------------------------------------------
                           3720 ;pxEventList               Allocated to registers r2 r3 r4 
                           3721 ;pxUnblockedTCB            Allocated to stack - offset 1
                           3722 ;xReturn                   Allocated to registers r2 
                           3723 ;------------------------------------------------------------
                    0C63   3724 	G$xTaskRemoveFromEventList$0$0 ==.
                    0C63   3725 	C$tasks.c$1554$2$2 ==.
                           3726 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1554: signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
                           3727 ;	-----------------------------------------
                           3728 ;	 function xTaskRemoveFromEventList
                           3729 ;	-----------------------------------------
   0C63                    3730 _xTaskRemoveFromEventList:
   0C63 C0*00              3731 	push	_bp
   0C65 85 81*00           3732 	mov	_bp,sp
   0C68 05 81              3733 	inc	sp
   0C6A 05 81              3734 	inc	sp
   0C6C 05 81              3735 	inc	sp
   0C6E AA 82              3736 	mov	r2,dpl
   0C70 AB 83              3737 	mov	r3,dph
   0C72 AC F0              3738 	mov	r4,b
                    0C74   3739 	C$tasks.c$1569$1$1 ==.
                           3740 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1569: pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   0C74 8A 82              3741 	mov	dpl,r2
   0C76 8B 83              3742 	mov	dph,r3
   0C78 8C F0              3743 	mov	b,r4
   0C7A 12s00r00           3744 	lcall	__gptrget
   0C7D 70 03              3745 	jnz	00117$
   0C7F 02s0CrCB           3746 	ljmp	00111$
   0C82                    3747 00117$:
   0C82 74 04              3748 	mov	a,#0x04
   0C84 25 02              3749 	add	a,ar2
   0C86 FA                 3750 	mov	r2,a
   0C87 74 00              3751 	mov	a,#0x00
   0C89 35 03              3752 	addc	a,ar3
   0C8B FB                 3753 	mov	r3,a
   0C8C 74 02              3754 	mov	a,#0x02
   0C8E 25 02              3755 	add	a,ar2
   0C90 FA                 3756 	mov	r2,a
   0C91 74 00              3757 	mov	a,#0x00
   0C93 35 03              3758 	addc	a,ar3
   0C95 FB                 3759 	mov	r3,a
   0C96 8A 82              3760 	mov	dpl,r2
   0C98 8B 83              3761 	mov	dph,r3
   0C9A 8C F0              3762 	mov	b,r4
   0C9C 12s00r00           3763 	lcall	__gptrget
   0C9F FA                 3764 	mov	r2,a
   0CA0 A3                 3765 	inc	dptr
   0CA1 12s00r00           3766 	lcall	__gptrget
   0CA4 FB                 3767 	mov	r3,a
   0CA5 A3                 3768 	inc	dptr
   0CA6 12s00r00           3769 	lcall	__gptrget
   0CA9 FC                 3770 	mov	r4,a
   0CAA 74 08              3771 	mov	a,#0x08
   0CAC 25 02              3772 	add	a,ar2
   0CAE FA                 3773 	mov	r2,a
   0CAF 74 00              3774 	mov	a,#0x00
   0CB1 35 03              3775 	addc	a,ar3
   0CB3 FB                 3776 	mov	r3,a
   0CB4 8A 82              3777 	mov	dpl,r2
   0CB6 8B 83              3778 	mov	dph,r3
   0CB8 8C F0              3779 	mov	b,r4
   0CBA 12s00r00           3780 	lcall	__gptrget
   0CBD FA                 3781 	mov	r2,a
   0CBE A3                 3782 	inc	dptr
   0CBF 12s00r00           3783 	lcall	__gptrget
   0CC2 FB                 3784 	mov	r3,a
   0CC3 A3                 3785 	inc	dptr
   0CC4 12s00r00           3786 	lcall	__gptrget
   0CC7 FC                 3787 	mov	r4,a
   0CC8 02s0CrD1           3788 	ljmp	00112$
   0CCB                    3789 00111$:
   0CCB 7A 00              3790 	mov	r2,#0x00
   0CCD 7B 00              3791 	mov	r3,#0x00
   0CCF 7C 00              3792 	mov	r4,#0x00
   0CD1                    3793 00112$:
   0CD1 A8*00              3794 	mov	r0,_bp
   0CD3 08                 3795 	inc	r0
   0CD4 A6 02              3796 	mov	@r0,ar2
   0CD6 08                 3797 	inc	r0
   0CD7 A6 03              3798 	mov	@r0,ar3
   0CD9 08                 3799 	inc	r0
   0CDA A6 04              3800 	mov	@r0,ar4
                    0CDC   3801 	C$tasks.c$1570$1$1 ==.
                           3802 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1570: vListRemove( &( pxUnblockedTCB->xEventListItem ) );
   0CDC A8*00              3803 	mov	r0,_bp
   0CDE 08                 3804 	inc	r0
   0CDF 74 11              3805 	mov	a,#0x11
   0CE1 26                 3806 	add	a,@r0
   0CE2 FD                 3807 	mov	r5,a
   0CE3 74 00              3808 	mov	a,#0x00
   0CE5 08                 3809 	inc	r0
   0CE6 36                 3810 	addc	a,@r0
   0CE7 FE                 3811 	mov	r6,a
   0CE8 08                 3812 	inc	r0
   0CE9 86 07              3813 	mov	ar7,@r0
   0CEB 8D 82              3814 	mov	dpl,r5
   0CED 8E 83              3815 	mov	dph,r6
   0CEF 8F F0              3816 	mov	b,r7
   0CF1 12s00r00           3817 	lcall	_vListRemove
                    0CF4   3818 	C$tasks.c$1572$1$1 ==.
                           3819 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1572: if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   0CF4 90s00r09           3820 	mov	dptr,#_uxSchedulerSuspended
   0CF7 E0                 3821 	movx	a,@dptr
   0CF8 FD                 3822 	mov	r5,a
   0CF9 ED                 3823 	mov	a,r5
   0CFA 60 03              3824 	jz	00118$
   0CFC 02s0Dr78           3825 	ljmp	00104$
   0CFF                    3826 00118$:
                    0CFF   3827 	C$tasks.c$1574$2$2 ==.
                           3828 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1574: vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   0CFF A8*00              3829 	mov	r0,_bp
   0D01 08                 3830 	inc	r0
   0D02 74 03              3831 	mov	a,#0x03
   0D04 26                 3832 	add	a,@r0
   0D05 FD                 3833 	mov	r5,a
   0D06 74 00              3834 	mov	a,#0x00
   0D08 08                 3835 	inc	r0
   0D09 36                 3836 	addc	a,@r0
   0D0A FE                 3837 	mov	r6,a
   0D0B 08                 3838 	inc	r0
   0D0C 86 07              3839 	mov	ar7,@r0
   0D0E 8D 82              3840 	mov	dpl,r5
   0D10 8E 83              3841 	mov	dph,r6
   0D12 8F F0              3842 	mov	b,r7
   0D14 12s00r00           3843 	lcall	_vListRemove
                    0D17   3844 	C$tasks.c$1575$3$3 ==.
                           3845 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1575: prvAddTaskToReadyQueue( pxUnblockedTCB );
   0D17 A8*00              3846 	mov	r0,_bp
   0D19 08                 3847 	inc	r0
   0D1A 74 1F              3848 	mov	a,#0x1F
   0D1C 26                 3849 	add	a,@r0
   0D1D FD                 3850 	mov	r5,a
   0D1E 74 00              3851 	mov	a,#0x00
   0D20 08                 3852 	inc	r0
   0D21 36                 3853 	addc	a,@r0
   0D22 FE                 3854 	mov	r6,a
   0D23 08                 3855 	inc	r0
   0D24 86 07              3856 	mov	ar7,@r0
   0D26 8D 82              3857 	mov	dpl,r5
   0D28 8E 83              3858 	mov	dph,r6
   0D2A 8F F0              3859 	mov	b,r7
   0D2C 12s00r00           3860 	lcall	__gptrget
   0D2F FD                 3861 	mov	r5,a
   0D30 90s00r07           3862 	mov	dptr,#_uxTopReadyPriority
   0D33 E0                 3863 	movx	a,@dptr
   0D34 FE                 3864 	mov	r6,a
   0D35 C3                 3865 	clr	c
   0D36 EE                 3866 	mov	a,r6
   0D37 9D                 3867 	subb	a,r5
   0D38 40 03              3868 	jc	00119$
   0D3A 02s0Dr42           3869 	ljmp	00102$
   0D3D                    3870 00119$:
   0D3D 90s00r07           3871 	mov	dptr,#_uxTopReadyPriority
   0D40 ED                 3872 	mov	a,r5
   0D41 F0                 3873 	movx	@dptr,a
   0D42                    3874 00102$:
   0D42 A8*00              3875 	mov	r0,_bp
   0D44 08                 3876 	inc	r0
   0D45 74 03              3877 	mov	a,#0x03
   0D47 26                 3878 	add	a,@r0
   0D48 FE                 3879 	mov	r6,a
   0D49 74 00              3880 	mov	a,#0x00
   0D4B 08                 3881 	inc	r0
   0D4C 36                 3882 	addc	a,@r0
   0D4D FF                 3883 	mov	r7,a
   0D4E 08                 3884 	inc	r0
   0D4F 86 02              3885 	mov	ar2,@r0
   0D51 ED                 3886 	mov	a,r5
   0D52 75 F0 0C           3887 	mov	b,#0x0C
   0D55 A4                 3888 	mul	ab
   0D56 24r00              3889 	add	a,#_pxReadyTasksLists
   0D58 FB                 3890 	mov	r3,a
   0D59 74s00              3891 	mov	a,#(_pxReadyTasksLists >> 8)
   0D5B 34 00              3892 	addc	a,#0x00
   0D5D FC                 3893 	mov	r4,a
   0D5E 7D 00              3894 	mov	r5,#0x00
   0D60 C0 06              3895 	push	ar6
   0D62 C0 07              3896 	push	ar7
   0D64 C0 02              3897 	push	ar2
   0D66 8B 82              3898 	mov	dpl,r3
   0D68 8C 83              3899 	mov	dph,r4
   0D6A 8D F0              3900 	mov	b,r5
   0D6C 12s00r00           3901 	lcall	_vListInsertEnd
   0D6F 15 81              3902 	dec	sp
   0D71 15 81              3903 	dec	sp
   0D73 15 81              3904 	dec	sp
   0D75 02s0Dr9F           3905 	ljmp	00105$
   0D78                    3906 00104$:
                    0D78   3907 	C$tasks.c$1581$2$5 ==.
                           3908 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1581: vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   0D78 A8*00              3909 	mov	r0,_bp
   0D7A 08                 3910 	inc	r0
   0D7B 74 11              3911 	mov	a,#0x11
   0D7D 26                 3912 	add	a,@r0
   0D7E FA                 3913 	mov	r2,a
   0D7F 74 00              3914 	mov	a,#0x00
   0D81 08                 3915 	inc	r0
   0D82 36                 3916 	addc	a,@r0
   0D83 FB                 3917 	mov	r3,a
   0D84 08                 3918 	inc	r0
   0D85 86 04              3919 	mov	ar4,@r0
   0D87 C0 02              3920 	push	ar2
   0D89 C0 03              3921 	push	ar3
   0D8B C0 04              3922 	push	ar4
   0D8D 75 82r4E           3923 	mov	dpl,#_xPendingReadyList
   0D90 75 83s00           3924 	mov	dph,#(_xPendingReadyList >> 8)
   0D93 75 F0 00           3925 	mov	b,#0x00
   0D96 12s00r00           3926 	lcall	_vListInsertEnd
   0D99 15 81              3927 	dec	sp
   0D9B 15 81              3928 	dec	sp
   0D9D 15 81              3929 	dec	sp
   0D9F                    3930 00105$:
                    0D9F   3931 	C$tasks.c$1584$1$1 ==.
                           3932 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1584: if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   0D9F A8*00              3933 	mov	r0,_bp
   0DA1 08                 3934 	inc	r0
   0DA2 74 1F              3935 	mov	a,#0x1F
   0DA4 26                 3936 	add	a,@r0
   0DA5 FA                 3937 	mov	r2,a
   0DA6 74 00              3938 	mov	a,#0x00
   0DA8 08                 3939 	inc	r0
   0DA9 36                 3940 	addc	a,@r0
   0DAA FB                 3941 	mov	r3,a
   0DAB 08                 3942 	inc	r0
   0DAC 86 04              3943 	mov	ar4,@r0
   0DAE 8A 82              3944 	mov	dpl,r2
   0DB0 8B 83              3945 	mov	dph,r3
   0DB2 8C F0              3946 	mov	b,r4
   0DB4 12s00r00           3947 	lcall	__gptrget
   0DB7 FA                 3948 	mov	r2,a
   0DB8 90s00r00           3949 	mov	dptr,#_pxCurrentTCB
   0DBB E0                 3950 	movx	a,@dptr
   0DBC FB                 3951 	mov	r3,a
   0DBD A3                 3952 	inc	dptr
   0DBE E0                 3953 	movx	a,@dptr
   0DBF FC                 3954 	mov	r4,a
   0DC0 A3                 3955 	inc	dptr
   0DC1 E0                 3956 	movx	a,@dptr
   0DC2 FD                 3957 	mov	r5,a
   0DC3 74 1F              3958 	mov	a,#0x1F
   0DC5 25 03              3959 	add	a,ar3
   0DC7 FB                 3960 	mov	r3,a
   0DC8 74 00              3961 	mov	a,#0x00
   0DCA 35 04              3962 	addc	a,ar4
   0DCC FC                 3963 	mov	r4,a
   0DCD 8B 82              3964 	mov	dpl,r3
   0DCF 8C 83              3965 	mov	dph,r4
   0DD1 8D F0              3966 	mov	b,r5
   0DD3 12s00r00           3967 	lcall	__gptrget
   0DD6 FB                 3968 	mov	r3,a
   0DD7 C3                 3969 	clr	c
   0DD8 EA                 3970 	mov	a,r2
   0DD9 9B                 3971 	subb	a,r3
   0DDA 50 03              3972 	jnc	00120$
   0DDC 02s0DrE4           3973 	ljmp	00107$
   0DDF                    3974 00120$:
                    0DDF   3975 	C$tasks.c$1590$2$6 ==.
                           3976 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1590: xReturn = pdTRUE;
   0DDF 7A 01              3977 	mov	r2,#0x01
   0DE1 02s0DrE6           3978 	ljmp	00108$
   0DE4                    3979 00107$:
                    0DE4   3980 	C$tasks.c$1594$2$7 ==.
                           3981 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1594: xReturn = pdFALSE;
   0DE4 7A 00              3982 	mov	r2,#0x00
   0DE6                    3983 00108$:
                    0DE6   3984 	C$tasks.c$1597$1$1 ==.
                           3985 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1597: return xReturn;
   0DE6 8A 82              3986 	mov	dpl,r2
   0DE8                    3987 00109$:
   0DE8 85*00 81           3988 	mov	sp,_bp
   0DEB D0*00              3989 	pop	_bp
                    0DED   3990 	C$tasks.c$1598$1$1 ==.
                    0DED   3991 	XG$xTaskRemoveFromEventList$0$0 ==.
   0DED 22                 3992 	ret
                           3993 ;------------------------------------------------------------
                           3994 ;Allocation info for local variables in function 'vTaskSetTimeOutState'
                           3995 ;------------------------------------------------------------
                           3996 ;pxTimeOut                 Allocated to registers r2 r3 r4 
                           3997 ;------------------------------------------------------------
                    0DEE   3998 	G$vTaskSetTimeOutState$0$0 ==.
                    0DEE   3999 	C$tasks.c$1601$1$1 ==.
                           4000 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1601: void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
                           4001 ;	-----------------------------------------
                           4002 ;	 function vTaskSetTimeOutState
                           4003 ;	-----------------------------------------
   0DEE                    4004 _vTaskSetTimeOutState:
   0DEE AA 82              4005 	mov	r2,dpl
   0DF0 AB 83              4006 	mov	r3,dph
   0DF2 AC F0              4007 	mov	r4,b
                    0DF4   4008 	C$tasks.c$1603$1$1 ==.
                           4009 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1603: pxTimeOut->xOverflowCount = xNumOfOverflows;
   0DF4 90s00r0C           4010 	mov	dptr,#_xNumOfOverflows
   0DF7 E0                 4011 	movx	a,@dptr
   0DF8 FD                 4012 	mov	r5,a
   0DF9 8A 82              4013 	mov	dpl,r2
   0DFB 8B 83              4014 	mov	dph,r3
   0DFD 8C F0              4015 	mov	b,r4
   0DFF ED                 4016 	mov	a,r5
   0E00 12s00r00           4017 	lcall	__gptrput
                    0E03   4018 	C$tasks.c$1604$1$1 ==.
                           4019 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1604: pxTimeOut->xTimeOnEntering = xTickCount;
   0E03 0A                 4020 	inc	r2
   0E04 BA 00 01           4021 	cjne	r2,#0x00,00103$
   0E07 0B                 4022 	inc	r3
   0E08                    4023 00103$:
   0E08 90s00r04           4024 	mov	dptr,#_xTickCount
   0E0B E0                 4025 	movx	a,@dptr
   0E0C FD                 4026 	mov	r5,a
   0E0D A3                 4027 	inc	dptr
   0E0E E0                 4028 	movx	a,@dptr
   0E0F FE                 4029 	mov	r6,a
   0E10 8A 82              4030 	mov	dpl,r2
   0E12 8B 83              4031 	mov	dph,r3
   0E14 8C F0              4032 	mov	b,r4
   0E16 ED                 4033 	mov	a,r5
   0E17 12s00r00           4034 	lcall	__gptrput
   0E1A A3                 4035 	inc	dptr
   0E1B EE                 4036 	mov	a,r6
   0E1C 12s00r00           4037 	lcall	__gptrput
   0E1F                    4038 00101$:
                    0E1F   4039 	C$tasks.c$1605$1$1 ==.
                    0E1F   4040 	XG$vTaskSetTimeOutState$0$0 ==.
   0E1F 22                 4041 	ret
                           4042 ;------------------------------------------------------------
                           4043 ;Allocation info for local variables in function 'xTaskCheckForTimeOut'
                           4044 ;------------------------------------------------------------
                           4045 ;pxTicksToWait             Allocated to stack - offset -5
                           4046 ;pxTimeOut                 Allocated to stack - offset 1
                           4047 ;xReturn                   Allocated to registers r5 
                           4048 ;sloc0                     Allocated to stack - offset 4
                           4049 ;sloc1                     Allocated to stack - offset 8
                           4050 ;------------------------------------------------------------
                    0E20   4051 	G$xTaskCheckForTimeOut$0$0 ==.
                    0E20   4052 	C$tasks.c$1608$1$1 ==.
                           4053 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1608: portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
                           4054 ;	-----------------------------------------
                           4055 ;	 function xTaskCheckForTimeOut
                           4056 ;	-----------------------------------------
   0E20                    4057 _xTaskCheckForTimeOut:
   0E20 C0*00              4058 	push	_bp
   0E22 85 81*00           4059 	mov	_bp,sp
   0E25 C0 82              4060 	push	dpl
   0E27 C0 83              4061 	push	dph
   0E29 C0 F0              4062 	push	b
   0E2B 05 81              4063 	inc	sp
   0E2D 05 81              4064 	inc	sp
   0E2F 05 81              4065 	inc	sp
                    0E31   4066 	C$tasks.c$1612$1$1 ==.
                           4067 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1612: portENTER_CRITICAL();
   0E31 C0 E0 C0 A8        4068 	 push ACC push IE 
   0E35 C2 AF              4069 	clr	_EA
                    0E37   4070 	C$tasks.c$1625$2$2 ==.
                           4071 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1625: if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xTickCount >= pxTimeOut->xTimeOnEntering ) )
   0E37 A8*00              4072 	mov	r0,_bp
   0E39 08                 4073 	inc	r0
   0E3A 86 82              4074 	mov	dpl,@r0
   0E3C 08                 4075 	inc	r0
   0E3D 86 83              4076 	mov	dph,@r0
   0E3F 08                 4077 	inc	r0
   0E40 86 F0              4078 	mov	b,@r0
   0E42 12s00r00           4079 	lcall	__gptrget
   0E45 FD                 4080 	mov	r5,a
   0E46 90s00r0C           4081 	mov	dptr,#_xNumOfOverflows
   0E49 E0                 4082 	movx	a,@dptr
   0E4A FE                 4083 	mov	r6,a
   0E4B EE                 4084 	mov	a,r6
   0E4C B5 05 03           4085 	cjne	a,ar5,00113$
   0E4F 02s0Er89           4086 	ljmp	00105$
   0E52                    4087 00113$:
   0E52 A8*00              4088 	mov	r0,_bp
   0E54 08                 4089 	inc	r0
   0E55 74 01              4090 	mov	a,#0x01
   0E57 26                 4091 	add	a,@r0
   0E58 FD                 4092 	mov	r5,a
   0E59 74 00              4093 	mov	a,#0x00
   0E5B 08                 4094 	inc	r0
   0E5C 36                 4095 	addc	a,@r0
   0E5D FE                 4096 	mov	r6,a
   0E5E 08                 4097 	inc	r0
   0E5F 86 07              4098 	mov	ar7,@r0
   0E61 8D 82              4099 	mov	dpl,r5
   0E63 8E 83              4100 	mov	dph,r6
   0E65 8F F0              4101 	mov	b,r7
   0E67 12s00r00           4102 	lcall	__gptrget
   0E6A FD                 4103 	mov	r5,a
   0E6B A3                 4104 	inc	dptr
   0E6C 12s00r00           4105 	lcall	__gptrget
   0E6F FE                 4106 	mov	r6,a
   0E70 90s00r04           4107 	mov	dptr,#_xTickCount
   0E73 E0                 4108 	movx	a,@dptr
   0E74 FF                 4109 	mov	r7,a
   0E75 A3                 4110 	inc	dptr
   0E76 E0                 4111 	movx	a,@dptr
   0E77 FA                 4112 	mov	r2,a
   0E78 C3                 4113 	clr	c
   0E79 EF                 4114 	mov	a,r7
   0E7A 9D                 4115 	subb	a,r5
   0E7B EA                 4116 	mov	a,r2
   0E7C 9E                 4117 	subb	a,r6
   0E7D E4                 4118 	clr	a
   0E7E 33                 4119 	rlc	a
   0E7F 60 03              4120 	jz	00114$
   0E81 02s0Er89           4121 	ljmp	00105$
   0E84                    4122 00114$:
                    0E84   4123 	C$tasks.c$1631$3$3 ==.
                           4124 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1631: xReturn = pdTRUE;
   0E84 7D 01              4125 	mov	r5,#0x01
   0E86 02s0Fr31           4126 	ljmp	00106$
   0E89                    4127 00105$:
                    0E89   4128 	C$tasks.c$1633$2$2 ==.
                           4129 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1633: else if( ( xTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
   0E89 A8*00              4130 	mov	r0,_bp
   0E8B 08                 4131 	inc	r0
   0E8C 74 01              4132 	mov	a,#0x01
   0E8E 26                 4133 	add	a,@r0
   0E8F FE                 4134 	mov	r6,a
   0E90 74 00              4135 	mov	a,#0x00
   0E92 08                 4136 	inc	r0
   0E93 36                 4137 	addc	a,@r0
   0E94 FF                 4138 	mov	r7,a
   0E95 08                 4139 	inc	r0
   0E96 86 02              4140 	mov	ar2,@r0
   0E98 8E 82              4141 	mov	dpl,r6
   0E9A 8F 83              4142 	mov	dph,r7
   0E9C 8A F0              4143 	mov	b,r2
   0E9E 12s00r00           4144 	lcall	__gptrget
   0EA1 FA                 4145 	mov	r2,a
   0EA2 A3                 4146 	inc	dptr
   0EA3 12s00r00           4147 	lcall	__gptrget
   0EA6 FB                 4148 	mov	r3,a
   0EA7 90s00r04           4149 	mov	dptr,#_xTickCount
   0EAA E0                 4150 	movx	a,@dptr
   0EAB FC                 4151 	mov	r4,a
   0EAC A3                 4152 	inc	dptr
   0EAD E0                 4153 	movx	a,@dptr
   0EAE FE                 4154 	mov	r6,a
   0EAF EC                 4155 	mov	a,r4
   0EB0 C3                 4156 	clr	c
   0EB1 95 02              4157 	subb	a,ar2
   0EB3 FC                 4158 	mov	r4,a
   0EB4 EE                 4159 	mov	a,r6
   0EB5 95 03              4160 	subb	a,ar3
   0EB7 FE                 4161 	mov	r6,a
   0EB8 E5*00              4162 	mov	a,_bp
   0EBA 24 FB              4163 	add	a,#0xfb
   0EBC F8                 4164 	mov	r0,a
   0EBD E5*00              4165 	mov	a,_bp
   0EBF 24 04              4166 	add	a,#0x04
   0EC1 F9                 4167 	mov	r1,a
   0EC2 E6                 4168 	mov	a,@r0
   0EC3 F7                 4169 	mov	@r1,a
   0EC4 08                 4170 	inc	r0
   0EC5 09                 4171 	inc	r1
   0EC6 E6                 4172 	mov	a,@r0
   0EC7 F7                 4173 	mov	@r1,a
   0EC8 08                 4174 	inc	r0
   0EC9 09                 4175 	inc	r1
   0ECA E6                 4176 	mov	a,@r0
   0ECB F7                 4177 	mov	@r1,a
   0ECC E5*00              4178 	mov	a,_bp
   0ECE 24 04              4179 	add	a,#0x04
   0ED0 F8                 4180 	mov	r0,a
   0ED1 86 82              4181 	mov	dpl,@r0
   0ED3 08                 4182 	inc	r0
   0ED4 86 83              4183 	mov	dph,@r0
   0ED6 08                 4184 	inc	r0
   0ED7 86 F0              4185 	mov	b,@r0
   0ED9 12s00r00           4186 	lcall	__gptrget
   0EDC FD                 4187 	mov	r5,a
   0EDD A3                 4188 	inc	dptr
   0EDE 12s00r00           4189 	lcall	__gptrget
   0EE1 FF                 4190 	mov	r7,a
   0EE2 C3                 4191 	clr	c
   0EE3 EC                 4192 	mov	a,r4
   0EE4 9D                 4193 	subb	a,r5
   0EE5 EE                 4194 	mov	a,r6
   0EE6 9F                 4195 	subb	a,r7
   0EE7 40 03              4196 	jc	00115$
   0EE9 02s0Fr2F           4197 	ljmp	00102$
   0EEC                    4198 00115$:
                    0EEC   4199 	C$tasks.c$1636$3$4 ==.
                           4200 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1636: *pxTicksToWait -= ( xTickCount - pxTimeOut->xTimeOnEntering );
   0EEC 90s00r04           4201 	mov	dptr,#_xTickCount
   0EEF E0                 4202 	movx	a,@dptr
   0EF0 FC                 4203 	mov	r4,a
   0EF1 A3                 4204 	inc	dptr
   0EF2 E0                 4205 	movx	a,@dptr
   0EF3 FE                 4206 	mov	r6,a
   0EF4 EC                 4207 	mov	a,r4
   0EF5 C3                 4208 	clr	c
   0EF6 95 02              4209 	subb	a,ar2
   0EF8 FA                 4210 	mov	r2,a
   0EF9 EE                 4211 	mov	a,r6
   0EFA 95 03              4212 	subb	a,ar3
   0EFC FB                 4213 	mov	r3,a
   0EFD ED                 4214 	mov	a,r5
   0EFE C3                 4215 	clr	c
   0EFF 95 02              4216 	subb	a,ar2
   0F01 FA                 4217 	mov	r2,a
   0F02 EF                 4218 	mov	a,r7
   0F03 95 03              4219 	subb	a,ar3
   0F05 FB                 4220 	mov	r3,a
   0F06 E5*00              4221 	mov	a,_bp
   0F08 24 04              4222 	add	a,#0x04
   0F0A F8                 4223 	mov	r0,a
   0F0B 86 82              4224 	mov	dpl,@r0
   0F0D 08                 4225 	inc	r0
   0F0E 86 83              4226 	mov	dph,@r0
   0F10 08                 4227 	inc	r0
   0F11 86 F0              4228 	mov	b,@r0
   0F13 EA                 4229 	mov	a,r2
   0F14 12s00r00           4230 	lcall	__gptrput
   0F17 A3                 4231 	inc	dptr
   0F18 EB                 4232 	mov	a,r3
   0F19 12s00r00           4233 	lcall	__gptrput
                    0F1C   4234 	C$tasks.c$1637$3$4 ==.
                           4235 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1637: vTaskSetTimeOutState( pxTimeOut );
   0F1C A8*00              4236 	mov	r0,_bp
   0F1E 08                 4237 	inc	r0
   0F1F 86 82              4238 	mov	dpl,@r0
   0F21 08                 4239 	inc	r0
   0F22 86 83              4240 	mov	dph,@r0
   0F24 08                 4241 	inc	r0
   0F25 86 F0              4242 	mov	b,@r0
   0F27 12s0DrEE           4243 	lcall	_vTaskSetTimeOutState
                    0F2A   4244 	C$tasks.c$1638$3$4 ==.
                           4245 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1638: xReturn = pdFALSE;
   0F2A 7D 00              4246 	mov	r5,#0x00
   0F2C 02s0Fr31           4247 	ljmp	00106$
   0F2F                    4248 00102$:
                    0F2F   4249 	C$tasks.c$1642$3$5 ==.
                           4250 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1642: xReturn = pdTRUE;
   0F2F 7D 01              4251 	mov	r5,#0x01
   0F31                    4252 00106$:
                    0F31   4253 	C$tasks.c$1645$1$1 ==.
                           4254 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1645: portEXIT_CRITICAL();
   0F31 D0 E0              4255 	 pop ACC 
   0F33 53 E0 80           4256 	anl	_ACC,#0x80
   0F36 E5 E0              4257 	mov	a,_ACC
   0F38 42 A8              4258 	orl	_IE,a
   0F3A D0 E0              4259 	 pop ACC 
                    0F3C   4260 	C$tasks.c$1647$1$1 ==.
                           4261 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1647: return xReturn;
   0F3C 8D 82              4262 	mov	dpl,r5
   0F3E                    4263 00108$:
   0F3E 85*00 81           4264 	mov	sp,_bp
   0F41 D0*00              4265 	pop	_bp
                    0F43   4266 	C$tasks.c$1648$1$1 ==.
                    0F43   4267 	XG$xTaskCheckForTimeOut$0$0 ==.
   0F43 22                 4268 	ret
                           4269 ;------------------------------------------------------------
                           4270 ;Allocation info for local variables in function 'vTaskMissedYield'
                           4271 ;------------------------------------------------------------
                           4272 ;------------------------------------------------------------
                    0F44   4273 	G$vTaskMissedYield$0$0 ==.
                    0F44   4274 	C$tasks.c$1651$1$1 ==.
                           4275 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1651: void vTaskMissedYield( void )
                           4276 ;	-----------------------------------------
                           4277 ;	 function vTaskMissedYield
                           4278 ;	-----------------------------------------
   0F44                    4279 _vTaskMissedYield:
                    0F44   4280 	C$tasks.c$1653$1$1 ==.
                           4281 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1653: xMissedYield = pdTRUE;
   0F44 90s00r0B           4282 	mov	dptr,#_xMissedYield
   0F47 74 01              4283 	mov	a,#0x01
   0F49 F0                 4284 	movx	@dptr,a
   0F4A                    4285 00101$:
                    0F4A   4286 	C$tasks.c$1654$1$1 ==.
                    0F4A   4287 	XG$vTaskMissedYield$0$0 ==.
   0F4A 22                 4288 	ret
                           4289 ;------------------------------------------------------------
                           4290 ;Allocation info for local variables in function 'prvIdleTask'
                           4291 ;------------------------------------------------------------
                           4292 ;pvParameters              Allocated to registers 
                           4293 ;------------------------------------------------------------
                    0F4B   4294 	Ftasks$prvIdleTask$0$0 ==.
                    0F4B   4295 	C$tasks.c$1667$1$1 ==.
                           4296 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1667: static portTASK_FUNCTION( prvIdleTask, pvParameters )
                           4297 ;	-----------------------------------------
                           4298 ;	 function prvIdleTask
                           4299 ;	-----------------------------------------
   0F4B                    4300 _prvIdleTask:
                    0F4B   4301 	C$tasks.c$1670$1$1 ==.
                           4302 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1670: ( void ) pvParameters;
   0F4B                    4303 00104$:
                    0F4B   4304 	C$tasks.c$1675$2$2 ==.
                           4305 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1675: prvCheckTasksWaitingTermination();
   0F4B 12s11r31           4306 	lcall	_prvCheckTasksWaitingTermination
                    0F4E   4307 	C$tasks.c$1698$3$3 ==.
                           4308 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1698: if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   0F4E 90s00r00           4309 	mov	dptr,#_pxReadyTasksLists
   0F51 E0                 4310 	movx	a,@dptr
   0F52 FA                 4311 	mov	r2,a
   0F53 C3                 4312 	clr	c
   0F54 74 01              4313 	mov	a,#0x01
   0F56 9A                 4314 	subb	a,r2
   0F57 40 03              4315 	jc	00110$
   0F59 02s0Fr4B           4316 	ljmp	00104$
   0F5C                    4317 00110$:
                    0F5C   4318 	C$tasks.c$1700$4$4 ==.
                           4319 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1700: taskYIELD();
   0F5C 12s00r00           4320 	lcall	_vPortYield
   0F5F 02s0Fr4B           4321 	ljmp	00104$
   0F62                    4322 00106$:
                    0F62   4323 	C$tasks.c$1718$2$3 ==.
                    0F62   4324 	XFtasks$prvIdleTask$0$0 ==.
   0F62 22                 4325 	ret
                           4326 ;------------------------------------------------------------
                           4327 ;Allocation info for local variables in function 'prvInitialiseTCBVariables'
                           4328 ;------------------------------------------------------------
                           4329 ;pcName                    Allocated to stack - offset -5
                           4330 ;uxPriority                Allocated to stack - offset -6
                           4331 ;pxTCB                     Allocated to stack - offset 1
                           4332 ;------------------------------------------------------------
                    0F63   4333 	Ftasks$prvInitialiseTCBVariables$0$0 ==.
                    0F63   4334 	C$tasks.c$1732$2$3 ==.
                           4335 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1732: static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed portCHAR * const pcName, unsigned portBASE_TYPE uxPriority )
                           4336 ;	-----------------------------------------
                           4337 ;	 function prvInitialiseTCBVariables
                           4338 ;	-----------------------------------------
   0F63                    4339 _prvInitialiseTCBVariables:
   0F63 C0*00              4340 	push	_bp
   0F65 85 81*00           4341 	mov	_bp,sp
   0F68 C0 82              4342 	push	dpl
   0F6A C0 83              4343 	push	dph
   0F6C C0 F0              4344 	push	b
                    0F6E   4345 	C$tasks.c$1735$1$1 ==.
                           4346 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1735: strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned portSHORT ) configMAX_TASK_NAME_LEN );
   0F6E A8*00              4347 	mov	r0,_bp
   0F70 08                 4348 	inc	r0
   0F71 74 23              4349 	mov	a,#0x23
   0F73 26                 4350 	add	a,@r0
   0F74 FD                 4351 	mov	r5,a
   0F75 74 00              4352 	mov	a,#0x00
   0F77 08                 4353 	inc	r0
   0F78 36                 4354 	addc	a,@r0
   0F79 FE                 4355 	mov	r6,a
   0F7A 08                 4356 	inc	r0
   0F7B 86 07              4357 	mov	ar7,@r0
   0F7D 74 08              4358 	mov	a,#0x08
   0F7F C0 E0              4359 	push	acc
   0F81 74 00              4360 	mov	a,#0x00
   0F83 C0 E0              4361 	push	acc
   0F85 E5*00              4362 	mov	a,_bp
   0F87 24 FB              4363 	add	a,#0xfb
   0F89 F8                 4364 	mov	r0,a
   0F8A E6                 4365 	mov	a,@r0
   0F8B C0 E0              4366 	push	acc
   0F8D 08                 4367 	inc	r0
   0F8E E6                 4368 	mov	a,@r0
   0F8F C0 E0              4369 	push	acc
   0F91 08                 4370 	inc	r0
   0F92 E6                 4371 	mov	a,@r0
   0F93 C0 E0              4372 	push	acc
   0F95 8D 82              4373 	mov	dpl,r5
   0F97 8E 83              4374 	mov	dph,r6
   0F99 8F F0              4375 	mov	b,r7
   0F9B 12s00r00           4376 	lcall	_strncpy
   0F9E E5 81              4377 	mov	a,sp
   0FA0 24 FB              4378 	add	a,#0xfb
   0FA2 F5 81              4379 	mov	sp,a
                    0FA4   4380 	C$tasks.c$1736$1$1 ==.
                           4381 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1736: pxTCB->pcTaskName[ ( unsigned portSHORT ) configMAX_TASK_NAME_LEN - ( unsigned portSHORT ) 1 ] = '\0';
   0FA4 A8*00              4382 	mov	r0,_bp
   0FA6 08                 4383 	inc	r0
   0FA7 74 23              4384 	mov	a,#0x23
   0FA9 26                 4385 	add	a,@r0
   0FAA FD                 4386 	mov	r5,a
   0FAB 74 00              4387 	mov	a,#0x00
   0FAD 08                 4388 	inc	r0
   0FAE 36                 4389 	addc	a,@r0
   0FAF FE                 4390 	mov	r6,a
   0FB0 08                 4391 	inc	r0
   0FB1 86 07              4392 	mov	ar7,@r0
   0FB3 74 07              4393 	mov	a,#0x07
   0FB5 25 05              4394 	add	a,ar5
   0FB7 FD                 4395 	mov	r5,a
   0FB8 74 00              4396 	mov	a,#0x00
   0FBA 35 06              4397 	addc	a,ar6
   0FBC FE                 4398 	mov	r6,a
   0FBD 8D 82              4399 	mov	dpl,r5
   0FBF 8E 83              4400 	mov	dph,r6
   0FC1 8F F0              4401 	mov	b,r7
   0FC3 74 00              4402 	mov	a,#0x00
   0FC5 12s00r00           4403 	lcall	__gptrput
                    0FC8   4404 	C$tasks.c$1739$1$1 ==.
                           4405 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1739: if( uxPriority >= configMAX_PRIORITIES )
   0FC8 E5*00              4406 	mov	a,_bp
   0FCA 24 FA              4407 	add	a,#0xfa
   0FCC F8                 4408 	mov	r0,a
   0FCD B6 04 00           4409 	cjne	@r0,#0x04,00106$
   0FD0                    4410 00106$:
   0FD0 50 03              4411 	jnc	00107$
   0FD2 02s0FrDC           4412 	ljmp	00102$
   0FD5                    4413 00107$:
                    0FD5   4414 	C$tasks.c$1741$2$2 ==.
                           4415 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1741: uxPriority = configMAX_PRIORITIES - 1;
   0FD5 E5*00              4416 	mov	a,_bp
   0FD7 24 FA              4417 	add	a,#0xfa
   0FD9 F8                 4418 	mov	r0,a
   0FDA 76 03              4419 	mov	@r0,#0x03
   0FDC                    4420 00102$:
                    0FDC   4421 	C$tasks.c$1744$1$1 ==.
                           4422 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1744: pxTCB->uxPriority = uxPriority;
   0FDC A8*00              4423 	mov	r0,_bp
   0FDE 08                 4424 	inc	r0
   0FDF 74 1F              4425 	mov	a,#0x1F
   0FE1 26                 4426 	add	a,@r0
   0FE2 FD                 4427 	mov	r5,a
   0FE3 74 00              4428 	mov	a,#0x00
   0FE5 08                 4429 	inc	r0
   0FE6 36                 4430 	addc	a,@r0
   0FE7 FE                 4431 	mov	r6,a
   0FE8 08                 4432 	inc	r0
   0FE9 86 07              4433 	mov	ar7,@r0
   0FEB 8D 82              4434 	mov	dpl,r5
   0FED 8E 83              4435 	mov	dph,r6
   0FEF 8F F0              4436 	mov	b,r7
   0FF1 E5*00              4437 	mov	a,_bp
   0FF3 24 FA              4438 	add	a,#0xfa
   0FF5 F8                 4439 	mov	r0,a
   0FF6 E6                 4440 	mov	a,@r0
   0FF7 12s00r00           4441 	lcall	__gptrput
                    0FFA   4442 	C$tasks.c$1751$1$1 ==.
                           4443 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1751: vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   0FFA A8*00              4444 	mov	r0,_bp
   0FFC 08                 4445 	inc	r0
   0FFD 74 03              4446 	mov	a,#0x03
   0FFF 26                 4447 	add	a,@r0
   1000 FD                 4448 	mov	r5,a
   1001 74 00              4449 	mov	a,#0x00
   1003 08                 4450 	inc	r0
   1004 36                 4451 	addc	a,@r0
   1005 FE                 4452 	mov	r6,a
   1006 08                 4453 	inc	r0
   1007 86 07              4454 	mov	ar7,@r0
   1009 8D 82              4455 	mov	dpl,r5
   100B 8E 83              4456 	mov	dph,r6
   100D 8F F0              4457 	mov	b,r7
   100F 12s00r00           4458 	lcall	_vListInitialiseItem
                    1012   4459 	C$tasks.c$1752$1$1 ==.
                           4460 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1752: vListInitialiseItem( &( pxTCB->xEventListItem ) );
   1012 A8*00              4461 	mov	r0,_bp
   1014 08                 4462 	inc	r0
   1015 74 11              4463 	mov	a,#0x11
   1017 26                 4464 	add	a,@r0
   1018 FD                 4465 	mov	r5,a
   1019 74 00              4466 	mov	a,#0x00
   101B 08                 4467 	inc	r0
   101C 36                 4468 	addc	a,@r0
   101D FE                 4469 	mov	r6,a
   101E 08                 4470 	inc	r0
   101F 86 07              4471 	mov	ar7,@r0
   1021 8D 82              4472 	mov	dpl,r5
   1023 8E 83              4473 	mov	dph,r6
   1025 8F F0              4474 	mov	b,r7
   1027 12s00r00           4475 	lcall	_vListInitialiseItem
                    102A   4476 	C$tasks.c$1756$1$1 ==.
                           4477 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1756: listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   102A A8*00              4478 	mov	r0,_bp
   102C 08                 4479 	inc	r0
   102D 74 03              4480 	mov	a,#0x03
   102F 26                 4481 	add	a,@r0
   1030 FD                 4482 	mov	r5,a
   1031 74 00              4483 	mov	a,#0x00
   1033 08                 4484 	inc	r0
   1034 36                 4485 	addc	a,@r0
   1035 FE                 4486 	mov	r6,a
   1036 08                 4487 	inc	r0
   1037 86 07              4488 	mov	ar7,@r0
   1039 74 08              4489 	mov	a,#0x08
   103B 25 05              4490 	add	a,ar5
   103D FD                 4491 	mov	r5,a
   103E 74 00              4492 	mov	a,#0x00
   1040 35 06              4493 	addc	a,ar6
   1042 FE                 4494 	mov	r6,a
   1043 8D 82              4495 	mov	dpl,r5
   1045 8E 83              4496 	mov	dph,r6
   1047 8F F0              4497 	mov	b,r7
   1049 A8*00              4498 	mov	r0,_bp
   104B 08                 4499 	inc	r0
   104C E6                 4500 	mov	a,@r0
   104D 12s00r00           4501 	lcall	__gptrput
   1050 A3                 4502 	inc	dptr
   1051 08                 4503 	inc	r0
   1052 E6                 4504 	mov	a,@r0
   1053 12s00r00           4505 	lcall	__gptrput
   1056 A3                 4506 	inc	dptr
   1057 08                 4507 	inc	r0
   1058 E6                 4508 	mov	a,@r0
   1059 12s00r00           4509 	lcall	__gptrput
                    105C   4510 	C$tasks.c$1759$1$1 ==.
                           4511 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1759: listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   105C A8*00              4512 	mov	r0,_bp
   105E 08                 4513 	inc	r0
   105F 74 11              4514 	mov	a,#0x11
   1061 26                 4515 	add	a,@r0
   1062 FD                 4516 	mov	r5,a
   1063 74 00              4517 	mov	a,#0x00
   1065 08                 4518 	inc	r0
   1066 36                 4519 	addc	a,@r0
   1067 FE                 4520 	mov	r6,a
   1068 08                 4521 	inc	r0
   1069 86 07              4522 	mov	ar7,@r0
   106B E5*00              4523 	mov	a,_bp
   106D 24 FA              4524 	add	a,#0xfa
   106F F8                 4525 	mov	r0,a
   1070 86 02              4526 	mov	ar2,@r0
   1072 7B 00              4527 	mov	r3,#0x00
   1074 74 04              4528 	mov	a,#0x04
   1076 C3                 4529 	clr	c
   1077 95 02              4530 	subb	a,ar2
   1079 FA                 4531 	mov	r2,a
   107A 74 00              4532 	mov	a,#0x00
   107C 95 03              4533 	subb	a,ar3
   107E FB                 4534 	mov	r3,a
   107F 8D 82              4535 	mov	dpl,r5
   1081 8E 83              4536 	mov	dph,r6
   1083 8F F0              4537 	mov	b,r7
   1085 EA                 4538 	mov	a,r2
   1086 12s00r00           4539 	lcall	__gptrput
   1089 A3                 4540 	inc	dptr
   108A EB                 4541 	mov	a,r3
   108B 12s00r00           4542 	lcall	__gptrput
                    108E   4543 	C$tasks.c$1760$1$1 ==.
                           4544 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1760: listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   108E A8*00              4545 	mov	r0,_bp
   1090 08                 4546 	inc	r0
   1091 74 11              4547 	mov	a,#0x11
   1093 26                 4548 	add	a,@r0
   1094 FA                 4549 	mov	r2,a
   1095 74 00              4550 	mov	a,#0x00
   1097 08                 4551 	inc	r0
   1098 36                 4552 	addc	a,@r0
   1099 FB                 4553 	mov	r3,a
   109A 08                 4554 	inc	r0
   109B 86 04              4555 	mov	ar4,@r0
   109D 74 08              4556 	mov	a,#0x08
   109F 25 02              4557 	add	a,ar2
   10A1 FA                 4558 	mov	r2,a
   10A2 74 00              4559 	mov	a,#0x00
   10A4 35 03              4560 	addc	a,ar3
   10A6 FB                 4561 	mov	r3,a
   10A7 8A 82              4562 	mov	dpl,r2
   10A9 8B 83              4563 	mov	dph,r3
   10AB 8C F0              4564 	mov	b,r4
   10AD A8*00              4565 	mov	r0,_bp
   10AF 08                 4566 	inc	r0
   10B0 E6                 4567 	mov	a,@r0
   10B1 12s00r00           4568 	lcall	__gptrput
   10B4 A3                 4569 	inc	dptr
   10B5 08                 4570 	inc	r0
   10B6 E6                 4571 	mov	a,@r0
   10B7 12s00r00           4572 	lcall	__gptrput
   10BA A3                 4573 	inc	dptr
   10BB 08                 4574 	inc	r0
   10BC E6                 4575 	mov	a,@r0
   10BD 12s00r00           4576 	lcall	__gptrput
   10C0                    4577 00103$:
   10C0 85*00 81           4578 	mov	sp,_bp
   10C3 D0*00              4579 	pop	_bp
                    10C5   4580 	C$tasks.c$1773$1$1 ==.
                    10C5   4581 	XFtasks$prvInitialiseTCBVariables$0$0 ==.
   10C5 22                 4582 	ret
                           4583 ;------------------------------------------------------------
                           4584 ;Allocation info for local variables in function 'prvInitialiseTaskLists'
                           4585 ;------------------------------------------------------------
                           4586 ;uxPriority                Allocated to registers r2 
                           4587 ;------------------------------------------------------------
                    10C6   4588 	Ftasks$prvInitialiseTaskLists$0$0 ==.
                    10C6   4589 	C$tasks.c$1776$1$1 ==.
                           4590 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1776: static void prvInitialiseTaskLists( void )
                           4591 ;	-----------------------------------------
                           4592 ;	 function prvInitialiseTaskLists
                           4593 ;	-----------------------------------------
   10C6                    4594 _prvInitialiseTaskLists:
                    10C6   4595 	C$tasks.c$1780$1$1 ==.
                           4596 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1780: for( uxPriority = 0; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   10C6 7A 00              4597 	mov	r2,#0x00
   10C8                    4598 00101$:
   10C8 BA 04 00           4599 	cjne	r2,#0x04,00110$
   10CB                    4600 00110$:
   10CB 40 03              4601 	jc	00111$
   10CD 02s10rF0           4602 	ljmp	00104$
   10D0                    4603 00111$:
                    10D0   4604 	C$tasks.c$1782$2$2 ==.
                           4605 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1782: vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   10D0 EA                 4606 	mov	a,r2
   10D1 75 F0 0C           4607 	mov	b,#0x0C
   10D4 A4                 4608 	mul	ab
   10D5 24r00              4609 	add	a,#_pxReadyTasksLists
   10D7 FB                 4610 	mov	r3,a
   10D8 74s00              4611 	mov	a,#(_pxReadyTasksLists >> 8)
   10DA 34 00              4612 	addc	a,#0x00
   10DC FC                 4613 	mov	r4,a
   10DD 7D 00              4614 	mov	r5,#0x00
   10DF 8B 82              4615 	mov	dpl,r3
   10E1 8C 83              4616 	mov	dph,r4
   10E3 8D F0              4617 	mov	b,r5
   10E5 C0 02              4618 	push	ar2
   10E7 12s00r00           4619 	lcall	_vListInitialise
   10EA D0 02              4620 	pop	ar2
                    10EC   4621 	C$tasks.c$1780$1$1 ==.
                           4622 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1780: for( uxPriority = 0; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   10EC 0A                 4623 	inc	r2
   10ED 02s10rC8           4624 	ljmp	00101$
   10F0                    4625 00104$:
                    10F0   4626 	C$tasks.c$1785$1$1 ==.
                           4627 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1785: vListInitialise( ( xList * ) &xDelayedTaskList1 );
   10F0 75 82r30           4628 	mov	dpl,#_xDelayedTaskList1
   10F3 75 83s00           4629 	mov	dph,#(_xDelayedTaskList1 >> 8)
   10F6 75 F0 00           4630 	mov	b,#0x00
   10F9 12s00r00           4631 	lcall	_vListInitialise
                    10FC   4632 	C$tasks.c$1786$1$1 ==.
                           4633 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1786: vListInitialise( ( xList * ) &xDelayedTaskList2 );
   10FC 75 82r3C           4634 	mov	dpl,#_xDelayedTaskList2
   10FF 75 83s00           4635 	mov	dph,#(_xDelayedTaskList2 >> 8)
   1102 75 F0 00           4636 	mov	b,#0x00
   1105 12s00r00           4637 	lcall	_vListInitialise
                    1108   4638 	C$tasks.c$1787$1$1 ==.
                           4639 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1787: vListInitialise( ( xList * ) &xPendingReadyList );
   1108 75 82r4E           4640 	mov	dpl,#_xPendingReadyList
   110B 75 83s00           4641 	mov	dph,#(_xPendingReadyList >> 8)
   110E 75 F0 00           4642 	mov	b,#0x00
   1111 12s00r00           4643 	lcall	_vListInitialise
                    1114   4644 	C$tasks.c$1803$1$1 ==.
                           4645 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1803: pxDelayedTaskList = &xDelayedTaskList1;
   1114 90s00r48           4646 	mov	dptr,#_pxDelayedTaskList
   1117 74r30              4647 	mov	a,#_xDelayedTaskList1
   1119 F0                 4648 	movx	@dptr,a
   111A A3                 4649 	inc	dptr
   111B 74s00              4650 	mov	a,#(_xDelayedTaskList1 >> 8)
   111D F0                 4651 	movx	@dptr,a
   111E A3                 4652 	inc	dptr
   111F 74 00              4653 	mov	a,#0x00
   1121 F0                 4654 	movx	@dptr,a
                    1122   4655 	C$tasks.c$1804$1$1 ==.
                           4656 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1804: pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1122 90s00r4B           4657 	mov	dptr,#_pxOverflowDelayedTaskList
   1125 74r3C              4658 	mov	a,#_xDelayedTaskList2
   1127 F0                 4659 	movx	@dptr,a
   1128 A3                 4660 	inc	dptr
   1129 74s00              4661 	mov	a,#(_xDelayedTaskList2 >> 8)
   112B F0                 4662 	movx	@dptr,a
   112C A3                 4663 	inc	dptr
   112D 74 00              4664 	mov	a,#0x00
   112F F0                 4665 	movx	@dptr,a
   1130                    4666 00105$:
                    1130   4667 	C$tasks.c$1805$1$1 ==.
                    1130   4668 	XFtasks$prvInitialiseTaskLists$0$0 ==.
   1130 22                 4669 	ret
                           4670 ;------------------------------------------------------------
                           4671 ;Allocation info for local variables in function 'prvCheckTasksWaitingTermination'
                           4672 ;------------------------------------------------------------
                           4673 ;------------------------------------------------------------
                    1131   4674 	Ftasks$prvCheckTasksWaitingTermination$0$0 ==.
                    1131   4675 	C$tasks.c$1808$1$1 ==.
                           4676 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1808: static void prvCheckTasksWaitingTermination( void )
                           4677 ;	-----------------------------------------
                           4678 ;	 function prvCheckTasksWaitingTermination
                           4679 ;	-----------------------------------------
   1131                    4680 _prvCheckTasksWaitingTermination:
                    1131   4681 	C$tasks.c$1840$1$1 ==.
                           4682 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1840: }
   1131                    4683 00101$:
                    1131   4684 	C$tasks.c$1840$1$1 ==.
                    1131   4685 	XFtasks$prvCheckTasksWaitingTermination$0$0 ==.
   1131 22                 4686 	ret
                           4687 ;------------------------------------------------------------
                           4688 ;Allocation info for local variables in function 'prvAllocateTCBAndStack'
                           4689 ;------------------------------------------------------------
                           4690 ;usStackDepth              Allocated to stack - offset 1
                           4691 ;pxNewTCB                  Allocated to stack - offset 3
                           4692 ;------------------------------------------------------------
                    1132   4693 	Ftasks$prvAllocateTCBAndStack$0$0 ==.
                    1132   4694 	C$tasks.c$1843$1$1 ==.
                           4695 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1843: static tskTCB *prvAllocateTCBAndStack( unsigned portSHORT usStackDepth )
                           4696 ;	-----------------------------------------
                           4697 ;	 function prvAllocateTCBAndStack
                           4698 ;	-----------------------------------------
   1132                    4699 _prvAllocateTCBAndStack:
   1132 C0*00              4700 	push	_bp
   1134 85 81*00           4701 	mov	_bp,sp
   1137 C0 82              4702 	push	dpl
   1139 C0 83              4703 	push	dph
   113B 05 81              4704 	inc	sp
   113D 05 81              4705 	inc	sp
   113F 05 81              4706 	inc	sp
                    1141   4707 	C$tasks.c$1849$1$1 ==.
                           4708 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1849: pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   1141 75 82 2B           4709 	mov	dpl,#0x2B
   1144 75 83 00           4710 	mov	dph,#0x00
   1147 12s00r00           4711 	lcall	_pvPortMalloc
   114A AC 82              4712 	mov	r4,dpl
   114C AD 83              4713 	mov	r5,dph
   114E AE F0              4714 	mov	r6,b
   1150 A8*00              4715 	mov	r0,_bp
   1152 08                 4716 	inc	r0
   1153 08                 4717 	inc	r0
   1154 08                 4718 	inc	r0
   1155 A6 04              4719 	mov	@r0,ar4
   1157 08                 4720 	inc	r0
   1158 A6 05              4721 	mov	@r0,ar5
   115A 08                 4722 	inc	r0
   115B A6 06              4723 	mov	@r0,ar6
                    115D   4724 	C$tasks.c$1851$1$1 ==.
                           4725 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1851: if( pxNewTCB != NULL )
   115D A8*00              4726 	mov	r0,_bp
   115F 08                 4727 	inc	r0
   1160 08                 4728 	inc	r0
   1161 08                 4729 	inc	r0
   1162 B6 00 0B           4730 	cjne	@r0,#0x00,00110$
   1165 08                 4731 	inc	r0
   1166 B6 00 07           4732 	cjne	@r0,#0x00,00110$
   1169 08                 4733 	inc	r0
   116A B6 00 03           4734 	cjne	@r0,#0x00,00110$
   116D 02s12r10           4735 	ljmp	00105$
   1170                    4736 00110$:
                    1170   4737 	C$tasks.c$1856$2$2 ==.
                           4738 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1856: pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMalloc( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) );
   1170 A8*00              4739 	mov	r0,_bp
   1172 08                 4740 	inc	r0
   1173 08                 4741 	inc	r0
   1174 08                 4742 	inc	r0
   1175 74 20              4743 	mov	a,#0x20
   1177 26                 4744 	add	a,@r0
   1178 FF                 4745 	mov	r7,a
   1179 74 00              4746 	mov	a,#0x00
   117B 08                 4747 	inc	r0
   117C 36                 4748 	addc	a,@r0
   117D FA                 4749 	mov	r2,a
   117E 08                 4750 	inc	r0
   117F 86 03              4751 	mov	ar3,@r0
   1181 A8*00              4752 	mov	r0,_bp
   1183 08                 4753 	inc	r0
   1184 86 82              4754 	mov	dpl,@r0
   1186 08                 4755 	inc	r0
   1187 86 83              4756 	mov	dph,@r0
   1189 C0 02              4757 	push	ar2
   118B C0 03              4758 	push	ar3
   118D C0 07              4759 	push	ar7
   118F 12s00r00           4760 	lcall	_pvPortMalloc
   1192 AC 82              4761 	mov	r4,dpl
   1194 AD 83              4762 	mov	r5,dph
   1196 AE F0              4763 	mov	r6,b
   1198 D0 07              4764 	pop	ar7
   119A D0 03              4765 	pop	ar3
   119C D0 02              4766 	pop	ar2
   119E 8F 82              4767 	mov	dpl,r7
   11A0 8A 83              4768 	mov	dph,r2
   11A2 8B F0              4769 	mov	b,r3
   11A4 EC                 4770 	mov	a,r4
   11A5 12s00r00           4771 	lcall	__gptrput
   11A8 A3                 4772 	inc	dptr
   11A9 ED                 4773 	mov	a,r5
   11AA 12s00r00           4774 	lcall	__gptrput
   11AD A3                 4775 	inc	dptr
   11AE EE                 4776 	mov	a,r6
   11AF 12s00r00           4777 	lcall	__gptrput
                    11B2   4778 	C$tasks.c$1858$2$2 ==.
                           4779 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1858: if( pxNewTCB->pxStack == NULL )
   11B2 BC 00 08           4780 	cjne	r4,#0x00,00111$
   11B5 BD 00 05           4781 	cjne	r5,#0x00,00111$
   11B8 BE 00 02           4782 	cjne	r6,#0x00,00111$
   11BB 80 03              4783 	sjmp	00112$
   11BD                    4784 00111$:
   11BD 02s11rDF           4785 	ljmp	00102$
   11C0                    4786 00112$:
                    11C0   4787 	C$tasks.c$1861$3$3 ==.
                           4788 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1861: vPortFree( pxNewTCB );			
   11C0 A8*00              4789 	mov	r0,_bp
   11C2 08                 4790 	inc	r0
   11C3 08                 4791 	inc	r0
   11C4 08                 4792 	inc	r0
   11C5 86 82              4793 	mov	dpl,@r0
   11C7 08                 4794 	inc	r0
   11C8 86 83              4795 	mov	dph,@r0
   11CA 08                 4796 	inc	r0
   11CB 86 F0              4797 	mov	b,@r0
   11CD 12s00r00           4798 	lcall	_vPortFree
                    11D0   4799 	C$tasks.c$1862$3$3 ==.
                           4800 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1862: pxNewTCB = NULL;			
   11D0 A8*00              4801 	mov	r0,_bp
   11D2 08                 4802 	inc	r0
   11D3 08                 4803 	inc	r0
   11D4 08                 4804 	inc	r0
   11D5 E4                 4805 	clr	a
   11D6 F6                 4806 	mov	@r0,a
   11D7 08                 4807 	inc	r0
   11D8 F6                 4808 	mov	@r0,a
   11D9 08                 4809 	inc	r0
   11DA 76 00              4810 	mov	@r0,#0x00
   11DC 02s12r10           4811 	ljmp	00105$
   11DF                    4812 00102$:
                    11DF   4813 	C$tasks.c$1867$3$4 ==.
                           4814 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1867: memset( pxNewTCB->pxStack, tskSTACK_FILL_BYTE, usStackDepth * sizeof( portSTACK_TYPE ) );
   11DF 8F 82              4815 	mov	dpl,r7
   11E1 8A 83              4816 	mov	dph,r2
   11E3 8B F0              4817 	mov	b,r3
   11E5 12s00r00           4818 	lcall	__gptrget
   11E8 FF                 4819 	mov	r7,a
   11E9 A3                 4820 	inc	dptr
   11EA 12s00r00           4821 	lcall	__gptrget
   11ED FA                 4822 	mov	r2,a
   11EE A3                 4823 	inc	dptr
   11EF 12s00r00           4824 	lcall	__gptrget
   11F2 FB                 4825 	mov	r3,a
   11F3 A8*00              4826 	mov	r0,_bp
   11F5 08                 4827 	inc	r0
   11F6 E6                 4828 	mov	a,@r0
   11F7 C0 E0              4829 	push	acc
   11F9 08                 4830 	inc	r0
   11FA E6                 4831 	mov	a,@r0
   11FB C0 E0              4832 	push	acc
   11FD 74 A5              4833 	mov	a,#0xA5
   11FF C0 E0              4834 	push	acc
   1201 8F 82              4835 	mov	dpl,r7
   1203 8A 83              4836 	mov	dph,r2
   1205 8B F0              4837 	mov	b,r3
   1207 12s00r00           4838 	lcall	_memset
   120A 15 81              4839 	dec	sp
   120C 15 81              4840 	dec	sp
   120E 15 81              4841 	dec	sp
   1210                    4842 00105$:
                    1210   4843 	C$tasks.c$1871$1$1 ==.
                           4844 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\tasks.c:1871: return pxNewTCB;
   1210 A8*00              4845 	mov	r0,_bp
   1212 08                 4846 	inc	r0
   1213 08                 4847 	inc	r0
   1214 08                 4848 	inc	r0
   1215 86 82              4849 	mov	dpl,@r0
   1217 08                 4850 	inc	r0
   1218 86 83              4851 	mov	dph,@r0
   121A 08                 4852 	inc	r0
   121B 86 F0              4853 	mov	b,@r0
   121D                    4854 00106$:
   121D 85*00 81           4855 	mov	sp,_bp
   1220 D0*00              4856 	pop	_bp
                    1222   4857 	C$tasks.c$1872$1$1 ==.
                    1222   4858 	XFtasks$prvAllocateTCBAndStack$0$0 ==.
   1222 22                 4859 	ret
                           4860 	.area CSEG    (CODE)
                           4861 	.area CONST   (CODE)
                    0000   4862 Ftasks$_str_0$0$0 == .
   0000                    4863 __str_0:
   0000 49 44 4C 45        4864 	.ascii "IDLE"
   0004 00                 4865 	.db 0x00
                           4866 	.area XINIT   (CODE)
                    0000   4867 Ftasks$__xinit_pxCurrentTCB$0$0 == .
   0000                    4868 __xinit__pxCurrentTCB:
                           4869 ; generic printIvalPtr
   0000 00 00 00           4870 	.byte #0x00,#0x00,#0x00
                    0003   4871 Ftasks$__xinit_uxCurrentNumberOfTasks$0$0 == .
   0003                    4872 __xinit__uxCurrentNumberOfTasks:
   0003 00                 4873 	.db #0x00
                    0004   4874 Ftasks$__xinit_xTickCount$0$0 == .
   0004                    4875 __xinit__xTickCount:
   0004 00 00              4876 	.byte #0x00,#0x00
                    0006   4877 Ftasks$__xinit_uxTopUsedPriority$0$0 == .
   0006                    4878 __xinit__uxTopUsedPriority:
   0006 00                 4879 	.db #0x00
                    0007   4880 Ftasks$__xinit_uxTopReadyPriority$0$0 == .
   0007                    4881 __xinit__uxTopReadyPriority:
   0007 00                 4882 	.db #0x00
                    0008   4883 Ftasks$__xinit_xSchedulerRunning$0$0 == .
   0008                    4884 __xinit__xSchedulerRunning:
   0008 00                 4885 	.db #0x00
                    0009   4886 Ftasks$__xinit_uxSchedulerSuspended$0$0 == .
   0009                    4887 __xinit__uxSchedulerSuspended:
   0009 00                 4888 	.db #0x00
                    000A   4889 Ftasks$__xinit_uxMissedTicks$0$0 == .
   000A                    4890 __xinit__uxMissedTicks:
   000A 00                 4891 	.db #0x00
                    000B   4892 Ftasks$__xinit_xMissedYield$0$0 == .
   000B                    4893 __xinit__xMissedYield:
   000B 00                 4894 	.db #0x00
                    000C   4895 Ftasks$__xinit_xNumOfOverflows$0$0 == .
   000C                    4896 __xinit__xNumOfOverflows:
   000C 00                 4897 	.db #0x00
                           4898 	.area CABS    (ABS,CODE)
