                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.8.0 #5117 (Mar 23 2008) (MINGW32)
                              4 ; This file was generated Fri Jun 17 15:10:27 2016
                              5 ;--------------------------------------------------------
                              6 	.module queue
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _AB4_LED2
                             13 	.globl _AB4_LED1
                             14 	.globl _AB4_SW2
                             15 	.globl _AB4_SW1
                             16 	.globl _SW2
                             17 	.globl _LED
                             18 	.globl _P7_7
                             19 	.globl _P7_6
                             20 	.globl _P7_5
                             21 	.globl _P7_4
                             22 	.globl _P7_3
                             23 	.globl _P7_2
                             24 	.globl _P7_1
                             25 	.globl _P7_0
                             26 	.globl _SPIF
                             27 	.globl _WCOL
                             28 	.globl _MODF
                             29 	.globl _RXOVRN
                             30 	.globl _NSSMD1
                             31 	.globl _NSSMD0
                             32 	.globl _TXBMT
                             33 	.globl _SPIEN
                             34 	.globl _P6_7
                             35 	.globl _P6_6
                             36 	.globl _P6_5
                             37 	.globl _P6_4
                             38 	.globl _P6_3
                             39 	.globl _P6_2
                             40 	.globl _P6_1
                             41 	.globl _P6_0
                             42 	.globl _AD2EN
                             43 	.globl _AD2TM
                             44 	.globl _AD2INT
                             45 	.globl _AD2BUSY
                             46 	.globl _AD2CM2
                             47 	.globl _AD2CM1
                             48 	.globl _AD2CM0
                             49 	.globl _AD2WINT
                             50 	.globl _AD0EN
                             51 	.globl _AD0TM
                             52 	.globl _AD0INT
                             53 	.globl _AD0BUSY
                             54 	.globl _AD0CM1
                             55 	.globl _AD0CM0
                             56 	.globl _AD0WINT
                             57 	.globl _AD0LJST
                             58 	.globl _P5_7
                             59 	.globl _P5_6
                             60 	.globl _P5_5
                             61 	.globl _P5_4
                             62 	.globl _P5_3
                             63 	.globl _P5_2
                             64 	.globl _P5_1
                             65 	.globl _P5_0
                             66 	.globl _CF
                             67 	.globl _CR
                             68 	.globl _CCF5
                             69 	.globl _CCF4
                             70 	.globl _CCF3
                             71 	.globl _CCF2
                             72 	.globl _CCF1
                             73 	.globl _CCF0
                             74 	.globl _CY
                             75 	.globl _AC
                             76 	.globl _F0
                             77 	.globl _RS1
                             78 	.globl _RS0
                             79 	.globl _OV
                             80 	.globl _F1
                             81 	.globl _P
                             82 	.globl _P4_7
                             83 	.globl _P4_6
                             84 	.globl _P4_5
                             85 	.globl _P4_4
                             86 	.globl _P4_3
                             87 	.globl _P4_2
                             88 	.globl _P4_1
                             89 	.globl _P4_0
                             90 	.globl _TF4
                             91 	.globl _EXF4
                             92 	.globl _EXEN4
                             93 	.globl _TR4
                             94 	.globl _CT4
                             95 	.globl _CPRL4
                             96 	.globl _TF3
                             97 	.globl _EXF3
                             98 	.globl _EXEN3
                             99 	.globl _TR3
                            100 	.globl _CT3
                            101 	.globl _CPRL3
                            102 	.globl _TF2
                            103 	.globl _EXF2
                            104 	.globl _EXEN2
                            105 	.globl _TR2
                            106 	.globl _CT2
                            107 	.globl _CPRL2
                            108 	.globl _MAC0HO
                            109 	.globl _MAC0Z
                            110 	.globl _MAC0SO
                            111 	.globl _MAC0N
                            112 	.globl _BUSY
                            113 	.globl _ENSMB
                            114 	.globl _STA
                            115 	.globl _STO
                            116 	.globl _SI
                            117 	.globl _AA
                            118 	.globl _SMBFTE
                            119 	.globl _SMBTOE
                            120 	.globl _PT2
                            121 	.globl _PS
                            122 	.globl _PS0
                            123 	.globl _PT1
                            124 	.globl _PX1
                            125 	.globl _PT0
                            126 	.globl _PX0
                            127 	.globl _P3_7
                            128 	.globl _P3_6
                            129 	.globl _P3_5
                            130 	.globl _P3_4
                            131 	.globl _P3_3
                            132 	.globl _P3_2
                            133 	.globl _P3_1
                            134 	.globl _P3_0
                            135 	.globl _EA
                            136 	.globl _ET2
                            137 	.globl _ES
                            138 	.globl _ES0
                            139 	.globl _ET1
                            140 	.globl _EX1
                            141 	.globl _ET0
                            142 	.globl _EX0
                            143 	.globl _P2_7
                            144 	.globl _P2_6
                            145 	.globl _P2_5
                            146 	.globl _P2_4
                            147 	.globl _P2_3
                            148 	.globl _P2_2
                            149 	.globl _P2_1
                            150 	.globl _P2_0
                            151 	.globl _S1MODE
                            152 	.globl _MCE1
                            153 	.globl _REN1
                            154 	.globl _TB81
                            155 	.globl _RB81
                            156 	.globl _TI1
                            157 	.globl _RI1
                            158 	.globl _SM00
                            159 	.globl _SM10
                            160 	.globl _SM20
                            161 	.globl _REN
                            162 	.globl _REN0
                            163 	.globl _TB80
                            164 	.globl _RB80
                            165 	.globl _TI
                            166 	.globl _TI0
                            167 	.globl _RI
                            168 	.globl _RI0
                            169 	.globl _P1_7
                            170 	.globl _P1_6
                            171 	.globl _P1_5
                            172 	.globl _P1_4
                            173 	.globl _P1_3
                            174 	.globl _P1_2
                            175 	.globl _P1_1
                            176 	.globl _P1_0
                            177 	.globl _FLHBUSY
                            178 	.globl _CP1EN
                            179 	.globl _CP1OUT
                            180 	.globl _CP1RIF
                            181 	.globl _CP1FIF
                            182 	.globl _CP1HYP1
                            183 	.globl _CP1HYP0
                            184 	.globl _CP1HYN1
                            185 	.globl _CP1HYN0
                            186 	.globl _CP0EN
                            187 	.globl _CP0OUT
                            188 	.globl _CP0RIF
                            189 	.globl _CP0FIF
                            190 	.globl _CP0HYP1
                            191 	.globl _CP0HYP0
                            192 	.globl _CP0HYN1
                            193 	.globl _CP0HYN0
                            194 	.globl _TF1
                            195 	.globl _TR1
                            196 	.globl _TF0
                            197 	.globl _TR0
                            198 	.globl _IE1
                            199 	.globl _IT1
                            200 	.globl _IE0
                            201 	.globl _IT0
                            202 	.globl _P0_7
                            203 	.globl _P0_6
                            204 	.globl _P0_5
                            205 	.globl _P0_4
                            206 	.globl _P0_3
                            207 	.globl _P0_2
                            208 	.globl _P0_1
                            209 	.globl _P0_0
                            210 	.globl _MAC0RND
                            211 	.globl _MAC0ACC
                            212 	.globl _MAC0A
                            213 	.globl _RCAP4
                            214 	.globl _TMR4
                            215 	.globl _DAC1
                            216 	.globl _RCAP3
                            217 	.globl _TMR3
                            218 	.globl _PCA0CP5
                            219 	.globl _PCA0CP4
                            220 	.globl _PCA0CP3
                            221 	.globl _PCA0CP2
                            222 	.globl _PCA0CP1
                            223 	.globl _PCA0CP0
                            224 	.globl _PCA0
                            225 	.globl _DAC0
                            226 	.globl _ADC0LT
                            227 	.globl _ADC0GT
                            228 	.globl _ADC0
                            229 	.globl _RCAP2
                            230 	.globl _TMR2
                            231 	.globl _TMR1
                            232 	.globl _TMR0
                            233 	.globl _P7
                            234 	.globl _P6
                            235 	.globl _XBR2
                            236 	.globl _XBR1
                            237 	.globl _XBR0
                            238 	.globl _P5
                            239 	.globl _P4
                            240 	.globl _FLACL
                            241 	.globl _P1MDIN
                            242 	.globl _P3MDOUT
                            243 	.globl _P2MDOUT
                            244 	.globl _P1MDOUT
                            245 	.globl _P0MDOUT
                            246 	.globl _CCH0LC
                            247 	.globl _CCH0TN
                            248 	.globl _CCH0CN
                            249 	.globl _P7MDOUT
                            250 	.globl _P6MDOUT
                            251 	.globl _P5MDOUT
                            252 	.globl _P4MDOUT
                            253 	.globl _CCH0MA
                            254 	.globl _CLKSEL
                            255 	.globl _SFRPGCN
                            256 	.globl _PLL0FLT
                            257 	.globl _PLL0MUL
                            258 	.globl _PLL0DIV
                            259 	.globl _OSCXCN
                            260 	.globl _OSCICL
                            261 	.globl _OSCICN
                            262 	.globl _PLL0CN
                            263 	.globl _FLSTAT
                            264 	.globl _MAC0RNDH
                            265 	.globl _MAC0RNDL
                            266 	.globl _MAC0CF
                            267 	.globl _MAC0AH
                            268 	.globl _MAC0AL
                            269 	.globl _MAC0STA
                            270 	.globl _MAC0OVR
                            271 	.globl _MAC0ACC3
                            272 	.globl _MAC0ACC2
                            273 	.globl _MAC0ACC1
                            274 	.globl _MAC0ACC0
                            275 	.globl _MAC0BH
                            276 	.globl _MAC0BL
                            277 	.globl _ADC2CN
                            278 	.globl _TMR4H
                            279 	.globl _TMR4L
                            280 	.globl _RCAP4H
                            281 	.globl _RCAP4L
                            282 	.globl _TMR4CF
                            283 	.globl _TMR4CN
                            284 	.globl _ADC2LT
                            285 	.globl _ADC2GT
                            286 	.globl _ADC2
                            287 	.globl _ADC2CF
                            288 	.globl _AMX2SL
                            289 	.globl _AMX2CF
                            290 	.globl _CPT1MD
                            291 	.globl _CPT1CN
                            292 	.globl _DAC1CN
                            293 	.globl _DAC1H
                            294 	.globl _DAC1L
                            295 	.globl _TMR3H
                            296 	.globl _TMR3L
                            297 	.globl _RCAP3H
                            298 	.globl _RCAP3L
                            299 	.globl _TMR3CF
                            300 	.globl _TMR3CN
                            301 	.globl _SBUF1
                            302 	.globl _SCON1
                            303 	.globl _CPT0MD
                            304 	.globl _CPT0CN
                            305 	.globl _PCA0CPH1
                            306 	.globl _PCA0CPL1
                            307 	.globl _PCA0CPH0
                            308 	.globl _PCA0CPL0
                            309 	.globl _PCA0H
                            310 	.globl _PCA0L
                            311 	.globl _SPI0CN
                            312 	.globl _RSTSRC
                            313 	.globl _PCA0CPH4
                            314 	.globl _PCA0CPL4
                            315 	.globl _PCA0CPH3
                            316 	.globl _PCA0CPL3
                            317 	.globl _PCA0CPH2
                            318 	.globl _PCA0CPL2
                            319 	.globl _ADC0CN
                            320 	.globl _PCA0CPH5
                            321 	.globl _PCA0CPL5
                            322 	.globl _PCA0CPM5
                            323 	.globl _PCA0CPM4
                            324 	.globl _PCA0CPM3
                            325 	.globl _PCA0CPM2
                            326 	.globl _PCA0CPM1
                            327 	.globl _PCA0CPM0
                            328 	.globl _PCA0MD
                            329 	.globl _PCA0CN
                            330 	.globl _DAC0CN
                            331 	.globl _DAC0H
                            332 	.globl _DAC0L
                            333 	.globl _REF0CN
                            334 	.globl _SMB0CR
                            335 	.globl _TH2
                            336 	.globl _TMR2H
                            337 	.globl _TL2
                            338 	.globl _TMR2L
                            339 	.globl _RCAP2H
                            340 	.globl _RCAP2L
                            341 	.globl _TMR2CF
                            342 	.globl _TMR2CN
                            343 	.globl _ADC0LTH
                            344 	.globl _ADC0LTL
                            345 	.globl _ADC0GTH
                            346 	.globl _ADC0GTL
                            347 	.globl _SMB0ADR
                            348 	.globl _SMB0DAT
                            349 	.globl _SMB0STA
                            350 	.globl _SMB0CN
                            351 	.globl _ADC0H
                            352 	.globl _ADC0L
                            353 	.globl _ADC0CF
                            354 	.globl _AMX0SL
                            355 	.globl _AMX0CF
                            356 	.globl _SADEN0
                            357 	.globl _FLSCL
                            358 	.globl _SADDR0
                            359 	.globl _EMI0CF
                            360 	.globl __XPAGE
                            361 	.globl _EMI0CN
                            362 	.globl _EMI0TC
                            363 	.globl _SPI0CKR
                            364 	.globl _SPI0DAT
                            365 	.globl _SPI0CFG
                            366 	.globl _SBUF
                            367 	.globl _SBUF0
                            368 	.globl _SCON
                            369 	.globl _SCON0
                            370 	.globl _SSTA0
                            371 	.globl _PSCTL
                            372 	.globl _CKCON
                            373 	.globl _TH1
                            374 	.globl _TH0
                            375 	.globl _TL1
                            376 	.globl _TL0
                            377 	.globl _TMOD
                            378 	.globl _TCON
                            379 	.globl _WDTCN
                            380 	.globl _EIP2
                            381 	.globl _EIP1
                            382 	.globl _B
                            383 	.globl _EIE2
                            384 	.globl _EIE1
                            385 	.globl _ACC
                            386 	.globl _PSW
                            387 	.globl _IP
                            388 	.globl _PSBANK
                            389 	.globl _P3
                            390 	.globl _IE
                            391 	.globl _P2
                            392 	.globl _P1
                            393 	.globl _PCON
                            394 	.globl _SFRLAST
                            395 	.globl _SFRNEXT
                            396 	.globl _SFRPAGE
                            397 	.globl _DPH
                            398 	.globl _DPL
                            399 	.globl _SP
                            400 	.globl _P0
                            401 	.globl _xQueueCreate
                            402 	.globl _xQueueGenericSend
                            403 	.globl _xQueueGenericSendFromISR
                            404 	.globl _xQueueGenericReceive
                            405 	.globl _xQueueReceiveFromISR
                            406 	.globl _uxQueueMessagesWaiting
                            407 	.globl _uxQueueMessagesWaitingFromISR
                            408 	.globl _vQueueDelete
                            409 	.globl _xQueueIsQueueEmptyFromISR
                            410 	.globl _xQueueIsQueueFullFromISR
                            411 ;--------------------------------------------------------
                            412 ; special function registers
                            413 ;--------------------------------------------------------
                            414 	.area RSEG    (DATA)
                    0080    415 G$P0$0$0 == 0x0080
                    0080    416 _P0	=	0x0080
                    0081    417 G$SP$0$0 == 0x0081
                    0081    418 _SP	=	0x0081
                    0082    419 G$DPL$0$0 == 0x0082
                    0082    420 _DPL	=	0x0082
                    0083    421 G$DPH$0$0 == 0x0083
                    0083    422 _DPH	=	0x0083
                    0084    423 G$SFRPAGE$0$0 == 0x0084
                    0084    424 _SFRPAGE	=	0x0084
                    0085    425 G$SFRNEXT$0$0 == 0x0085
                    0085    426 _SFRNEXT	=	0x0085
                    0086    427 G$SFRLAST$0$0 == 0x0086
                    0086    428 _SFRLAST	=	0x0086
                    0087    429 G$PCON$0$0 == 0x0087
                    0087    430 _PCON	=	0x0087
                    0090    431 G$P1$0$0 == 0x0090
                    0090    432 _P1	=	0x0090
                    00A0    433 G$P2$0$0 == 0x00a0
                    00A0    434 _P2	=	0x00a0
                    00A8    435 G$IE$0$0 == 0x00a8
                    00A8    436 _IE	=	0x00a8
                    00B0    437 G$P3$0$0 == 0x00b0
                    00B0    438 _P3	=	0x00b0
                    00B1    439 G$PSBANK$0$0 == 0x00b1
                    00B1    440 _PSBANK	=	0x00b1
                    00B8    441 G$IP$0$0 == 0x00b8
                    00B8    442 _IP	=	0x00b8
                    00D0    443 G$PSW$0$0 == 0x00d0
                    00D0    444 _PSW	=	0x00d0
                    00E0    445 G$ACC$0$0 == 0x00e0
                    00E0    446 _ACC	=	0x00e0
                    00E6    447 G$EIE1$0$0 == 0x00e6
                    00E6    448 _EIE1	=	0x00e6
                    00E7    449 G$EIE2$0$0 == 0x00e7
                    00E7    450 _EIE2	=	0x00e7
                    00F0    451 G$B$0$0 == 0x00f0
                    00F0    452 _B	=	0x00f0
                    00F6    453 G$EIP1$0$0 == 0x00f6
                    00F6    454 _EIP1	=	0x00f6
                    00F7    455 G$EIP2$0$0 == 0x00f7
                    00F7    456 _EIP2	=	0x00f7
                    00FF    457 G$WDTCN$0$0 == 0x00ff
                    00FF    458 _WDTCN	=	0x00ff
                    0088    459 G$TCON$0$0 == 0x0088
                    0088    460 _TCON	=	0x0088
                    0089    461 G$TMOD$0$0 == 0x0089
                    0089    462 _TMOD	=	0x0089
                    008A    463 G$TL0$0$0 == 0x008a
                    008A    464 _TL0	=	0x008a
                    008B    465 G$TL1$0$0 == 0x008b
                    008B    466 _TL1	=	0x008b
                    008C    467 G$TH0$0$0 == 0x008c
                    008C    468 _TH0	=	0x008c
                    008D    469 G$TH1$0$0 == 0x008d
                    008D    470 _TH1	=	0x008d
                    008E    471 G$CKCON$0$0 == 0x008e
                    008E    472 _CKCON	=	0x008e
                    008F    473 G$PSCTL$0$0 == 0x008f
                    008F    474 _PSCTL	=	0x008f
                    0091    475 G$SSTA0$0$0 == 0x0091
                    0091    476 _SSTA0	=	0x0091
                    0098    477 G$SCON0$0$0 == 0x0098
                    0098    478 _SCON0	=	0x0098
                    0098    479 G$SCON$0$0 == 0x0098
                    0098    480 _SCON	=	0x0098
                    0099    481 G$SBUF0$0$0 == 0x0099
                    0099    482 _SBUF0	=	0x0099
                    0099    483 G$SBUF$0$0 == 0x0099
                    0099    484 _SBUF	=	0x0099
                    009A    485 G$SPI0CFG$0$0 == 0x009a
                    009A    486 _SPI0CFG	=	0x009a
                    009B    487 G$SPI0DAT$0$0 == 0x009b
                    009B    488 _SPI0DAT	=	0x009b
                    009D    489 G$SPI0CKR$0$0 == 0x009d
                    009D    490 _SPI0CKR	=	0x009d
                    00A1    491 G$EMI0TC$0$0 == 0x00a1
                    00A1    492 _EMI0TC	=	0x00a1
                    00A2    493 G$EMI0CN$0$0 == 0x00a2
                    00A2    494 _EMI0CN	=	0x00a2
                    00A2    495 G$_XPAGE$0$0 == 0x00a2
                    00A2    496 __XPAGE	=	0x00a2
                    00A3    497 G$EMI0CF$0$0 == 0x00a3
                    00A3    498 _EMI0CF	=	0x00a3
                    00A9    499 G$SADDR0$0$0 == 0x00a9
                    00A9    500 _SADDR0	=	0x00a9
                    00B7    501 G$FLSCL$0$0 == 0x00b7
                    00B7    502 _FLSCL	=	0x00b7
                    00B9    503 G$SADEN0$0$0 == 0x00b9
                    00B9    504 _SADEN0	=	0x00b9
                    00BA    505 G$AMX0CF$0$0 == 0x00ba
                    00BA    506 _AMX0CF	=	0x00ba
                    00BB    507 G$AMX0SL$0$0 == 0x00bb
                    00BB    508 _AMX0SL	=	0x00bb
                    00BC    509 G$ADC0CF$0$0 == 0x00bc
                    00BC    510 _ADC0CF	=	0x00bc
                    00BE    511 G$ADC0L$0$0 == 0x00be
                    00BE    512 _ADC0L	=	0x00be
                    00BF    513 G$ADC0H$0$0 == 0x00bf
                    00BF    514 _ADC0H	=	0x00bf
                    00C0    515 G$SMB0CN$0$0 == 0x00c0
                    00C0    516 _SMB0CN	=	0x00c0
                    00C1    517 G$SMB0STA$0$0 == 0x00c1
                    00C1    518 _SMB0STA	=	0x00c1
                    00C2    519 G$SMB0DAT$0$0 == 0x00c2
                    00C2    520 _SMB0DAT	=	0x00c2
                    00C3    521 G$SMB0ADR$0$0 == 0x00c3
                    00C3    522 _SMB0ADR	=	0x00c3
                    00C4    523 G$ADC0GTL$0$0 == 0x00c4
                    00C4    524 _ADC0GTL	=	0x00c4
                    00C5    525 G$ADC0GTH$0$0 == 0x00c5
                    00C5    526 _ADC0GTH	=	0x00c5
                    00C6    527 G$ADC0LTL$0$0 == 0x00c6
                    00C6    528 _ADC0LTL	=	0x00c6
                    00C7    529 G$ADC0LTH$0$0 == 0x00c7
                    00C7    530 _ADC0LTH	=	0x00c7
                    00C8    531 G$TMR2CN$0$0 == 0x00c8
                    00C8    532 _TMR2CN	=	0x00c8
                    00C9    533 G$TMR2CF$0$0 == 0x00c9
                    00C9    534 _TMR2CF	=	0x00c9
                    00CA    535 G$RCAP2L$0$0 == 0x00ca
                    00CA    536 _RCAP2L	=	0x00ca
                    00CB    537 G$RCAP2H$0$0 == 0x00cb
                    00CB    538 _RCAP2H	=	0x00cb
                    00CC    539 G$TMR2L$0$0 == 0x00cc
                    00CC    540 _TMR2L	=	0x00cc
                    00CC    541 G$TL2$0$0 == 0x00cc
                    00CC    542 _TL2	=	0x00cc
                    00CD    543 G$TMR2H$0$0 == 0x00cd
                    00CD    544 _TMR2H	=	0x00cd
                    00CD    545 G$TH2$0$0 == 0x00cd
                    00CD    546 _TH2	=	0x00cd
                    00CF    547 G$SMB0CR$0$0 == 0x00cf
                    00CF    548 _SMB0CR	=	0x00cf
                    00D1    549 G$REF0CN$0$0 == 0x00d1
                    00D1    550 _REF0CN	=	0x00d1
                    00D2    551 G$DAC0L$0$0 == 0x00d2
                    00D2    552 _DAC0L	=	0x00d2
                    00D3    553 G$DAC0H$0$0 == 0x00d3
                    00D3    554 _DAC0H	=	0x00d3
                    00D4    555 G$DAC0CN$0$0 == 0x00d4
                    00D4    556 _DAC0CN	=	0x00d4
                    00D8    557 G$PCA0CN$0$0 == 0x00d8
                    00D8    558 _PCA0CN	=	0x00d8
                    00D9    559 G$PCA0MD$0$0 == 0x00d9
                    00D9    560 _PCA0MD	=	0x00d9
                    00DA    561 G$PCA0CPM0$0$0 == 0x00da
                    00DA    562 _PCA0CPM0	=	0x00da
                    00DB    563 G$PCA0CPM1$0$0 == 0x00db
                    00DB    564 _PCA0CPM1	=	0x00db
                    00DC    565 G$PCA0CPM2$0$0 == 0x00dc
                    00DC    566 _PCA0CPM2	=	0x00dc
                    00DD    567 G$PCA0CPM3$0$0 == 0x00dd
                    00DD    568 _PCA0CPM3	=	0x00dd
                    00DE    569 G$PCA0CPM4$0$0 == 0x00de
                    00DE    570 _PCA0CPM4	=	0x00de
                    00DF    571 G$PCA0CPM5$0$0 == 0x00df
                    00DF    572 _PCA0CPM5	=	0x00df
                    00E1    573 G$PCA0CPL5$0$0 == 0x00e1
                    00E1    574 _PCA0CPL5	=	0x00e1
                    00E2    575 G$PCA0CPH5$0$0 == 0x00e2
                    00E2    576 _PCA0CPH5	=	0x00e2
                    00E8    577 G$ADC0CN$0$0 == 0x00e8
                    00E8    578 _ADC0CN	=	0x00e8
                    00E9    579 G$PCA0CPL2$0$0 == 0x00e9
                    00E9    580 _PCA0CPL2	=	0x00e9
                    00EA    581 G$PCA0CPH2$0$0 == 0x00ea
                    00EA    582 _PCA0CPH2	=	0x00ea
                    00EB    583 G$PCA0CPL3$0$0 == 0x00eb
                    00EB    584 _PCA0CPL3	=	0x00eb
                    00EC    585 G$PCA0CPH3$0$0 == 0x00ec
                    00EC    586 _PCA0CPH3	=	0x00ec
                    00ED    587 G$PCA0CPL4$0$0 == 0x00ed
                    00ED    588 _PCA0CPL4	=	0x00ed
                    00EE    589 G$PCA0CPH4$0$0 == 0x00ee
                    00EE    590 _PCA0CPH4	=	0x00ee
                    00EF    591 G$RSTSRC$0$0 == 0x00ef
                    00EF    592 _RSTSRC	=	0x00ef
                    00F8    593 G$SPI0CN$0$0 == 0x00f8
                    00F8    594 _SPI0CN	=	0x00f8
                    00F9    595 G$PCA0L$0$0 == 0x00f9
                    00F9    596 _PCA0L	=	0x00f9
                    00FA    597 G$PCA0H$0$0 == 0x00fa
                    00FA    598 _PCA0H	=	0x00fa
                    00FB    599 G$PCA0CPL0$0$0 == 0x00fb
                    00FB    600 _PCA0CPL0	=	0x00fb
                    00FC    601 G$PCA0CPH0$0$0 == 0x00fc
                    00FC    602 _PCA0CPH0	=	0x00fc
                    00FD    603 G$PCA0CPL1$0$0 == 0x00fd
                    00FD    604 _PCA0CPL1	=	0x00fd
                    00FE    605 G$PCA0CPH1$0$0 == 0x00fe
                    00FE    606 _PCA0CPH1	=	0x00fe
                    0088    607 G$CPT0CN$0$0 == 0x0088
                    0088    608 _CPT0CN	=	0x0088
                    0089    609 G$CPT0MD$0$0 == 0x0089
                    0089    610 _CPT0MD	=	0x0089
                    0098    611 G$SCON1$0$0 == 0x0098
                    0098    612 _SCON1	=	0x0098
                    0099    613 G$SBUF1$0$0 == 0x0099
                    0099    614 _SBUF1	=	0x0099
                    00C8    615 G$TMR3CN$0$0 == 0x00c8
                    00C8    616 _TMR3CN	=	0x00c8
                    00C9    617 G$TMR3CF$0$0 == 0x00c9
                    00C9    618 _TMR3CF	=	0x00c9
                    00CA    619 G$RCAP3L$0$0 == 0x00ca
                    00CA    620 _RCAP3L	=	0x00ca
                    00CB    621 G$RCAP3H$0$0 == 0x00cb
                    00CB    622 _RCAP3H	=	0x00cb
                    00CC    623 G$TMR3L$0$0 == 0x00cc
                    00CC    624 _TMR3L	=	0x00cc
                    00CD    625 G$TMR3H$0$0 == 0x00cd
                    00CD    626 _TMR3H	=	0x00cd
                    00D2    627 G$DAC1L$0$0 == 0x00d2
                    00D2    628 _DAC1L	=	0x00d2
                    00D3    629 G$DAC1H$0$0 == 0x00d3
                    00D3    630 _DAC1H	=	0x00d3
                    00D4    631 G$DAC1CN$0$0 == 0x00d4
                    00D4    632 _DAC1CN	=	0x00d4
                    0088    633 G$CPT1CN$0$0 == 0x0088
                    0088    634 _CPT1CN	=	0x0088
                    0089    635 G$CPT1MD$0$0 == 0x0089
                    0089    636 _CPT1MD	=	0x0089
                    00BA    637 G$AMX2CF$0$0 == 0x00ba
                    00BA    638 _AMX2CF	=	0x00ba
                    00BB    639 G$AMX2SL$0$0 == 0x00bb
                    00BB    640 _AMX2SL	=	0x00bb
                    00BC    641 G$ADC2CF$0$0 == 0x00bc
                    00BC    642 _ADC2CF	=	0x00bc
                    00BE    643 G$ADC2$0$0 == 0x00be
                    00BE    644 _ADC2	=	0x00be
                    00C4    645 G$ADC2GT$0$0 == 0x00c4
                    00C4    646 _ADC2GT	=	0x00c4
                    00C6    647 G$ADC2LT$0$0 == 0x00c6
                    00C6    648 _ADC2LT	=	0x00c6
                    00C8    649 G$TMR4CN$0$0 == 0x00c8
                    00C8    650 _TMR4CN	=	0x00c8
                    00C9    651 G$TMR4CF$0$0 == 0x00c9
                    00C9    652 _TMR4CF	=	0x00c9
                    00CA    653 G$RCAP4L$0$0 == 0x00ca
                    00CA    654 _RCAP4L	=	0x00ca
                    00CB    655 G$RCAP4H$0$0 == 0x00cb
                    00CB    656 _RCAP4H	=	0x00cb
                    00CC    657 G$TMR4L$0$0 == 0x00cc
                    00CC    658 _TMR4L	=	0x00cc
                    00CD    659 G$TMR4H$0$0 == 0x00cd
                    00CD    660 _TMR4H	=	0x00cd
                    00E8    661 G$ADC2CN$0$0 == 0x00e8
                    00E8    662 _ADC2CN	=	0x00e8
                    0091    663 G$MAC0BL$0$0 == 0x0091
                    0091    664 _MAC0BL	=	0x0091
                    0092    665 G$MAC0BH$0$0 == 0x0092
                    0092    666 _MAC0BH	=	0x0092
                    0093    667 G$MAC0ACC0$0$0 == 0x0093
                    0093    668 _MAC0ACC0	=	0x0093
                    0094    669 G$MAC0ACC1$0$0 == 0x0094
                    0094    670 _MAC0ACC1	=	0x0094
                    0095    671 G$MAC0ACC2$0$0 == 0x0095
                    0095    672 _MAC0ACC2	=	0x0095
                    0096    673 G$MAC0ACC3$0$0 == 0x0096
                    0096    674 _MAC0ACC3	=	0x0096
                    0097    675 G$MAC0OVR$0$0 == 0x0097
                    0097    676 _MAC0OVR	=	0x0097
                    00C0    677 G$MAC0STA$0$0 == 0x00c0
                    00C0    678 _MAC0STA	=	0x00c0
                    00C1    679 G$MAC0AL$0$0 == 0x00c1
                    00C1    680 _MAC0AL	=	0x00c1
                    00C2    681 G$MAC0AH$0$0 == 0x00c2
                    00C2    682 _MAC0AH	=	0x00c2
                    00C3    683 G$MAC0CF$0$0 == 0x00c3
                    00C3    684 _MAC0CF	=	0x00c3
                    00CE    685 G$MAC0RNDL$0$0 == 0x00ce
                    00CE    686 _MAC0RNDL	=	0x00ce
                    00CF    687 G$MAC0RNDH$0$0 == 0x00cf
                    00CF    688 _MAC0RNDH	=	0x00cf
                    0088    689 G$FLSTAT$0$0 == 0x0088
                    0088    690 _FLSTAT	=	0x0088
                    0089    691 G$PLL0CN$0$0 == 0x0089
                    0089    692 _PLL0CN	=	0x0089
                    008A    693 G$OSCICN$0$0 == 0x008a
                    008A    694 _OSCICN	=	0x008a
                    008B    695 G$OSCICL$0$0 == 0x008b
                    008B    696 _OSCICL	=	0x008b
                    008C    697 G$OSCXCN$0$0 == 0x008c
                    008C    698 _OSCXCN	=	0x008c
                    008D    699 G$PLL0DIV$0$0 == 0x008d
                    008D    700 _PLL0DIV	=	0x008d
                    008E    701 G$PLL0MUL$0$0 == 0x008e
                    008E    702 _PLL0MUL	=	0x008e
                    008F    703 G$PLL0FLT$0$0 == 0x008f
                    008F    704 _PLL0FLT	=	0x008f
                    0096    705 G$SFRPGCN$0$0 == 0x0096
                    0096    706 _SFRPGCN	=	0x0096
                    0097    707 G$CLKSEL$0$0 == 0x0097
                    0097    708 _CLKSEL	=	0x0097
                    009A    709 G$CCH0MA$0$0 == 0x009a
                    009A    710 _CCH0MA	=	0x009a
                    009C    711 G$P4MDOUT$0$0 == 0x009c
                    009C    712 _P4MDOUT	=	0x009c
                    009D    713 G$P5MDOUT$0$0 == 0x009d
                    009D    714 _P5MDOUT	=	0x009d
                    009E    715 G$P6MDOUT$0$0 == 0x009e
                    009E    716 _P6MDOUT	=	0x009e
                    009F    717 G$P7MDOUT$0$0 == 0x009f
                    009F    718 _P7MDOUT	=	0x009f
                    00A1    719 G$CCH0CN$0$0 == 0x00a1
                    00A1    720 _CCH0CN	=	0x00a1
                    00A2    721 G$CCH0TN$0$0 == 0x00a2
                    00A2    722 _CCH0TN	=	0x00a2
                    00A3    723 G$CCH0LC$0$0 == 0x00a3
                    00A3    724 _CCH0LC	=	0x00a3
                    00A4    725 G$P0MDOUT$0$0 == 0x00a4
                    00A4    726 _P0MDOUT	=	0x00a4
                    00A5    727 G$P1MDOUT$0$0 == 0x00a5
                    00A5    728 _P1MDOUT	=	0x00a5
                    00A6    729 G$P2MDOUT$0$0 == 0x00a6
                    00A6    730 _P2MDOUT	=	0x00a6
                    00A7    731 G$P3MDOUT$0$0 == 0x00a7
                    00A7    732 _P3MDOUT	=	0x00a7
                    00AD    733 G$P1MDIN$0$0 == 0x00ad
                    00AD    734 _P1MDIN	=	0x00ad
                    00B7    735 G$FLACL$0$0 == 0x00b7
                    00B7    736 _FLACL	=	0x00b7
                    00C8    737 G$P4$0$0 == 0x00c8
                    00C8    738 _P4	=	0x00c8
                    00D8    739 G$P5$0$0 == 0x00d8
                    00D8    740 _P5	=	0x00d8
                    00E1    741 G$XBR0$0$0 == 0x00e1
                    00E1    742 _XBR0	=	0x00e1
                    00E2    743 G$XBR1$0$0 == 0x00e2
                    00E2    744 _XBR1	=	0x00e2
                    00E3    745 G$XBR2$0$0 == 0x00e3
                    00E3    746 _XBR2	=	0x00e3
                    00E8    747 G$P6$0$0 == 0x00e8
                    00E8    748 _P6	=	0x00e8
                    00F8    749 G$P7$0$0 == 0x00f8
                    00F8    750 _P7	=	0x00f8
                    8C8A    751 G$TMR0$0$0 == 0x8c8a
                    8C8A    752 _TMR0	=	0x8c8a
                    8D8B    753 G$TMR1$0$0 == 0x8d8b
                    8D8B    754 _TMR1	=	0x8d8b
                    CDCC    755 G$TMR2$0$0 == 0xcdcc
                    CDCC    756 _TMR2	=	0xcdcc
                    CBCA    757 G$RCAP2$0$0 == 0xcbca
                    CBCA    758 _RCAP2	=	0xcbca
                    BFBE    759 G$ADC0$0$0 == 0xbfbe
                    BFBE    760 _ADC0	=	0xbfbe
                    C5C4    761 G$ADC0GT$0$0 == 0xc5c4
                    C5C4    762 _ADC0GT	=	0xc5c4
                    C7C6    763 G$ADC0LT$0$0 == 0xc7c6
                    C7C6    764 _ADC0LT	=	0xc7c6
                    D3D2    765 G$DAC0$0$0 == 0xd3d2
                    D3D2    766 _DAC0	=	0xd3d2
                    FAF9    767 G$PCA0$0$0 == 0xfaf9
                    FAF9    768 _PCA0	=	0xfaf9
                    FCFB    769 G$PCA0CP0$0$0 == 0xfcfb
                    FCFB    770 _PCA0CP0	=	0xfcfb
                    FEFD    771 G$PCA0CP1$0$0 == 0xfefd
                    FEFD    772 _PCA0CP1	=	0xfefd
                    EAE9    773 G$PCA0CP2$0$0 == 0xeae9
                    EAE9    774 _PCA0CP2	=	0xeae9
                    ECEB    775 G$PCA0CP3$0$0 == 0xeceb
                    ECEB    776 _PCA0CP3	=	0xeceb
                    EEED    777 G$PCA0CP4$0$0 == 0xeeed
                    EEED    778 _PCA0CP4	=	0xeeed
                    E2E1    779 G$PCA0CP5$0$0 == 0xe2e1
                    E2E1    780 _PCA0CP5	=	0xe2e1
                    CDCC    781 G$TMR3$0$0 == 0xcdcc
                    CDCC    782 _TMR3	=	0xcdcc
                    CBCA    783 G$RCAP3$0$0 == 0xcbca
                    CBCA    784 _RCAP3	=	0xcbca
                    D3D2    785 G$DAC1$0$0 == 0xd3d2
                    D3D2    786 _DAC1	=	0xd3d2
                    CDCC    787 G$TMR4$0$0 == 0xcdcc
                    CDCC    788 _TMR4	=	0xcdcc
                    CBCA    789 G$RCAP4$0$0 == 0xcbca
                    CBCA    790 _RCAP4	=	0xcbca
                    C2C1    791 G$MAC0A$0$0 == 0xc2c1
                    C2C1    792 _MAC0A	=	0xc2c1
                    96959493    793 G$MAC0ACC$0$0 == 0x96959493
                    96959493    794 _MAC0ACC	=	0x96959493
                    CFCE    795 G$MAC0RND$0$0 == 0xcfce
                    CFCE    796 _MAC0RND	=	0xcfce
                            797 ;--------------------------------------------------------
                            798 ; special function bits
                            799 ;--------------------------------------------------------
                            800 	.area RSEG    (DATA)
                    0080    801 G$P0_0$0$0 == 0x0080
                    0080    802 _P0_0	=	0x0080
                    0081    803 G$P0_1$0$0 == 0x0081
                    0081    804 _P0_1	=	0x0081
                    0082    805 G$P0_2$0$0 == 0x0082
                    0082    806 _P0_2	=	0x0082
                    0083    807 G$P0_3$0$0 == 0x0083
                    0083    808 _P0_3	=	0x0083
                    0084    809 G$P0_4$0$0 == 0x0084
                    0084    810 _P0_4	=	0x0084
                    0085    811 G$P0_5$0$0 == 0x0085
                    0085    812 _P0_5	=	0x0085
                    0086    813 G$P0_6$0$0 == 0x0086
                    0086    814 _P0_6	=	0x0086
                    0087    815 G$P0_7$0$0 == 0x0087
                    0087    816 _P0_7	=	0x0087
                    0088    817 G$IT0$0$0 == 0x0088
                    0088    818 _IT0	=	0x0088
                    0089    819 G$IE0$0$0 == 0x0089
                    0089    820 _IE0	=	0x0089
                    008A    821 G$IT1$0$0 == 0x008a
                    008A    822 _IT1	=	0x008a
                    008B    823 G$IE1$0$0 == 0x008b
                    008B    824 _IE1	=	0x008b
                    008C    825 G$TR0$0$0 == 0x008c
                    008C    826 _TR0	=	0x008c
                    008D    827 G$TF0$0$0 == 0x008d
                    008D    828 _TF0	=	0x008d
                    008E    829 G$TR1$0$0 == 0x008e
                    008E    830 _TR1	=	0x008e
                    008F    831 G$TF1$0$0 == 0x008f
                    008F    832 _TF1	=	0x008f
                    0088    833 G$CP0HYN0$0$0 == 0x0088
                    0088    834 _CP0HYN0	=	0x0088
                    0089    835 G$CP0HYN1$0$0 == 0x0089
                    0089    836 _CP0HYN1	=	0x0089
                    008A    837 G$CP0HYP0$0$0 == 0x008a
                    008A    838 _CP0HYP0	=	0x008a
                    008B    839 G$CP0HYP1$0$0 == 0x008b
                    008B    840 _CP0HYP1	=	0x008b
                    008C    841 G$CP0FIF$0$0 == 0x008c
                    008C    842 _CP0FIF	=	0x008c
                    008D    843 G$CP0RIF$0$0 == 0x008d
                    008D    844 _CP0RIF	=	0x008d
                    008E    845 G$CP0OUT$0$0 == 0x008e
                    008E    846 _CP0OUT	=	0x008e
                    008F    847 G$CP0EN$0$0 == 0x008f
                    008F    848 _CP0EN	=	0x008f
                    0088    849 G$CP1HYN0$0$0 == 0x0088
                    0088    850 _CP1HYN0	=	0x0088
                    0089    851 G$CP1HYN1$0$0 == 0x0089
                    0089    852 _CP1HYN1	=	0x0089
                    008A    853 G$CP1HYP0$0$0 == 0x008a
                    008A    854 _CP1HYP0	=	0x008a
                    008B    855 G$CP1HYP1$0$0 == 0x008b
                    008B    856 _CP1HYP1	=	0x008b
                    008C    857 G$CP1FIF$0$0 == 0x008c
                    008C    858 _CP1FIF	=	0x008c
                    008D    859 G$CP1RIF$0$0 == 0x008d
                    008D    860 _CP1RIF	=	0x008d
                    008E    861 G$CP1OUT$0$0 == 0x008e
                    008E    862 _CP1OUT	=	0x008e
                    008F    863 G$CP1EN$0$0 == 0x008f
                    008F    864 _CP1EN	=	0x008f
                    0088    865 G$FLHBUSY$0$0 == 0x0088
                    0088    866 _FLHBUSY	=	0x0088
                    0090    867 G$P1_0$0$0 == 0x0090
                    0090    868 _P1_0	=	0x0090
                    0091    869 G$P1_1$0$0 == 0x0091
                    0091    870 _P1_1	=	0x0091
                    0092    871 G$P1_2$0$0 == 0x0092
                    0092    872 _P1_2	=	0x0092
                    0093    873 G$P1_3$0$0 == 0x0093
                    0093    874 _P1_3	=	0x0093
                    0094    875 G$P1_4$0$0 == 0x0094
                    0094    876 _P1_4	=	0x0094
                    0095    877 G$P1_5$0$0 == 0x0095
                    0095    878 _P1_5	=	0x0095
                    0096    879 G$P1_6$0$0 == 0x0096
                    0096    880 _P1_6	=	0x0096
                    0097    881 G$P1_7$0$0 == 0x0097
                    0097    882 _P1_7	=	0x0097
                    0098    883 G$RI0$0$0 == 0x0098
                    0098    884 _RI0	=	0x0098
                    0098    885 G$RI$0$0 == 0x0098
                    0098    886 _RI	=	0x0098
                    0099    887 G$TI0$0$0 == 0x0099
                    0099    888 _TI0	=	0x0099
                    0099    889 G$TI$0$0 == 0x0099
                    0099    890 _TI	=	0x0099
                    009A    891 G$RB80$0$0 == 0x009a
                    009A    892 _RB80	=	0x009a
                    009B    893 G$TB80$0$0 == 0x009b
                    009B    894 _TB80	=	0x009b
                    009C    895 G$REN0$0$0 == 0x009c
                    009C    896 _REN0	=	0x009c
                    009C    897 G$REN$0$0 == 0x009c
                    009C    898 _REN	=	0x009c
                    009D    899 G$SM20$0$0 == 0x009d
                    009D    900 _SM20	=	0x009d
                    009E    901 G$SM10$0$0 == 0x009e
                    009E    902 _SM10	=	0x009e
                    009F    903 G$SM00$0$0 == 0x009f
                    009F    904 _SM00	=	0x009f
                    0098    905 G$RI1$0$0 == 0x0098
                    0098    906 _RI1	=	0x0098
                    0099    907 G$TI1$0$0 == 0x0099
                    0099    908 _TI1	=	0x0099
                    009A    909 G$RB81$0$0 == 0x009a
                    009A    910 _RB81	=	0x009a
                    009B    911 G$TB81$0$0 == 0x009b
                    009B    912 _TB81	=	0x009b
                    009C    913 G$REN1$0$0 == 0x009c
                    009C    914 _REN1	=	0x009c
                    009D    915 G$MCE1$0$0 == 0x009d
                    009D    916 _MCE1	=	0x009d
                    009F    917 G$S1MODE$0$0 == 0x009f
                    009F    918 _S1MODE	=	0x009f
                    00A0    919 G$P2_0$0$0 == 0x00a0
                    00A0    920 _P2_0	=	0x00a0
                    00A1    921 G$P2_1$0$0 == 0x00a1
                    00A1    922 _P2_1	=	0x00a1
                    00A2    923 G$P2_2$0$0 == 0x00a2
                    00A2    924 _P2_2	=	0x00a2
                    00A3    925 G$P2_3$0$0 == 0x00a3
                    00A3    926 _P2_3	=	0x00a3
                    00A4    927 G$P2_4$0$0 == 0x00a4
                    00A4    928 _P2_4	=	0x00a4
                    00A5    929 G$P2_5$0$0 == 0x00a5
                    00A5    930 _P2_5	=	0x00a5
                    00A6    931 G$P2_6$0$0 == 0x00a6
                    00A6    932 _P2_6	=	0x00a6
                    00A7    933 G$P2_7$0$0 == 0x00a7
                    00A7    934 _P2_7	=	0x00a7
                    00A8    935 G$EX0$0$0 == 0x00a8
                    00A8    936 _EX0	=	0x00a8
                    00A9    937 G$ET0$0$0 == 0x00a9
                    00A9    938 _ET0	=	0x00a9
                    00AA    939 G$EX1$0$0 == 0x00aa
                    00AA    940 _EX1	=	0x00aa
                    00AB    941 G$ET1$0$0 == 0x00ab
                    00AB    942 _ET1	=	0x00ab
                    00AC    943 G$ES0$0$0 == 0x00ac
                    00AC    944 _ES0	=	0x00ac
                    00AC    945 G$ES$0$0 == 0x00ac
                    00AC    946 _ES	=	0x00ac
                    00AD    947 G$ET2$0$0 == 0x00ad
                    00AD    948 _ET2	=	0x00ad
                    00AF    949 G$EA$0$0 == 0x00af
                    00AF    950 _EA	=	0x00af
                    00B0    951 G$P3_0$0$0 == 0x00b0
                    00B0    952 _P3_0	=	0x00b0
                    00B1    953 G$P3_1$0$0 == 0x00b1
                    00B1    954 _P3_1	=	0x00b1
                    00B2    955 G$P3_2$0$0 == 0x00b2
                    00B2    956 _P3_2	=	0x00b2
                    00B3    957 G$P3_3$0$0 == 0x00b3
                    00B3    958 _P3_3	=	0x00b3
                    00B4    959 G$P3_4$0$0 == 0x00b4
                    00B4    960 _P3_4	=	0x00b4
                    00B5    961 G$P3_5$0$0 == 0x00b5
                    00B5    962 _P3_5	=	0x00b5
                    00B6    963 G$P3_6$0$0 == 0x00b6
                    00B6    964 _P3_6	=	0x00b6
                    00B7    965 G$P3_7$0$0 == 0x00b7
                    00B7    966 _P3_7	=	0x00b7
                    00B8    967 G$PX0$0$0 == 0x00b8
                    00B8    968 _PX0	=	0x00b8
                    00B9    969 G$PT0$0$0 == 0x00b9
                    00B9    970 _PT0	=	0x00b9
                    00BA    971 G$PX1$0$0 == 0x00ba
                    00BA    972 _PX1	=	0x00ba
                    00BB    973 G$PT1$0$0 == 0x00bb
                    00BB    974 _PT1	=	0x00bb
                    00BC    975 G$PS0$0$0 == 0x00bc
                    00BC    976 _PS0	=	0x00bc
                    00BC    977 G$PS$0$0 == 0x00bc
                    00BC    978 _PS	=	0x00bc
                    00BD    979 G$PT2$0$0 == 0x00bd
                    00BD    980 _PT2	=	0x00bd
                    00C0    981 G$SMBTOE$0$0 == 0x00c0
                    00C0    982 _SMBTOE	=	0x00c0
                    00C1    983 G$SMBFTE$0$0 == 0x00c1
                    00C1    984 _SMBFTE	=	0x00c1
                    00C2    985 G$AA$0$0 == 0x00c2
                    00C2    986 _AA	=	0x00c2
                    00C3    987 G$SI$0$0 == 0x00c3
                    00C3    988 _SI	=	0x00c3
                    00C4    989 G$STO$0$0 == 0x00c4
                    00C4    990 _STO	=	0x00c4
                    00C5    991 G$STA$0$0 == 0x00c5
                    00C5    992 _STA	=	0x00c5
                    00C6    993 G$ENSMB$0$0 == 0x00c6
                    00C6    994 _ENSMB	=	0x00c6
                    00C7    995 G$BUSY$0$0 == 0x00c7
                    00C7    996 _BUSY	=	0x00c7
                    00C0    997 G$MAC0N$0$0 == 0x00c0
                    00C0    998 _MAC0N	=	0x00c0
                    00C1    999 G$MAC0SO$0$0 == 0x00c1
                    00C1   1000 _MAC0SO	=	0x00c1
                    00C2   1001 G$MAC0Z$0$0 == 0x00c2
                    00C2   1002 _MAC0Z	=	0x00c2
                    00C3   1003 G$MAC0HO$0$0 == 0x00c3
                    00C3   1004 _MAC0HO	=	0x00c3
                    00C8   1005 G$CPRL2$0$0 == 0x00c8
                    00C8   1006 _CPRL2	=	0x00c8
                    00C9   1007 G$CT2$0$0 == 0x00c9
                    00C9   1008 _CT2	=	0x00c9
                    00CA   1009 G$TR2$0$0 == 0x00ca
                    00CA   1010 _TR2	=	0x00ca
                    00CB   1011 G$EXEN2$0$0 == 0x00cb
                    00CB   1012 _EXEN2	=	0x00cb
                    00CE   1013 G$EXF2$0$0 == 0x00ce
                    00CE   1014 _EXF2	=	0x00ce
                    00CF   1015 G$TF2$0$0 == 0x00cf
                    00CF   1016 _TF2	=	0x00cf
                    00C8   1017 G$CPRL3$0$0 == 0x00c8
                    00C8   1018 _CPRL3	=	0x00c8
                    00C9   1019 G$CT3$0$0 == 0x00c9
                    00C9   1020 _CT3	=	0x00c9
                    00CA   1021 G$TR3$0$0 == 0x00ca
                    00CA   1022 _TR3	=	0x00ca
                    00CB   1023 G$EXEN3$0$0 == 0x00cb
                    00CB   1024 _EXEN3	=	0x00cb
                    00CE   1025 G$EXF3$0$0 == 0x00ce
                    00CE   1026 _EXF3	=	0x00ce
                    00CF   1027 G$TF3$0$0 == 0x00cf
                    00CF   1028 _TF3	=	0x00cf
                    00C8   1029 G$CPRL4$0$0 == 0x00c8
                    00C8   1030 _CPRL4	=	0x00c8
                    00C9   1031 G$CT4$0$0 == 0x00c9
                    00C9   1032 _CT4	=	0x00c9
                    00CA   1033 G$TR4$0$0 == 0x00ca
                    00CA   1034 _TR4	=	0x00ca
                    00CB   1035 G$EXEN4$0$0 == 0x00cb
                    00CB   1036 _EXEN4	=	0x00cb
                    00CE   1037 G$EXF4$0$0 == 0x00ce
                    00CE   1038 _EXF4	=	0x00ce
                    00CF   1039 G$TF4$0$0 == 0x00cf
                    00CF   1040 _TF4	=	0x00cf
                    00C8   1041 G$P4_0$0$0 == 0x00c8
                    00C8   1042 _P4_0	=	0x00c8
                    00C9   1043 G$P4_1$0$0 == 0x00c9
                    00C9   1044 _P4_1	=	0x00c9
                    00CA   1045 G$P4_2$0$0 == 0x00ca
                    00CA   1046 _P4_2	=	0x00ca
                    00CB   1047 G$P4_3$0$0 == 0x00cb
                    00CB   1048 _P4_3	=	0x00cb
                    00CC   1049 G$P4_4$0$0 == 0x00cc
                    00CC   1050 _P4_4	=	0x00cc
                    00CD   1051 G$P4_5$0$0 == 0x00cd
                    00CD   1052 _P4_5	=	0x00cd
                    00CE   1053 G$P4_6$0$0 == 0x00ce
                    00CE   1054 _P4_6	=	0x00ce
                    00CF   1055 G$P4_7$0$0 == 0x00cf
                    00CF   1056 _P4_7	=	0x00cf
                    00D0   1057 G$P$0$0 == 0x00d0
                    00D0   1058 _P	=	0x00d0
                    00D1   1059 G$F1$0$0 == 0x00d1
                    00D1   1060 _F1	=	0x00d1
                    00D2   1061 G$OV$0$0 == 0x00d2
                    00D2   1062 _OV	=	0x00d2
                    00D3   1063 G$RS0$0$0 == 0x00d3
                    00D3   1064 _RS0	=	0x00d3
                    00D4   1065 G$RS1$0$0 == 0x00d4
                    00D4   1066 _RS1	=	0x00d4
                    00D5   1067 G$F0$0$0 == 0x00d5
                    00D5   1068 _F0	=	0x00d5
                    00D6   1069 G$AC$0$0 == 0x00d6
                    00D6   1070 _AC	=	0x00d6
                    00D7   1071 G$CY$0$0 == 0x00d7
                    00D7   1072 _CY	=	0x00d7
                    00D8   1073 G$CCF0$0$0 == 0x00d8
                    00D8   1074 _CCF0	=	0x00d8
                    00D9   1075 G$CCF1$0$0 == 0x00d9
                    00D9   1076 _CCF1	=	0x00d9
                    00DA   1077 G$CCF2$0$0 == 0x00da
                    00DA   1078 _CCF2	=	0x00da
                    00DB   1079 G$CCF3$0$0 == 0x00db
                    00DB   1080 _CCF3	=	0x00db
                    00DC   1081 G$CCF4$0$0 == 0x00dc
                    00DC   1082 _CCF4	=	0x00dc
                    00DD   1083 G$CCF5$0$0 == 0x00dd
                    00DD   1084 _CCF5	=	0x00dd
                    00DE   1085 G$CR$0$0 == 0x00de
                    00DE   1086 _CR	=	0x00de
                    00DF   1087 G$CF$0$0 == 0x00df
                    00DF   1088 _CF	=	0x00df
                    00D8   1089 G$P5_0$0$0 == 0x00d8
                    00D8   1090 _P5_0	=	0x00d8
                    00D9   1091 G$P5_1$0$0 == 0x00d9
                    00D9   1092 _P5_1	=	0x00d9
                    00DA   1093 G$P5_2$0$0 == 0x00da
                    00DA   1094 _P5_2	=	0x00da
                    00DB   1095 G$P5_3$0$0 == 0x00db
                    00DB   1096 _P5_3	=	0x00db
                    00DC   1097 G$P5_4$0$0 == 0x00dc
                    00DC   1098 _P5_4	=	0x00dc
                    00DD   1099 G$P5_5$0$0 == 0x00dd
                    00DD   1100 _P5_5	=	0x00dd
                    00DE   1101 G$P5_6$0$0 == 0x00de
                    00DE   1102 _P5_6	=	0x00de
                    00DF   1103 G$P5_7$0$0 == 0x00df
                    00DF   1104 _P5_7	=	0x00df
                    00E8   1105 G$AD0LJST$0$0 == 0x00e8
                    00E8   1106 _AD0LJST	=	0x00e8
                    00E9   1107 G$AD0WINT$0$0 == 0x00e9
                    00E9   1108 _AD0WINT	=	0x00e9
                    00EA   1109 G$AD0CM0$0$0 == 0x00ea
                    00EA   1110 _AD0CM0	=	0x00ea
                    00EB   1111 G$AD0CM1$0$0 == 0x00eb
                    00EB   1112 _AD0CM1	=	0x00eb
                    00EC   1113 G$AD0BUSY$0$0 == 0x00ec
                    00EC   1114 _AD0BUSY	=	0x00ec
                    00ED   1115 G$AD0INT$0$0 == 0x00ed
                    00ED   1116 _AD0INT	=	0x00ed
                    00EE   1117 G$AD0TM$0$0 == 0x00ee
                    00EE   1118 _AD0TM	=	0x00ee
                    00EF   1119 G$AD0EN$0$0 == 0x00ef
                    00EF   1120 _AD0EN	=	0x00ef
                    00E8   1121 G$AD2WINT$0$0 == 0x00e8
                    00E8   1122 _AD2WINT	=	0x00e8
                    00E9   1123 G$AD2CM0$0$0 == 0x00e9
                    00E9   1124 _AD2CM0	=	0x00e9
                    00EA   1125 G$AD2CM1$0$0 == 0x00ea
                    00EA   1126 _AD2CM1	=	0x00ea
                    00EB   1127 G$AD2CM2$0$0 == 0x00eb
                    00EB   1128 _AD2CM2	=	0x00eb
                    00EC   1129 G$AD2BUSY$0$0 == 0x00ec
                    00EC   1130 _AD2BUSY	=	0x00ec
                    00ED   1131 G$AD2INT$0$0 == 0x00ed
                    00ED   1132 _AD2INT	=	0x00ed
                    00EE   1133 G$AD2TM$0$0 == 0x00ee
                    00EE   1134 _AD2TM	=	0x00ee
                    00EF   1135 G$AD2EN$0$0 == 0x00ef
                    00EF   1136 _AD2EN	=	0x00ef
                    00E8   1137 G$P6_0$0$0 == 0x00e8
                    00E8   1138 _P6_0	=	0x00e8
                    00E9   1139 G$P6_1$0$0 == 0x00e9
                    00E9   1140 _P6_1	=	0x00e9
                    00EA   1141 G$P6_2$0$0 == 0x00ea
                    00EA   1142 _P6_2	=	0x00ea
                    00EB   1143 G$P6_3$0$0 == 0x00eb
                    00EB   1144 _P6_3	=	0x00eb
                    00EC   1145 G$P6_4$0$0 == 0x00ec
                    00EC   1146 _P6_4	=	0x00ec
                    00ED   1147 G$P6_5$0$0 == 0x00ed
                    00ED   1148 _P6_5	=	0x00ed
                    00EE   1149 G$P6_6$0$0 == 0x00ee
                    00EE   1150 _P6_6	=	0x00ee
                    00EF   1151 G$P6_7$0$0 == 0x00ef
                    00EF   1152 _P6_7	=	0x00ef
                    00F8   1153 G$SPIEN$0$0 == 0x00f8
                    00F8   1154 _SPIEN	=	0x00f8
                    00F9   1155 G$TXBMT$0$0 == 0x00f9
                    00F9   1156 _TXBMT	=	0x00f9
                    00FA   1157 G$NSSMD0$0$0 == 0x00fa
                    00FA   1158 _NSSMD0	=	0x00fa
                    00FB   1159 G$NSSMD1$0$0 == 0x00fb
                    00FB   1160 _NSSMD1	=	0x00fb
                    00FC   1161 G$RXOVRN$0$0 == 0x00fc
                    00FC   1162 _RXOVRN	=	0x00fc
                    00FD   1163 G$MODF$0$0 == 0x00fd
                    00FD   1164 _MODF	=	0x00fd
                    00FE   1165 G$WCOL$0$0 == 0x00fe
                    00FE   1166 _WCOL	=	0x00fe
                    00FF   1167 G$SPIF$0$0 == 0x00ff
                    00FF   1168 _SPIF	=	0x00ff
                    00F8   1169 G$P7_0$0$0 == 0x00f8
                    00F8   1170 _P7_0	=	0x00f8
                    00F9   1171 G$P7_1$0$0 == 0x00f9
                    00F9   1172 _P7_1	=	0x00f9
                    00FA   1173 G$P7_2$0$0 == 0x00fa
                    00FA   1174 _P7_2	=	0x00fa
                    00FB   1175 G$P7_3$0$0 == 0x00fb
                    00FB   1176 _P7_3	=	0x00fb
                    00FC   1177 G$P7_4$0$0 == 0x00fc
                    00FC   1178 _P7_4	=	0x00fc
                    00FD   1179 G$P7_5$0$0 == 0x00fd
                    00FD   1180 _P7_5	=	0x00fd
                    00FE   1181 G$P7_6$0$0 == 0x00fe
                    00FE   1182 _P7_6	=	0x00fe
                    00FF   1183 G$P7_7$0$0 == 0x00ff
                    00FF   1184 _P7_7	=	0x00ff
                    0096   1185 G$LED$0$0 == 0x0096
                    0096   1186 _LED	=	0x0096
                    00B7   1187 G$SW2$0$0 == 0x00b7
                    00B7   1188 _SW2	=	0x00b7
                    00C9   1189 G$AB4_SW1$0$0 == 0x00c9
                    00C9   1190 _AB4_SW1	=	0x00c9
                    00CA   1191 G$AB4_SW2$0$0 == 0x00ca
                    00CA   1192 _AB4_SW2	=	0x00ca
                    00CB   1193 G$AB4_LED1$0$0 == 0x00cb
                    00CB   1194 _AB4_LED1	=	0x00cb
                    00CC   1195 G$AB4_LED2$0$0 == 0x00cc
                    00CC   1196 _AB4_LED2	=	0x00cc
                           1197 ;--------------------------------------------------------
                           1198 ; overlayable register banks
                           1199 ;--------------------------------------------------------
                           1200 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                    1201 	.ds 8
                           1202 ;--------------------------------------------------------
                           1203 ; internal ram data
                           1204 ;--------------------------------------------------------
                           1205 	.area DSEG    (DATA)
                           1206 ;--------------------------------------------------------
                           1207 ; overlayable items in internal ram 
                           1208 ;--------------------------------------------------------
                           1209 	.area OSEG    (OVR,DATA)
                           1210 ;--------------------------------------------------------
                           1211 ; indirectly addressable internal ram data
                           1212 ;--------------------------------------------------------
                           1213 	.area ISEG    (DATA)
                           1214 ;--------------------------------------------------------
                           1215 ; absolute internal ram data
                           1216 ;--------------------------------------------------------
                           1217 	.area IABS    (ABS,DATA)
                           1218 	.area IABS    (ABS,DATA)
                           1219 ;--------------------------------------------------------
                           1220 ; bit data
                           1221 ;--------------------------------------------------------
                           1222 	.area BSEG    (BIT)
                           1223 ;--------------------------------------------------------
                           1224 ; paged external ram data
                           1225 ;--------------------------------------------------------
                           1226 	.area PSEG    (PAG,XDATA)
                           1227 ;--------------------------------------------------------
                           1228 ; external ram data
                           1229 ;--------------------------------------------------------
                           1230 	.area XSEG    (XDATA)
                           1231 ;--------------------------------------------------------
                           1232 ; absolute external ram data
                           1233 ;--------------------------------------------------------
                           1234 	.area XABS    (ABS,XDATA)
                           1235 ;--------------------------------------------------------
                           1236 ; external initialized ram data
                           1237 ;--------------------------------------------------------
                           1238 	.area XISEG   (XDATA)
                           1239 	.area HOME    (CODE)
                           1240 	.area GSINIT0 (CODE)
                           1241 	.area GSINIT1 (CODE)
                           1242 	.area GSINIT2 (CODE)
                           1243 	.area GSINIT3 (CODE)
                           1244 	.area GSINIT4 (CODE)
                           1245 	.area GSINIT5 (CODE)
                           1246 	.area GSINIT  (CODE)
                           1247 	.area GSFINAL (CODE)
                           1248 	.area CSEG    (CODE)
                           1249 ;--------------------------------------------------------
                           1250 ; global & static initialisations
                           1251 ;--------------------------------------------------------
                           1252 	.area HOME    (CODE)
                           1253 	.area GSINIT  (CODE)
                           1254 	.area GSFINAL (CODE)
                           1255 	.area GSINIT  (CODE)
                           1256 ;--------------------------------------------------------
                           1257 ; Home
                           1258 ;--------------------------------------------------------
                           1259 	.area HOME    (CODE)
                           1260 	.area HOME    (CODE)
                           1261 ;--------------------------------------------------------
                           1262 ; code
                           1263 ;--------------------------------------------------------
                           1264 	.area CSEG    (CODE)
                           1265 ;------------------------------------------------------------
                           1266 ;Allocation info for local variables in function 'xQueueCreate'
                           1267 ;------------------------------------------------------------
                           1268 ;uxItemSize                Allocated to stack - offset -3
                           1269 ;uxQueueLength             Allocated to stack - offset 1
                           1270 ;pxNewQueue                Allocated to stack - offset 2
                           1271 ;xQueueSizeInBytes         Allocated to registers r2 r3 
                           1272 ;sloc0                     Allocated to stack - offset 5
                           1273 ;sloc1                     Allocated to stack - offset 8
                           1274 ;------------------------------------------------------------
                    0000   1275 	G$xQueueCreate$0$0 ==.
                    0000   1276 	C$queue.c$235$0$0 ==.
                           1277 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:235: xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
                           1278 ;	-----------------------------------------
                           1279 ;	 function xQueueCreate
                           1280 ;	-----------------------------------------
   0000                    1281 _xQueueCreate:
                    0002   1282 	ar2 = 0x02
                    0003   1283 	ar3 = 0x03
                    0004   1284 	ar4 = 0x04
                    0005   1285 	ar5 = 0x05
                    0006   1286 	ar6 = 0x06
                    0007   1287 	ar7 = 0x07
                    0000   1288 	ar0 = 0x00
                    0001   1289 	ar1 = 0x01
   0000 C0*00              1290 	push	_bp
   0002 85 81*00           1291 	mov	_bp,sp
   0005 C0 82              1292 	push	dpl
   0007 E5 81              1293 	mov	a,sp
   0009 24 09              1294 	add	a,#0x09
   000B F5 81              1295 	mov	sp,a
                    000D   1296 	C$queue.c$241$1$1 ==.
                           1297 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:241: if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   000D A8*00              1298 	mov	r0,_bp
   000F 08                 1299 	inc	r0
   0010 E6                 1300 	mov	a,@r0
   0011 70 03              1301 	jnz	00113$
   0013 02s02r6F           1302 	ljmp	00107$
   0016                    1303 00113$:
                    0016   1304 	C$queue.c$243$2$2 ==.
                           1305 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:243: pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   0016 75 82 29           1306 	mov	dpl,#0x29
   0019 75 83 00           1307 	mov	dph,#0x00
   001C 12s00r00           1308 	lcall	_pvPortMalloc
   001F AB 82              1309 	mov	r3,dpl
   0021 AC 83              1310 	mov	r4,dph
   0023 AD F0              1311 	mov	r5,b
   0025 A8*00              1312 	mov	r0,_bp
   0027 08                 1313 	inc	r0
   0028 08                 1314 	inc	r0
   0029 A6 03              1315 	mov	@r0,ar3
   002B 08                 1316 	inc	r0
   002C A6 04              1317 	mov	@r0,ar4
   002E 08                 1318 	inc	r0
   002F A6 05              1319 	mov	@r0,ar5
                    0031   1320 	C$queue.c$244$2$2 ==.
                           1321 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:244: if( pxNewQueue != NULL )
   0031 A8*00              1322 	mov	r0,_bp
   0033 08                 1323 	inc	r0
   0034 08                 1324 	inc	r0
   0035 B6 00 0B           1325 	cjne	@r0,#0x00,00114$
   0038 08                 1326 	inc	r0
   0039 B6 00 07           1327 	cjne	@r0,#0x00,00114$
   003C 08                 1328 	inc	r0
   003D B6 00 03           1329 	cjne	@r0,#0x00,00114$
   0040 02s02r6F           1330 	ljmp	00107$
   0043                    1331 00114$:
                    0043   1332 	C$queue.c$248$3$3 ==.
                           1333 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:248: xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   0043 A8*00              1334 	mov	r0,_bp
   0045 08                 1335 	inc	r0
   0046 A9*00              1336 	mov	r1,_bp
   0048 19                 1337 	dec	r1
   0049 19                 1338 	dec	r1
   004A 19                 1339 	dec	r1
   004B 86 F0              1340 	mov	b,@r0
   004D E7                 1341 	mov	a,@r1
   004E A4                 1342 	mul	ab
   004F FE                 1343 	mov	r6,a
   0050 AF F0              1344 	mov	r7,b
   0052 74 01              1345 	mov	a,#0x01
   0054 25 06              1346 	add	a,ar6
   0056 FA                 1347 	mov	r2,a
   0057 74 00              1348 	mov	a,#0x00
   0059 35 07              1349 	addc	a,ar7
   005B FB                 1350 	mov	r3,a
                    005C   1351 	C$queue.c$250$3$3 ==.
                           1352 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:250: pxNewQueue->pcHead = ( signed portCHAR * ) pvPortMalloc( xQueueSizeInBytes );
   005C 8A 82              1353 	mov	dpl,r2
   005E 8B 83              1354 	mov	dph,r3
   0060 C0 06              1355 	push	ar6
   0062 C0 07              1356 	push	ar7
   0064 12s00r00           1357 	lcall	_pvPortMalloc
   0067 AA 82              1358 	mov	r2,dpl
   0069 AB 83              1359 	mov	r3,dph
   006B AC F0              1360 	mov	r4,b
   006D D0 07              1361 	pop	ar7
   006F D0 06              1362 	pop	ar6
   0071 A8*00              1363 	mov	r0,_bp
   0073 08                 1364 	inc	r0
   0074 08                 1365 	inc	r0
   0075 86 82              1366 	mov	dpl,@r0
   0077 08                 1367 	inc	r0
   0078 86 83              1368 	mov	dph,@r0
   007A 08                 1369 	inc	r0
   007B 86 F0              1370 	mov	b,@r0
   007D EA                 1371 	mov	a,r2
   007E 12s00r00           1372 	lcall	__gptrput
   0081 A3                 1373 	inc	dptr
   0082 EB                 1374 	mov	a,r3
   0083 12s00r00           1375 	lcall	__gptrput
   0086 A3                 1376 	inc	dptr
   0087 EC                 1377 	mov	a,r4
   0088 12s00r00           1378 	lcall	__gptrput
                    008B   1379 	C$queue.c$251$3$3 ==.
                           1380 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:251: if( pxNewQueue->pcHead != NULL )
   008B BA 00 09           1381 	cjne	r2,#0x00,00115$
   008E BB 00 06           1382 	cjne	r3,#0x00,00115$
   0091 BC 00 03           1383 	cjne	r4,#0x00,00115$
   0094 02s02r60           1384 	ljmp	00102$
   0097                    1385 00115$:
                    0097   1386 	C$queue.c$255$4$4 ==.
                           1387 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:255: pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
   0097 A8*00              1388 	mov	r0,_bp
   0099 08                 1389 	inc	r0
   009A 08                 1390 	inc	r0
   009B E5*00              1391 	mov	a,_bp
   009D 24 05              1392 	add	a,#0x05
   009F F9                 1393 	mov	r1,a
   00A0 74 03              1394 	mov	a,#0x03
   00A2 26                 1395 	add	a,@r0
   00A3 F7                 1396 	mov	@r1,a
   00A4 74 00              1397 	mov	a,#0x00
   00A6 08                 1398 	inc	r0
   00A7 36                 1399 	addc	a,@r0
   00A8 09                 1400 	inc	r1
   00A9 F7                 1401 	mov	@r1,a
   00AA 08                 1402 	inc	r0
   00AB 09                 1403 	inc	r1
   00AC E6                 1404 	mov	a,@r0
   00AD F7                 1405 	mov	@r1,a
   00AE A8*00              1406 	mov	r0,_bp
   00B0 08                 1407 	inc	r0
   00B1 08                 1408 	inc	r0
   00B2 86 82              1409 	mov	dpl,@r0
   00B4 08                 1410 	inc	r0
   00B5 86 83              1411 	mov	dph,@r0
   00B7 08                 1412 	inc	r0
   00B8 86 F0              1413 	mov	b,@r0
   00BA 12s00r00           1414 	lcall	__gptrget
   00BD FD                 1415 	mov	r5,a
   00BE A3                 1416 	inc	dptr
   00BF 12s00r00           1417 	lcall	__gptrget
   00C2 FA                 1418 	mov	r2,a
   00C3 A3                 1419 	inc	dptr
   00C4 12s00r00           1420 	lcall	__gptrget
   00C7 FB                 1421 	mov	r3,a
   00C8 E5 06              1422 	mov	a,ar6
   00CA 25 05              1423 	add	a,ar5
   00CC FE                 1424 	mov	r6,a
   00CD E5 07              1425 	mov	a,ar7
   00CF 35 02              1426 	addc	a,ar2
   00D1 FF                 1427 	mov	r7,a
   00D2 8B 04              1428 	mov	ar4,r3
   00D4 E5*00              1429 	mov	a,_bp
   00D6 24 05              1430 	add	a,#0x05
   00D8 F8                 1431 	mov	r0,a
   00D9 86 82              1432 	mov	dpl,@r0
   00DB 08                 1433 	inc	r0
   00DC 86 83              1434 	mov	dph,@r0
   00DE 08                 1435 	inc	r0
   00DF 86 F0              1436 	mov	b,@r0
   00E1 EE                 1437 	mov	a,r6
   00E2 12s00r00           1438 	lcall	__gptrput
   00E5 A3                 1439 	inc	dptr
   00E6 EF                 1440 	mov	a,r7
   00E7 12s00r00           1441 	lcall	__gptrput
   00EA A3                 1442 	inc	dptr
   00EB EC                 1443 	mov	a,r4
   00EC 12s00r00           1444 	lcall	__gptrput
                    00EF   1445 	C$queue.c$256$4$4 ==.
                           1446 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:256: pxNewQueue->uxMessagesWaiting = 0;
   00EF A8*00              1447 	mov	r0,_bp
   00F1 08                 1448 	inc	r0
   00F2 08                 1449 	inc	r0
   00F3 74 24              1450 	mov	a,#0x24
   00F5 26                 1451 	add	a,@r0
   00F6 FC                 1452 	mov	r4,a
   00F7 74 00              1453 	mov	a,#0x00
   00F9 08                 1454 	inc	r0
   00FA 36                 1455 	addc	a,@r0
   00FB FE                 1456 	mov	r6,a
   00FC 08                 1457 	inc	r0
   00FD 86 07              1458 	mov	ar7,@r0
   00FF 8C 82              1459 	mov	dpl,r4
   0101 8E 83              1460 	mov	dph,r6
   0103 8F F0              1461 	mov	b,r7
   0105 74 00              1462 	mov	a,#0x00
   0107 12s00r00           1463 	lcall	__gptrput
                    010A   1464 	C$queue.c$257$4$4 ==.
                           1465 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:257: pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
   010A A8*00              1466 	mov	r0,_bp
   010C 08                 1467 	inc	r0
   010D 08                 1468 	inc	r0
   010E 74 06              1469 	mov	a,#0x06
   0110 26                 1470 	add	a,@r0
   0111 FC                 1471 	mov	r4,a
   0112 74 00              1472 	mov	a,#0x00
   0114 08                 1473 	inc	r0
   0115 36                 1474 	addc	a,@r0
   0116 FE                 1475 	mov	r6,a
   0117 08                 1476 	inc	r0
   0118 86 07              1477 	mov	ar7,@r0
   011A 8C 82              1478 	mov	dpl,r4
   011C 8E 83              1479 	mov	dph,r6
   011E 8F F0              1480 	mov	b,r7
   0120 ED                 1481 	mov	a,r5
   0121 12s00r00           1482 	lcall	__gptrput
   0124 A3                 1483 	inc	dptr
   0125 EA                 1484 	mov	a,r2
   0126 12s00r00           1485 	lcall	__gptrput
   0129 A3                 1486 	inc	dptr
   012A EB                 1487 	mov	a,r3
   012B 12s00r00           1488 	lcall	__gptrput
                    012E   1489 	C$queue.c$258$4$4 ==.
                           1490 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:258: pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - 1 ) * uxItemSize );
   012E A8*00              1491 	mov	r0,_bp
   0130 08                 1492 	inc	r0
   0131 08                 1493 	inc	r0
   0132 E5*00              1494 	mov	a,_bp
   0134 24 05              1495 	add	a,#0x05
   0136 F9                 1496 	mov	r1,a
   0137 74 09              1497 	mov	a,#0x09
   0139 26                 1498 	add	a,@r0
   013A F7                 1499 	mov	@r1,a
   013B 74 00              1500 	mov	a,#0x00
   013D 08                 1501 	inc	r0
   013E 36                 1502 	addc	a,@r0
   013F 09                 1503 	inc	r1
   0140 F7                 1504 	mov	@r1,a
   0141 08                 1505 	inc	r0
   0142 09                 1506 	inc	r1
   0143 E6                 1507 	mov	a,@r0
   0144 F7                 1508 	mov	@r1,a
   0145 A8*00              1509 	mov	r0,_bp
   0147 08                 1510 	inc	r0
   0148 86 04              1511 	mov	ar4,@r0
   014A 7E 00              1512 	mov	r6,#0x00
   014C E5*00              1513 	mov	a,_bp
   014E 24 08              1514 	add	a,#0x08
   0150 F8                 1515 	mov	r0,a
   0151 EC                 1516 	mov	a,r4
   0152 24 FF              1517 	add	a,#0xff
   0154 F6                 1518 	mov	@r0,a
   0155 EE                 1519 	mov	a,r6
   0156 34 FF              1520 	addc	a,#0xff
   0158 08                 1521 	inc	r0
   0159 F6                 1522 	mov	@r0,a
   015A A8*00              1523 	mov	r0,_bp
   015C 18                 1524 	dec	r0
   015D 18                 1525 	dec	r0
   015E 18                 1526 	dec	r0
   015F 86 07              1527 	mov	ar7,@r0
   0161 7C 00              1528 	mov	r4,#0x00
   0163 C0 02              1529 	push	ar2
   0165 C0 03              1530 	push	ar3
   0167 C0 05              1531 	push	ar5
   0169 C0 07              1532 	push	ar7
   016B C0 04              1533 	push	ar4
   016D E5*00              1534 	mov	a,_bp
   016F 24 08              1535 	add	a,#0x08
   0171 F8                 1536 	mov	r0,a
   0172 86 82              1537 	mov	dpl,@r0
   0174 08                 1538 	inc	r0
   0175 86 83              1539 	mov	dph,@r0
   0177 12s00r00           1540 	lcall	__mulint
   017A AC 82              1541 	mov	r4,dpl
   017C AE 83              1542 	mov	r6,dph
   017E 15 81              1543 	dec	sp
   0180 15 81              1544 	dec	sp
   0182 D0 05              1545 	pop	ar5
   0184 D0 03              1546 	pop	ar3
   0186 D0 02              1547 	pop	ar2
   0188 E5 04              1548 	mov	a,ar4
   018A 25 05              1549 	add	a,ar5
   018C FD                 1550 	mov	r5,a
   018D E5 06              1551 	mov	a,ar6
   018F 35 02              1552 	addc	a,ar2
   0191 FA                 1553 	mov	r2,a
   0192 E5*00              1554 	mov	a,_bp
   0194 24 05              1555 	add	a,#0x05
   0196 F8                 1556 	mov	r0,a
   0197 86 82              1557 	mov	dpl,@r0
   0199 08                 1558 	inc	r0
   019A 86 83              1559 	mov	dph,@r0
   019C 08                 1560 	inc	r0
   019D 86 F0              1561 	mov	b,@r0
   019F ED                 1562 	mov	a,r5
   01A0 12s00r00           1563 	lcall	__gptrput
   01A3 A3                 1564 	inc	dptr
   01A4 EA                 1565 	mov	a,r2
   01A5 12s00r00           1566 	lcall	__gptrput
   01A8 A3                 1567 	inc	dptr
   01A9 EB                 1568 	mov	a,r3
   01AA 12s00r00           1569 	lcall	__gptrput
                    01AD   1570 	C$queue.c$259$4$4 ==.
                           1571 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:259: pxNewQueue->uxLength = uxQueueLength;
   01AD A8*00              1572 	mov	r0,_bp
   01AF 08                 1573 	inc	r0
   01B0 08                 1574 	inc	r0
   01B1 74 25              1575 	mov	a,#0x25
   01B3 26                 1576 	add	a,@r0
   01B4 FA                 1577 	mov	r2,a
   01B5 74 00              1578 	mov	a,#0x00
   01B7 08                 1579 	inc	r0
   01B8 36                 1580 	addc	a,@r0
   01B9 FB                 1581 	mov	r3,a
   01BA 08                 1582 	inc	r0
   01BB 86 04              1583 	mov	ar4,@r0
   01BD 8A 82              1584 	mov	dpl,r2
   01BF 8B 83              1585 	mov	dph,r3
   01C1 8C F0              1586 	mov	b,r4
   01C3 A8*00              1587 	mov	r0,_bp
   01C5 08                 1588 	inc	r0
   01C6 E6                 1589 	mov	a,@r0
   01C7 12s00r00           1590 	lcall	__gptrput
                    01CA   1591 	C$queue.c$260$4$4 ==.
                           1592 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:260: pxNewQueue->uxItemSize = uxItemSize;
   01CA A8*00              1593 	mov	r0,_bp
   01CC 08                 1594 	inc	r0
   01CD 08                 1595 	inc	r0
   01CE 74 26              1596 	mov	a,#0x26
   01D0 26                 1597 	add	a,@r0
   01D1 FA                 1598 	mov	r2,a
   01D2 74 00              1599 	mov	a,#0x00
   01D4 08                 1600 	inc	r0
   01D5 36                 1601 	addc	a,@r0
   01D6 FB                 1602 	mov	r3,a
   01D7 08                 1603 	inc	r0
   01D8 86 04              1604 	mov	ar4,@r0
   01DA 8A 82              1605 	mov	dpl,r2
   01DC 8B 83              1606 	mov	dph,r3
   01DE 8C F0              1607 	mov	b,r4
   01E0 A8*00              1608 	mov	r0,_bp
   01E2 18                 1609 	dec	r0
   01E3 18                 1610 	dec	r0
   01E4 18                 1611 	dec	r0
   01E5 E6                 1612 	mov	a,@r0
   01E6 12s00r00           1613 	lcall	__gptrput
                    01E9   1614 	C$queue.c$261$4$4 ==.
                           1615 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:261: pxNewQueue->xRxLock = queueUNLOCKED;
   01E9 A8*00              1616 	mov	r0,_bp
   01EB 08                 1617 	inc	r0
   01EC 08                 1618 	inc	r0
   01ED 74 27              1619 	mov	a,#0x27
   01EF 26                 1620 	add	a,@r0
   01F0 FA                 1621 	mov	r2,a
   01F1 74 00              1622 	mov	a,#0x00
   01F3 08                 1623 	inc	r0
   01F4 36                 1624 	addc	a,@r0
   01F5 FB                 1625 	mov	r3,a
   01F6 08                 1626 	inc	r0
   01F7 86 04              1627 	mov	ar4,@r0
   01F9 8A 82              1628 	mov	dpl,r2
   01FB 8B 83              1629 	mov	dph,r3
   01FD 8C F0              1630 	mov	b,r4
   01FF 74 FF              1631 	mov	a,#0xFF
   0201 12s00r00           1632 	lcall	__gptrput
                    0204   1633 	C$queue.c$262$4$4 ==.
                           1634 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:262: pxNewQueue->xTxLock = queueUNLOCKED;
   0204 A8*00              1635 	mov	r0,_bp
   0206 08                 1636 	inc	r0
   0207 08                 1637 	inc	r0
   0208 74 28              1638 	mov	a,#0x28
   020A 26                 1639 	add	a,@r0
   020B FA                 1640 	mov	r2,a
   020C 74 00              1641 	mov	a,#0x00
   020E 08                 1642 	inc	r0
   020F 36                 1643 	addc	a,@r0
   0210 FB                 1644 	mov	r3,a
   0211 08                 1645 	inc	r0
   0212 86 04              1646 	mov	ar4,@r0
   0214 8A 82              1647 	mov	dpl,r2
   0216 8B 83              1648 	mov	dph,r3
   0218 8C F0              1649 	mov	b,r4
   021A 74 FF              1650 	mov	a,#0xFF
   021C 12s00r00           1651 	lcall	__gptrput
                    021F   1652 	C$queue.c$265$4$4 ==.
                           1653 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:265: vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
   021F A8*00              1654 	mov	r0,_bp
   0221 08                 1655 	inc	r0
   0222 08                 1656 	inc	r0
   0223 74 0C              1657 	mov	a,#0x0C
   0225 26                 1658 	add	a,@r0
   0226 FA                 1659 	mov	r2,a
   0227 74 00              1660 	mov	a,#0x00
   0229 08                 1661 	inc	r0
   022A 36                 1662 	addc	a,@r0
   022B FB                 1663 	mov	r3,a
   022C 08                 1664 	inc	r0
   022D 86 04              1665 	mov	ar4,@r0
   022F 8A 82              1666 	mov	dpl,r2
   0231 8B 83              1667 	mov	dph,r3
   0233 8C F0              1668 	mov	b,r4
   0235 12s00r00           1669 	lcall	_vListInitialise
                    0238   1670 	C$queue.c$266$4$4 ==.
                           1671 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:266: vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
   0238 A8*00              1672 	mov	r0,_bp
   023A 08                 1673 	inc	r0
   023B 08                 1674 	inc	r0
   023C 74 18              1675 	mov	a,#0x18
   023E 26                 1676 	add	a,@r0
   023F FA                 1677 	mov	r2,a
   0240 74 00              1678 	mov	a,#0x00
   0242 08                 1679 	inc	r0
   0243 36                 1680 	addc	a,@r0
   0244 FB                 1681 	mov	r3,a
   0245 08                 1682 	inc	r0
   0246 86 04              1683 	mov	ar4,@r0
   0248 8A 82              1684 	mov	dpl,r2
   024A 8B 83              1685 	mov	dph,r3
   024C 8C F0              1686 	mov	b,r4
   024E 12s00r00           1687 	lcall	_vListInitialise
                    0251   1688 	C$queue.c$270$4$4 ==.
                           1689 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:270: return  pxNewQueue;
   0251 A8*00              1690 	mov	r0,_bp
   0253 08                 1691 	inc	r0
   0254 08                 1692 	inc	r0
   0255 86 82              1693 	mov	dpl,@r0
   0257 08                 1694 	inc	r0
   0258 86 83              1695 	mov	dph,@r0
   025A 08                 1696 	inc	r0
   025B 86 F0              1697 	mov	b,@r0
   025D 02s02r78           1698 	ljmp	00108$
   0260                    1699 00102$:
                    0260   1700 	C$queue.c$275$4$5 ==.
                           1701 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:275: vPortFree( pxNewQueue );
   0260 A8*00              1702 	mov	r0,_bp
   0262 08                 1703 	inc	r0
   0263 08                 1704 	inc	r0
   0264 86 82              1705 	mov	dpl,@r0
   0266 08                 1706 	inc	r0
   0267 86 83              1707 	mov	dph,@r0
   0269 08                 1708 	inc	r0
   026A 86 F0              1709 	mov	b,@r0
   026C 12s00r00           1710 	lcall	_vPortFree
   026F                    1711 00107$:
                    026F   1712 	C$queue.c$282$1$1 ==.
                           1713 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:282: return NULL;
   026F 75 82 00           1714 	mov	dpl,#0x00
   0272 75 83 00           1715 	mov	dph,#0x00
   0275 75 F0 00           1716 	mov	b,#0x00
   0278                    1717 00108$:
   0278 85*00 81           1718 	mov	sp,_bp
   027B D0*00              1719 	pop	_bp
                    027D   1720 	C$queue.c$283$1$1 ==.
                    027D   1721 	XG$xQueueCreate$0$0 ==.
   027D 22                 1722 	ret
                           1723 ;------------------------------------------------------------
                           1724 ;Allocation info for local variables in function 'xQueueGenericSend'
                           1725 ;------------------------------------------------------------
                           1726 ;pvItemToQueue             Allocated to stack - offset -5
                           1727 ;xTicksToWait              Allocated to stack - offset -7
                           1728 ;xCopyPosition             Allocated to stack - offset -8
                           1729 ;pxQueue                   Allocated to stack - offset 1
                           1730 ;xReturn                   Allocated to stack - offset 4
                           1731 ;xTimeOut                  Allocated to stack - offset 5
                           1732 ;sloc0                     Allocated to stack - offset 8
                           1733 ;------------------------------------------------------------
                    027E   1734 	G$xQueueGenericSend$0$0 ==.
                    027E   1735 	C$queue.c$440$1$1 ==.
                           1736 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:440: signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
                           1737 ;	-----------------------------------------
                           1738 ;	 function xQueueGenericSend
                           1739 ;	-----------------------------------------
   027E                    1740 _xQueueGenericSend:
   027E C0*00              1741 	push	_bp
   0280 85 81*00           1742 	mov	_bp,sp
   0283 C0 82              1743 	push	dpl
   0285 C0 83              1744 	push	dph
   0287 C0 F0              1745 	push	b
   0289 E5 81              1746 	mov	a,sp
   028B 24 07              1747 	add	a,#0x07
   028D F5 81              1748 	mov	sp,a
                    028F   1749 	C$queue.c$442$1$1 ==.
                           1750 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:442: signed portBASE_TYPE xReturn = pdTRUE;
   028F E5*00              1751 	mov	a,_bp
   0291 24 04              1752 	add	a,#0x04
   0293 F8                 1753 	mov	r0,a
   0294 76 01              1754 	mov	@r0,#0x01
                    0296   1755 	C$queue.c$445$3$14 ==.
                           1756 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:445: do
   0296 A8*00              1757 	mov	r0,_bp
   0298 08                 1758 	inc	r0
   0299 74 25              1759 	mov	a,#0x25
   029B 26                 1760 	add	a,@r0
   029C FE                 1761 	mov	r6,a
   029D 74 00              1762 	mov	a,#0x00
   029F 08                 1763 	inc	r0
   02A0 36                 1764 	addc	a,@r0
   02A1 FF                 1765 	mov	r7,a
   02A2 08                 1766 	inc	r0
   02A3 86 05              1767 	mov	ar5,@r0
   02A5                    1768 00130$:
                    02A5   1769 	C$queue.c$449$2$2 ==.
                           1770 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:449: if( xTicksToWait > ( portTickType ) 0 )
   02A5 E5*00              1771 	mov	a,_bp
   02A7 24 F9              1772 	add	a,#0xf9
   02A9 F8                 1773 	mov	r0,a
   02AA E6                 1774 	mov	a,@r0
   02AB 08                 1775 	inc	r0
   02AC 46                 1776 	orl	a,@r0
   02AD 70 03              1777 	jnz	00150$
   02AF 02s04rAC           1778 	ljmp	00116$
   02B2                    1779 00150$:
                    02B2   1780 	C$queue.c$451$1$1 ==.
                           1781 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:451: vTaskSuspendAll();
   02B2 C0 06              1782 	push	ar6
   02B4 C0 07              1783 	push	ar7
   02B6 C0 05              1784 	push	ar5
   02B8 C0 05              1785 	push	ar5
   02BA C0 06              1786 	push	ar6
   02BC C0 07              1787 	push	ar7
   02BE 12s00r00           1788 	lcall	_vTaskSuspendAll
   02C1 D0 07              1789 	pop	ar7
   02C3 D0 06              1790 	pop	ar6
   02C5 D0 05              1791 	pop	ar5
                    02C7   1792 	C$queue.c$452$4$4 ==.
                           1793 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:452: prvLockQueue( pxQueue );
   02C7 C0 E0 C0 A8        1794 	 push ACC push IE 
   02CB C2 AF              1795 	clr	_EA
   02CD A8*00              1796 	mov	r0,_bp
   02CF 08                 1797 	inc	r0
   02D0 74 27              1798 	mov	a,#0x27
   02D2 26                 1799 	add	a,@r0
   02D3 FA                 1800 	mov	r2,a
   02D4 74 00              1801 	mov	a,#0x00
   02D6 08                 1802 	inc	r0
   02D7 36                 1803 	addc	a,@r0
   02D8 FB                 1804 	mov	r3,a
   02D9 08                 1805 	inc	r0
   02DA 86 04              1806 	mov	ar4,@r0
   02DC 8A 82              1807 	mov	dpl,r2
   02DE 8B 83              1808 	mov	dph,r3
   02E0 8C F0              1809 	mov	b,r4
   02E2 12s00r00           1810 	lcall	__gptrget
   02E5 FD                 1811 	mov	r5,a
   02E6 BD FF 04           1812 	cjne	r5,#0xFF,00151$
   02E9 74 01              1813 	mov	a,#0x01
   02EB 80 02              1814 	sjmp	00152$
   02ED                    1815 00151$:
   02ED 74 00              1816 	mov	a,#0x00
   02EF                    1817 00152$:
   02EF D0 05              1818 	pop	ar5
   02F1 D0 07              1819 	pop	ar7
   02F3 D0 06              1820 	pop	ar6
   02F5 70 03              1821 	jnz	00153$
   02F7 02s03r05           1822 	ljmp	00102$
   02FA                    1823 00153$:
   02FA 8A 82              1824 	mov	dpl,r2
   02FC 8B 83              1825 	mov	dph,r3
   02FE 8C F0              1826 	mov	b,r4
   0300 74 00              1827 	mov	a,#0x00
   0302 12s00r00           1828 	lcall	__gptrput
   0305                    1829 00102$:
   0305 C0 06              1830 	push	ar6
   0307 C0 07              1831 	push	ar7
   0309 C0 05              1832 	push	ar5
   030B A8*00              1833 	mov	r0,_bp
   030D 08                 1834 	inc	r0
   030E 74 28              1835 	mov	a,#0x28
   0310 26                 1836 	add	a,@r0
   0311 FA                 1837 	mov	r2,a
   0312 74 00              1838 	mov	a,#0x00
   0314 08                 1839 	inc	r0
   0315 36                 1840 	addc	a,@r0
   0316 FB                 1841 	mov	r3,a
   0317 08                 1842 	inc	r0
   0318 86 04              1843 	mov	ar4,@r0
   031A 8A 82              1844 	mov	dpl,r2
   031C 8B 83              1845 	mov	dph,r3
   031E 8C F0              1846 	mov	b,r4
   0320 12s00r00           1847 	lcall	__gptrget
   0323 FD                 1848 	mov	r5,a
   0324 BD FF 04           1849 	cjne	r5,#0xFF,00154$
   0327 74 01              1850 	mov	a,#0x01
   0329 80 02              1851 	sjmp	00155$
   032B                    1852 00154$:
   032B 74 00              1853 	mov	a,#0x00
   032D                    1854 00155$:
   032D D0 05              1855 	pop	ar5
   032F D0 07              1856 	pop	ar7
   0331 D0 06              1857 	pop	ar6
   0333 70 03              1858 	jnz	00156$
   0335 02s03r43           1859 	ljmp	00104$
   0338                    1860 00156$:
   0338 8A 82              1861 	mov	dpl,r2
   033A 8B 83              1862 	mov	dph,r3
   033C 8C F0              1863 	mov	b,r4
   033E 74 00              1864 	mov	a,#0x00
   0340 12s00r00           1865 	lcall	__gptrput
   0343                    1866 00104$:
   0343 D0 E0              1867 	 pop ACC 
   0345 53 E0 80           1868 	anl	_ACC,#0x80
   0348 E5 E0              1869 	mov	a,_ACC
   034A 42 A8              1870 	orl	_IE,a
   034C D0 E0              1871 	 pop ACC 
                    034E   1872 	C$queue.c$454$3$3 ==.
                           1873 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:454: if( xReturn == pdTRUE )
   034E E5*00              1874 	mov	a,_bp
   0350 24 04              1875 	add	a,#0x04
   0352 F8                 1876 	mov	r0,a
   0353 B6 01 02           1877 	cjne	@r0,#0x01,00157$
   0356 80 03              1878 	sjmp	00158$
   0358                    1879 00157$:
   0358 02s03r85           1880 	ljmp	00106$
   035B                    1881 00158$:
                    035B   1882 	C$queue.c$459$1$1 ==.
                           1883 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:459: vTaskSetTimeOutState( &xTimeOut );
   035B C0 06              1884 	push	ar6
   035D C0 07              1885 	push	ar7
   035F C0 05              1886 	push	ar5
   0361 E5*00              1887 	mov	a,_bp
   0363 24 05              1888 	add	a,#0x05
   0365 FD                 1889 	mov	r5,a
   0366 7E 00              1890 	mov	r6,#0x00
   0368 7F 40              1891 	mov	r7,#0x40
   036A 8D 82              1892 	mov	dpl,r5
   036C 8E 83              1893 	mov	dph,r6
   036E 8F F0              1894 	mov	b,r7
   0370 C0 05              1895 	push	ar5
   0372 C0 06              1896 	push	ar6
   0374 C0 07              1897 	push	ar7
   0376 12s00r00           1898 	lcall	_vTaskSetTimeOutState
   0379 D0 07              1899 	pop	ar7
   037B D0 06              1900 	pop	ar6
   037D D0 05              1901 	pop	ar5
                    037F   1902 	C$queue.c$563$1$1 ==.
                           1903 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:563: return xReturn;
   037F D0 05              1904 	pop	ar5
   0381 D0 07              1905 	pop	ar7
   0383 D0 06              1906 	pop	ar6
                    0385   1907 	C$queue.c$459$3$3 ==.
                           1908 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:459: vTaskSetTimeOutState( &xTimeOut );
   0385                    1909 00106$:
                    0385   1910 	C$queue.c$462$3$3 ==.
                           1911 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:462: if( prvIsQueueFull( pxQueue ) )
   0385 A8*00              1912 	mov	r0,_bp
   0387 08                 1913 	inc	r0
   0388 86 82              1914 	mov	dpl,@r0
   038A 08                 1915 	inc	r0
   038B 86 83              1916 	mov	dph,@r0
   038D 08                 1917 	inc	r0
   038E 86 F0              1918 	mov	b,@r0
   0390 C0 05              1919 	push	ar5
   0392 C0 06              1920 	push	ar6
   0394 C0 07              1921 	push	ar7
   0396 12s12r5B           1922 	lcall	_prvIsQueueFull
   0399 E5 82              1923 	mov	a,dpl
   039B D0 07              1924 	pop	ar7
   039D D0 06              1925 	pop	ar6
   039F D0 05              1926 	pop	ar5
   03A1 70 03              1927 	jnz	00159$
   03A3 02s04r83           1928 	ljmp	00113$
   03A6                    1929 00159$:
                    03A6   1930 	C$queue.c$467$1$1 ==.
                           1931 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:467: if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   03A6 C0 06              1932 	push	ar6
   03A8 C0 07              1933 	push	ar7
   03AA C0 05              1934 	push	ar5
   03AC E5*00              1935 	mov	a,_bp
   03AE 24 F9              1936 	add	a,#0xf9
   03B0 FD                 1937 	mov	r5,a
   03B1 7E 00              1938 	mov	r6,#0x00
   03B3 7F 40              1939 	mov	r7,#0x40
   03B5 E5*00              1940 	mov	a,_bp
   03B7 24 05              1941 	add	a,#0x05
   03B9 FA                 1942 	mov	r2,a
   03BA 7B 00              1943 	mov	r3,#0x00
   03BC 7C 40              1944 	mov	r4,#0x40
   03BE C0 05              1945 	push	ar5
   03C0 C0 06              1946 	push	ar6
   03C2 C0 07              1947 	push	ar7
   03C4 C0 05              1948 	push	ar5
   03C6 C0 06              1949 	push	ar6
   03C8 C0 07              1950 	push	ar7
   03CA 8A 82              1951 	mov	dpl,r2
   03CC 8B 83              1952 	mov	dph,r3
   03CE 8C F0              1953 	mov	b,r4
   03D0 12s00r00           1954 	lcall	_xTaskCheckForTimeOut
   03D3 AA 82              1955 	mov	r2,dpl
   03D5 15 81              1956 	dec	sp
   03D7 15 81              1957 	dec	sp
   03D9 15 81              1958 	dec	sp
   03DB D0 07              1959 	pop	ar7
   03DD D0 06              1960 	pop	ar6
   03DF D0 05              1961 	pop	ar5
   03E1 D0 05              1962 	pop	ar5
   03E3 D0 07              1963 	pop	ar7
   03E5 D0 06              1964 	pop	ar6
   03E7 EA                 1965 	mov	a,r2
   03E8 60 03              1966 	jz	00160$
   03EA 02s04r57           1967 	ljmp	00110$
   03ED                    1968 00160$:
                    03ED   1969 	C$queue.c$470$5$10 ==.
                           1970 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:470: vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   03ED A8*00              1971 	mov	r0,_bp
   03EF 08                 1972 	inc	r0
   03F0 74 0C              1973 	mov	a,#0x0C
   03F2 26                 1974 	add	a,@r0
   03F3 FA                 1975 	mov	r2,a
   03F4 74 00              1976 	mov	a,#0x00
   03F6 08                 1977 	inc	r0
   03F7 36                 1978 	addc	a,@r0
   03F8 FB                 1979 	mov	r3,a
   03F9 08                 1980 	inc	r0
   03FA 86 04              1981 	mov	ar4,@r0
   03FC C0 05              1982 	push	ar5
   03FE C0 06              1983 	push	ar6
   0400 C0 07              1984 	push	ar7
   0402 E5*00              1985 	mov	a,_bp
   0404 24 F9              1986 	add	a,#0xf9
   0406 F8                 1987 	mov	r0,a
   0407 E6                 1988 	mov	a,@r0
   0408 C0 E0              1989 	push	acc
   040A 08                 1990 	inc	r0
   040B E6                 1991 	mov	a,@r0
   040C C0 E0              1992 	push	acc
   040E 8A 82              1993 	mov	dpl,r2
   0410 8B 83              1994 	mov	dph,r3
   0412 8C F0              1995 	mov	b,r4
   0414 12s00r00           1996 	lcall	_vTaskPlaceOnEventList
   0417 15 81              1997 	dec	sp
   0419 15 81              1998 	dec	sp
   041B D0 07              1999 	pop	ar7
   041D D0 06              2000 	pop	ar6
   041F D0 05              2001 	pop	ar5
                    0421   2002 	C$queue.c$477$5$10 ==.
                           2003 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:477: prvUnlockQueue( pxQueue );
   0421 A8*00              2004 	mov	r0,_bp
   0423 08                 2005 	inc	r0
   0424 86 82              2006 	mov	dpl,@r0
   0426 08                 2007 	inc	r0
   0427 86 83              2008 	mov	dph,@r0
   0429 08                 2009 	inc	r0
   042A 86 F0              2010 	mov	b,@r0
   042C C0 05              2011 	push	ar5
   042E C0 06              2012 	push	ar6
   0430 C0 07              2013 	push	ar7
   0432 12s10r3D           2014 	lcall	_prvUnlockQueue
   0435 D0 07              2015 	pop	ar7
   0437 D0 06              2016 	pop	ar6
   0439 D0 05              2017 	pop	ar5
                    043B   2018 	C$queue.c$484$5$10 ==.
                           2019 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:484: if( !xTaskResumeAll() )
   043B C0 05              2020 	push	ar5
   043D C0 06              2021 	push	ar6
   043F C0 07              2022 	push	ar7
   0441 12s00r00           2023 	lcall	_xTaskResumeAll
   0444 E5 82              2024 	mov	a,dpl
   0446 D0 07              2025 	pop	ar7
   0448 D0 06              2026 	pop	ar6
   044A D0 05              2027 	pop	ar5
   044C 60 03              2028 	jz	00161$
   044E 02s04rAC           2029 	ljmp	00116$
   0451                    2030 00161$:
                    0451   2031 	C$queue.c$486$6$11 ==.
                           2032 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:486: taskYIELD();
   0451 12s00r00           2033 	lcall	_vPortYield
   0454 02s04rAC           2034 	ljmp	00116$
   0457                    2035 00110$:
                    0457   2036 	C$queue.c$491$5$12 ==.
                           2037 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:491: prvUnlockQueue( pxQueue );
   0457 A8*00              2038 	mov	r0,_bp
   0459 08                 2039 	inc	r0
   045A 86 82              2040 	mov	dpl,@r0
   045C 08                 2041 	inc	r0
   045D 86 83              2042 	mov	dph,@r0
   045F 08                 2043 	inc	r0
   0460 86 F0              2044 	mov	b,@r0
   0462 C0 05              2045 	push	ar5
   0464 C0 06              2046 	push	ar6
   0466 C0 07              2047 	push	ar7
   0468 12s10r3D           2048 	lcall	_prvUnlockQueue
   046B D0 07              2049 	pop	ar7
   046D D0 06              2050 	pop	ar6
   046F D0 05              2051 	pop	ar5
                    0471   2052 	C$queue.c$492$5$12 ==.
                           2053 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:492: ( void ) xTaskResumeAll();
   0471 C0 05              2054 	push	ar5
   0473 C0 06              2055 	push	ar6
   0475 C0 07              2056 	push	ar7
   0477 12s00r00           2057 	lcall	_xTaskResumeAll
   047A D0 07              2058 	pop	ar7
   047C D0 06              2059 	pop	ar6
   047E D0 05              2060 	pop	ar5
   0480 02s04rAC           2061 	ljmp	00116$
   0483                    2062 00113$:
                    0483   2063 	C$queue.c$499$4$13 ==.
                           2064 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:499: prvUnlockQueue( pxQueue );
   0483 A8*00              2065 	mov	r0,_bp
   0485 08                 2066 	inc	r0
   0486 86 82              2067 	mov	dpl,@r0
   0488 08                 2068 	inc	r0
   0489 86 83              2069 	mov	dph,@r0
   048B 08                 2070 	inc	r0
   048C 86 F0              2071 	mov	b,@r0
   048E C0 05              2072 	push	ar5
   0490 C0 06              2073 	push	ar6
   0492 C0 07              2074 	push	ar7
   0494 12s10r3D           2075 	lcall	_prvUnlockQueue
   0497 D0 07              2076 	pop	ar7
   0499 D0 06              2077 	pop	ar6
   049B D0 05              2078 	pop	ar5
                    049D   2079 	C$queue.c$500$4$13 ==.
                           2080 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:500: ( void ) xTaskResumeAll();
   049D C0 05              2081 	push	ar5
   049F C0 06              2082 	push	ar6
   04A1 C0 07              2083 	push	ar7
   04A3 12s00r00           2084 	lcall	_xTaskResumeAll
   04A6 D0 07              2085 	pop	ar7
   04A8 D0 06              2086 	pop	ar6
   04AA D0 05              2087 	pop	ar5
   04AC                    2088 00116$:
                    04AC   2089 	C$queue.c$508$2$2 ==.
                           2090 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:508: taskENTER_CRITICAL();
   04AC C0 E0 C0 A8        2091 	 push ACC push IE 
   04B0 C2 AF              2092 	clr	_EA
                    04B2   2093 	C$queue.c$512$3$14 ==.
                           2094 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:512: if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   04B2 A8*00              2095 	mov	r0,_bp
   04B4 08                 2096 	inc	r0
   04B5 74 24              2097 	mov	a,#0x24
   04B7 26                 2098 	add	a,@r0
   04B8 FA                 2099 	mov	r2,a
   04B9 74 00              2100 	mov	a,#0x00
   04BB 08                 2101 	inc	r0
   04BC 36                 2102 	addc	a,@r0
   04BD FB                 2103 	mov	r3,a
   04BE 08                 2104 	inc	r0
   04BF 86 04              2105 	mov	ar4,@r0
   04C1 8A 82              2106 	mov	dpl,r2
   04C3 8B 83              2107 	mov	dph,r3
   04C5 8C F0              2108 	mov	b,r4
   04C7 12s00r00           2109 	lcall	__gptrget
   04CA FA                 2110 	mov	r2,a
   04CB 8E 82              2111 	mov	dpl,r6
   04CD 8F 83              2112 	mov	dph,r7
   04CF 8D F0              2113 	mov	b,r5
   04D1 12s00r00           2114 	lcall	__gptrget
   04D4 FB                 2115 	mov	r3,a
   04D5 C3                 2116 	clr	c
   04D6 EA                 2117 	mov	a,r2
   04D7 9B                 2118 	subb	a,r3
   04D8 40 03              2119 	jc	00162$
   04DA 02s05r6F           2120 	ljmp	00122$
   04DD                    2121 00162$:
                    04DD   2122 	C$queue.c$515$4$15 ==.
                           2123 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:515: prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   04DD C0 05              2124 	push	ar5
   04DF C0 06              2125 	push	ar6
   04E1 C0 07              2126 	push	ar7
   04E3 E5*00              2127 	mov	a,_bp
   04E5 24 F8              2128 	add	a,#0xf8
   04E7 F8                 2129 	mov	r0,a
   04E8 E6                 2130 	mov	a,@r0
   04E9 C0 E0              2131 	push	acc
   04EB E5*00              2132 	mov	a,_bp
   04ED 24 FB              2133 	add	a,#0xfb
   04EF F8                 2134 	mov	r0,a
   04F0 E6                 2135 	mov	a,@r0
   04F1 C0 E0              2136 	push	acc
   04F3 08                 2137 	inc	r0
   04F4 E6                 2138 	mov	a,@r0
   04F5 C0 E0              2139 	push	acc
   04F7 08                 2140 	inc	r0
   04F8 E6                 2141 	mov	a,@r0
   04F9 C0 E0              2142 	push	acc
   04FB A8*00              2143 	mov	r0,_bp
   04FD 08                 2144 	inc	r0
   04FE 86 82              2145 	mov	dpl,@r0
   0500 08                 2146 	inc	r0
   0501 86 83              2147 	mov	dph,@r0
   0503 08                 2148 	inc	r0
   0504 86 F0              2149 	mov	b,@r0
   0506 12s0Cr07           2150 	lcall	_prvCopyDataToQueue
   0509 E5 81              2151 	mov	a,sp
   050B 24 FC              2152 	add	a,#0xfc
   050D F5 81              2153 	mov	sp,a
   050F D0 07              2154 	pop	ar7
   0511 D0 06              2155 	pop	ar6
   0513 D0 05              2156 	pop	ar5
                    0515   2157 	C$queue.c$516$4$15 ==.
                           2158 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:516: xReturn = pdPASS;
   0515 E5*00              2159 	mov	a,_bp
   0517 24 04              2160 	add	a,#0x04
   0519 F8                 2161 	mov	r0,a
   051A 76 01              2162 	mov	@r0,#0x01
                    051C   2163 	C$queue.c$520$4$15 ==.
                           2164 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:520: if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   051C A8*00              2165 	mov	r0,_bp
   051E 08                 2166 	inc	r0
   051F 74 18              2167 	mov	a,#0x18
   0521 26                 2168 	add	a,@r0
   0522 FA                 2169 	mov	r2,a
   0523 74 00              2170 	mov	a,#0x00
   0525 08                 2171 	inc	r0
   0526 36                 2172 	addc	a,@r0
   0527 FB                 2173 	mov	r3,a
   0528 08                 2174 	inc	r0
   0529 86 04              2175 	mov	ar4,@r0
   052B 8A 82              2176 	mov	dpl,r2
   052D 8B 83              2177 	mov	dph,r3
   052F 8C F0              2178 	mov	b,r4
   0531 12s00r00           2179 	lcall	__gptrget
   0534 FA                 2180 	mov	r2,a
   0535 BA 00 03           2181 	cjne	r2,#0x00,00163$
   0538 02s05r76           2182 	ljmp	00123$
   053B                    2183 00163$:
                    053B   2184 	C$queue.c$522$5$16 ==.
                           2185 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:522: if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   053B A8*00              2186 	mov	r0,_bp
   053D 08                 2187 	inc	r0
   053E 74 18              2188 	mov	a,#0x18
   0540 26                 2189 	add	a,@r0
   0541 FA                 2190 	mov	r2,a
   0542 74 00              2191 	mov	a,#0x00
   0544 08                 2192 	inc	r0
   0545 36                 2193 	addc	a,@r0
   0546 FB                 2194 	mov	r3,a
   0547 08                 2195 	inc	r0
   0548 86 04              2196 	mov	ar4,@r0
   054A 8A 82              2197 	mov	dpl,r2
   054C 8B 83              2198 	mov	dph,r3
   054E 8C F0              2199 	mov	b,r4
   0550 C0 05              2200 	push	ar5
   0552 C0 06              2201 	push	ar6
   0554 C0 07              2202 	push	ar7
   0556 12s00r00           2203 	lcall	_xTaskRemoveFromEventList
   0559 AA 82              2204 	mov	r2,dpl
   055B D0 07              2205 	pop	ar7
   055D D0 06              2206 	pop	ar6
   055F D0 05              2207 	pop	ar5
   0561 BA 01 02           2208 	cjne	r2,#0x01,00164$
   0564 80 03              2209 	sjmp	00165$
   0566                    2210 00164$:
   0566 02s05r76           2211 	ljmp	00123$
   0569                    2212 00165$:
                    0569   2213 	C$queue.c$526$6$17 ==.
                           2214 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:526: taskYIELD();
   0569 12s00r00           2215 	lcall	_vPortYield
   056C 02s05r76           2216 	ljmp	00123$
   056F                    2217 00122$:
                    056F   2218 	C$queue.c$537$4$18 ==.
                           2219 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:537: xReturn = errQUEUE_FULL;
   056F E5*00              2220 	mov	a,_bp
   0571 24 04              2221 	add	a,#0x04
   0573 F8                 2222 	mov	r0,a
   0574 76 00              2223 	mov	@r0,#0x00
   0576                    2224 00123$:
                    0576   2225 	C$queue.c$540$2$2 ==.
                           2226 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:540: taskEXIT_CRITICAL();
   0576 D0 E0              2227 	 pop ACC 
   0578 53 E0 80           2228 	anl	_ACC,#0x80
   057B E5 E0              2229 	mov	a,_ACC
   057D 42 A8              2230 	orl	_IE,a
   057F D0 E0              2231 	 pop ACC 
                    0581   2232 	C$queue.c$542$2$2 ==.
                           2233 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:542: if( xReturn == errQUEUE_FULL )
   0581 E5*00              2234 	mov	a,_bp
   0583 24 04              2235 	add	a,#0x04
   0585 F8                 2236 	mov	r0,a
   0586 E6                 2237 	mov	a,@r0
   0587 60 03              2238 	jz	00166$
   0589 02s05rE7           2239 	ljmp	00131$
   058C                    2240 00166$:
                    058C   2241 	C$queue.c$544$3$19 ==.
                           2242 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:544: if( xTicksToWait > ( portTickType ) 0 )
   058C E5*00              2243 	mov	a,_bp
   058E 24 F9              2244 	add	a,#0xf9
   0590 F8                 2245 	mov	r0,a
   0591 E6                 2246 	mov	a,@r0
   0592 08                 2247 	inc	r0
   0593 46                 2248 	orl	a,@r0
   0594 70 03              2249 	jnz	00167$
   0596 02s05rE7           2250 	ljmp	00131$
   0599                    2251 00167$:
                    0599   2252 	C$queue.c$546$1$1 ==.
                           2253 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:546: if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   0599 C0 06              2254 	push	ar6
   059B C0 07              2255 	push	ar7
   059D C0 05              2256 	push	ar5
   059F E5*00              2257 	mov	a,_bp
   05A1 24 F9              2258 	add	a,#0xf9
   05A3 FA                 2259 	mov	r2,a
   05A4 7B 00              2260 	mov	r3,#0x00
   05A6 7C 40              2261 	mov	r4,#0x40
   05A8 E5*00              2262 	mov	a,_bp
   05AA 24 05              2263 	add	a,#0x05
   05AC FD                 2264 	mov	r5,a
   05AD 7E 00              2265 	mov	r6,#0x00
   05AF 7F 40              2266 	mov	r7,#0x40
   05B1 C0 05              2267 	push	ar5
   05B3 C0 06              2268 	push	ar6
   05B5 C0 07              2269 	push	ar7
   05B7 C0 02              2270 	push	ar2
   05B9 C0 03              2271 	push	ar3
   05BB C0 04              2272 	push	ar4
   05BD 8D 82              2273 	mov	dpl,r5
   05BF 8E 83              2274 	mov	dph,r6
   05C1 8F F0              2275 	mov	b,r7
   05C3 12s00r00           2276 	lcall	_xTaskCheckForTimeOut
   05C6 AA 82              2277 	mov	r2,dpl
   05C8 15 81              2278 	dec	sp
   05CA 15 81              2279 	dec	sp
   05CC 15 81              2280 	dec	sp
   05CE D0 07              2281 	pop	ar7
   05D0 D0 06              2282 	pop	ar6
   05D2 D0 05              2283 	pop	ar5
   05D4 D0 05              2284 	pop	ar5
   05D6 D0 07              2285 	pop	ar7
   05D8 D0 06              2286 	pop	ar6
   05DA EA                 2287 	mov	a,r2
   05DB 60 03              2288 	jz	00168$
   05DD 02s05rE7           2289 	ljmp	00131$
   05E0                    2290 00168$:
                    05E0   2291 	C$queue.c$548$5$21 ==.
                           2292 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:548: xReturn = queueERRONEOUS_UNBLOCK;
   05E0 E5*00              2293 	mov	a,_bp
   05E2 24 04              2294 	add	a,#0x04
   05E4 F8                 2295 	mov	r0,a
   05E5 76 FF              2296 	mov	@r0,#0xFF
   05E7                    2297 00131$:
                    05E7   2298 	C$queue.c$561$1$1 ==.
                           2299 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:561: while( xReturn == queueERRONEOUS_UNBLOCK );
   05E7 E5*00              2300 	mov	a,_bp
   05E9 24 04              2301 	add	a,#0x04
   05EB F8                 2302 	mov	r0,a
   05EC B6 FF 03           2303 	cjne	@r0,#0xFF,00169$
   05EF 02s02rA5           2304 	ljmp	00130$
   05F2                    2305 00169$:
                    05F2   2306 	C$queue.c$563$1$1 ==.
                           2307 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:563: return xReturn;
   05F2 E5*00              2308 	mov	a,_bp
   05F4 24 04              2309 	add	a,#0x04
   05F6 F8                 2310 	mov	r0,a
   05F7 86 82              2311 	mov	dpl,@r0
   05F9                    2312 00133$:
   05F9 85*00 81           2313 	mov	sp,_bp
   05FC D0*00              2314 	pop	_bp
                    05FE   2315 	C$queue.c$564$1$1 ==.
                    05FE   2316 	XG$xQueueGenericSend$0$0 ==.
   05FE 22                 2317 	ret
                           2318 ;------------------------------------------------------------
                           2319 ;Allocation info for local variables in function 'xQueueGenericSendFromISR'
                           2320 ;------------------------------------------------------------
                           2321 ;pvItemToQueue             Allocated to stack - offset -5
                           2322 ;pxHigherPriorityTaskWoken Allocated to stack - offset -8
                           2323 ;xCopyPosition             Allocated to stack - offset -9
                           2324 ;pxQueue                   Allocated to stack - offset 1
                           2325 ;xReturn                   Allocated to registers r2 
                           2326 ;uxSavedInterruptStatus    Allocated to registers 
                           2327 ;sloc0                     Allocated to stack - offset 4
                           2328 ;------------------------------------------------------------
                    05FF   2329 	G$xQueueGenericSendFromISR$0$0 ==.
                    05FF   2330 	C$queue.c$831$1$1 ==.
                           2331 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:831: signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
                           2332 ;	-----------------------------------------
                           2333 ;	 function xQueueGenericSendFromISR
                           2334 ;	-----------------------------------------
   05FF                    2335 _xQueueGenericSendFromISR:
   05FF C0*00              2336 	push	_bp
   0601 85 81*00           2337 	mov	_bp,sp
   0604 C0 82              2338 	push	dpl
   0606 C0 83              2339 	push	dph
   0608 C0 F0              2340 	push	b
   060A 05 81              2341 	inc	sp
   060C 05 81              2342 	inc	sp
   060E 05 81              2343 	inc	sp
                    0610   2344 	C$queue.c$843$2$2 ==.
                           2345 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:843: if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   0610 A8*00              2346 	mov	r0,_bp
   0612 08                 2347 	inc	r0
   0613 74 24              2348 	mov	a,#0x24
   0615 26                 2349 	add	a,@r0
   0616 FD                 2350 	mov	r5,a
   0617 74 00              2351 	mov	a,#0x00
   0619 08                 2352 	inc	r0
   061A 36                 2353 	addc	a,@r0
   061B FE                 2354 	mov	r6,a
   061C 08                 2355 	inc	r0
   061D 86 07              2356 	mov	ar7,@r0
   061F 8D 82              2357 	mov	dpl,r5
   0621 8E 83              2358 	mov	dph,r6
   0623 8F F0              2359 	mov	b,r7
   0625 12s00r00           2360 	lcall	__gptrget
   0628 FD                 2361 	mov	r5,a
   0629 A8*00              2362 	mov	r0,_bp
   062B 08                 2363 	inc	r0
   062C 74 25              2364 	mov	a,#0x25
   062E 26                 2365 	add	a,@r0
   062F FE                 2366 	mov	r6,a
   0630 74 00              2367 	mov	a,#0x00
   0632 08                 2368 	inc	r0
   0633 36                 2369 	addc	a,@r0
   0634 FF                 2370 	mov	r7,a
   0635 08                 2371 	inc	r0
   0636 86 02              2372 	mov	ar2,@r0
   0638 8E 82              2373 	mov	dpl,r6
   063A 8F 83              2374 	mov	dph,r7
   063C 8A F0              2375 	mov	b,r2
   063E 12s00r00           2376 	lcall	__gptrget
   0641 FE                 2377 	mov	r6,a
   0642 C3                 2378 	clr	c
   0643 ED                 2379 	mov	a,r5
   0644 9E                 2380 	subb	a,r6
   0645 40 03              2381 	jc	00117$
   0647 02s07r1A           2382 	ljmp	00109$
   064A                    2383 00117$:
                    064A   2384 	C$queue.c$847$3$3 ==.
                           2385 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:847: prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   064A E5*00              2386 	mov	a,_bp
   064C 24 F7              2387 	add	a,#0xf7
   064E F8                 2388 	mov	r0,a
   064F E6                 2389 	mov	a,@r0
   0650 C0 E0              2390 	push	acc
   0652 E5*00              2391 	mov	a,_bp
   0654 24 FB              2392 	add	a,#0xfb
   0656 F8                 2393 	mov	r0,a
   0657 E6                 2394 	mov	a,@r0
   0658 C0 E0              2395 	push	acc
   065A 08                 2396 	inc	r0
   065B E6                 2397 	mov	a,@r0
   065C C0 E0              2398 	push	acc
   065E 08                 2399 	inc	r0
   065F E6                 2400 	mov	a,@r0
   0660 C0 E0              2401 	push	acc
   0662 A8*00              2402 	mov	r0,_bp
   0664 08                 2403 	inc	r0
   0665 86 82              2404 	mov	dpl,@r0
   0667 08                 2405 	inc	r0
   0668 86 83              2406 	mov	dph,@r0
   066A 08                 2407 	inc	r0
   066B 86 F0              2408 	mov	b,@r0
   066D 12s0Cr07           2409 	lcall	_prvCopyDataToQueue
   0670 E5 81              2410 	mov	a,sp
   0672 24 FC              2411 	add	a,#0xfc
   0674 F5 81              2412 	mov	sp,a
                    0676   2413 	C$queue.c$851$3$3 ==.
                           2414 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:851: if( pxQueue->xTxLock == queueUNLOCKED )
   0676 A8*00              2415 	mov	r0,_bp
   0678 08                 2416 	inc	r0
   0679 74 28              2417 	mov	a,#0x28
   067B 26                 2418 	add	a,@r0
   067C FA                 2419 	mov	r2,a
   067D 74 00              2420 	mov	a,#0x00
   067F 08                 2421 	inc	r0
   0680 36                 2422 	addc	a,@r0
   0681 FB                 2423 	mov	r3,a
   0682 08                 2424 	inc	r0
   0683 86 04              2425 	mov	ar4,@r0
   0685 8A 82              2426 	mov	dpl,r2
   0687 8B 83              2427 	mov	dph,r3
   0689 8C F0              2428 	mov	b,r4
   068B 12s00r00           2429 	lcall	__gptrget
   068E FD                 2430 	mov	r5,a
   068F BD FF 02           2431 	cjne	r5,#0xFF,00118$
   0692 80 03              2432 	sjmp	00119$
   0694                    2433 00118$:
   0694 02s07r0A           2434 	ljmp	00106$
   0697                    2435 00119$:
                    0697   2436 	C$queue.c$853$4$4 ==.
                           2437 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:853: if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
   0697 A8*00              2438 	mov	r0,_bp
   0699 08                 2439 	inc	r0
   069A 74 18              2440 	mov	a,#0x18
   069C 26                 2441 	add	a,@r0
   069D FA                 2442 	mov	r2,a
   069E 74 00              2443 	mov	a,#0x00
   06A0 08                 2444 	inc	r0
   06A1 36                 2445 	addc	a,@r0
   06A2 FB                 2446 	mov	r3,a
   06A3 08                 2447 	inc	r0
   06A4 86 04              2448 	mov	ar4,@r0
   06A6 8A 82              2449 	mov	dpl,r2
   06A8 8B 83              2450 	mov	dph,r3
   06AA 8C F0              2451 	mov	b,r4
   06AC 12s00r00           2452 	lcall	__gptrget
   06AF 70 03              2453 	jnz	00120$
   06B1 02s07r15           2454 	ljmp	00107$
   06B4                    2455 00120$:
                    06B4   2456 	C$queue.c$855$5$5 ==.
                           2457 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:855: if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   06B4 A8*00              2458 	mov	r0,_bp
   06B6 08                 2459 	inc	r0
   06B7 E5*00              2460 	mov	a,_bp
   06B9 24 04              2461 	add	a,#0x04
   06BB F9                 2462 	mov	r1,a
   06BC 74 18              2463 	mov	a,#0x18
   06BE 26                 2464 	add	a,@r0
   06BF F7                 2465 	mov	@r1,a
   06C0 74 00              2466 	mov	a,#0x00
   06C2 08                 2467 	inc	r0
   06C3 36                 2468 	addc	a,@r0
   06C4 09                 2469 	inc	r1
   06C5 F7                 2470 	mov	@r1,a
   06C6 08                 2471 	inc	r0
   06C7 09                 2472 	inc	r1
   06C8 E6                 2473 	mov	a,@r0
   06C9 F7                 2474 	mov	@r1,a
   06CA E5*00              2475 	mov	a,_bp
   06CC 24 04              2476 	add	a,#0x04
   06CE F8                 2477 	mov	r0,a
   06CF 86 82              2478 	mov	dpl,@r0
   06D1 08                 2479 	inc	r0
   06D2 86 83              2480 	mov	dph,@r0
   06D4 08                 2481 	inc	r0
   06D5 86 F0              2482 	mov	b,@r0
   06D7 12s00r00           2483 	lcall	_xTaskRemoveFromEventList
   06DA E5 82              2484 	mov	a,dpl
   06DC 70 03              2485 	jnz	00121$
   06DE 02s07r15           2486 	ljmp	00107$
   06E1                    2487 00121$:
                    06E1   2488 	C$queue.c$859$6$6 ==.
                           2489 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:859: *pxHigherPriorityTaskWoken = pdTRUE;
   06E1 E5*00              2490 	mov	a,_bp
   06E3 24 F8              2491 	add	a,#0xf8
   06E5 F8                 2492 	mov	r0,a
   06E6 E5*00              2493 	mov	a,_bp
   06E8 24 04              2494 	add	a,#0x04
   06EA F9                 2495 	mov	r1,a
   06EB E6                 2496 	mov	a,@r0
   06EC F7                 2497 	mov	@r1,a
   06ED 08                 2498 	inc	r0
   06EE 09                 2499 	inc	r1
   06EF E6                 2500 	mov	a,@r0
   06F0 F7                 2501 	mov	@r1,a
   06F1 08                 2502 	inc	r0
   06F2 09                 2503 	inc	r1
   06F3 E6                 2504 	mov	a,@r0
   06F4 F7                 2505 	mov	@r1,a
   06F5 E5*00              2506 	mov	a,_bp
   06F7 24 04              2507 	add	a,#0x04
   06F9 F8                 2508 	mov	r0,a
   06FA 86 82              2509 	mov	dpl,@r0
   06FC 08                 2510 	inc	r0
   06FD 86 83              2511 	mov	dph,@r0
   06FF 08                 2512 	inc	r0
   0700 86 F0              2513 	mov	b,@r0
   0702 74 01              2514 	mov	a,#0x01
   0704 12s00r00           2515 	lcall	__gptrput
   0707 02s07r15           2516 	ljmp	00107$
   070A                    2517 00106$:
                    070A   2518 	C$queue.c$867$4$7 ==.
                           2519 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:867: ++( pxQueue->xTxLock );
   070A 0D                 2520 	inc	r5
   070B 8A 82              2521 	mov	dpl,r2
   070D 8B 83              2522 	mov	dph,r3
   070F 8C F0              2523 	mov	b,r4
   0711 ED                 2524 	mov	a,r5
   0712 12s00r00           2525 	lcall	__gptrput
   0715                    2526 00107$:
                    0715   2527 	C$queue.c$870$3$3 ==.
                           2528 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:870: xReturn = pdPASS;
   0715 7A 01              2529 	mov	r2,#0x01
   0717 02s07r1C           2530 	ljmp	00110$
   071A                    2531 00109$:
                    071A   2532 	C$queue.c$875$3$8 ==.
                           2533 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:875: xReturn = errQUEUE_FULL;
   071A 7A 00              2534 	mov	r2,#0x00
   071C                    2535 00110$:
                    071C   2536 	C$queue.c$880$1$1 ==.
                           2537 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:880: return xReturn;
   071C 8A 82              2538 	mov	dpl,r2
   071E                    2539 00111$:
   071E 85*00 81           2540 	mov	sp,_bp
   0721 D0*00              2541 	pop	_bp
                    0723   2542 	C$queue.c$881$1$1 ==.
                    0723   2543 	XG$xQueueGenericSendFromISR$0$0 ==.
   0723 22                 2544 	ret
                           2545 ;------------------------------------------------------------
                           2546 ;Allocation info for local variables in function 'xQueueGenericReceive'
                           2547 ;------------------------------------------------------------
                           2548 ;pvBuffer                  Allocated to stack - offset -5
                           2549 ;xTicksToWait              Allocated to stack - offset -7
                           2550 ;xJustPeeking              Allocated to stack - offset -8
                           2551 ;pxQueue                   Allocated to stack - offset 1
                           2552 ;xReturn                   Allocated to stack - offset 4
                           2553 ;xTimeOut                  Allocated to stack - offset 5
                           2554 ;pcOriginalReadPosition    Allocated to registers r5 r6 r7 
                           2555 ;sloc0                     Allocated to stack - offset 11
                           2556 ;------------------------------------------------------------
                    0724   2557 	G$xQueueGenericReceive$0$0 ==.
                    0724   2558 	C$queue.c$884$1$1 ==.
                           2559 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:884: signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
                           2560 ;	-----------------------------------------
                           2561 ;	 function xQueueGenericReceive
                           2562 ;	-----------------------------------------
   0724                    2563 _xQueueGenericReceive:
   0724 C0*00              2564 	push	_bp
   0726 85 81*00           2565 	mov	_bp,sp
   0729 C0 82              2566 	push	dpl
   072B C0 83              2567 	push	dph
   072D C0 F0              2568 	push	b
   072F E5 81              2569 	mov	a,sp
   0731 24 07              2570 	add	a,#0x07
   0733 F5 81              2571 	mov	sp,a
                    0735   2572 	C$queue.c$886$1$1 ==.
                           2573 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:886: signed portBASE_TYPE xReturn = pdTRUE;
   0735 E5*00              2574 	mov	a,_bp
   0737 24 04              2575 	add	a,#0x04
   0739 F8                 2576 	mov	r0,a
   073A 76 01              2577 	mov	@r0,#0x01
                    073C   2578 	C$queue.c$890$1$1 ==.
                           2579 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:890: do
   073C                    2580 00137$:
                    073C   2581 	C$queue.c$893$2$2 ==.
                           2582 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:893: if( xTicksToWait > ( portTickType ) 0 )
   073C E5*00              2583 	mov	a,_bp
   073E 24 F9              2584 	add	a,#0xf9
   0740 F8                 2585 	mov	r0,a
   0741 E6                 2586 	mov	a,@r0
   0742 08                 2587 	inc	r0
   0743 46                 2588 	orl	a,@r0
   0744 70 03              2589 	jnz	00160$
   0746 02s08r8F           2590 	ljmp	00116$
   0749                    2591 00160$:
                    0749   2592 	C$queue.c$895$3$3 ==.
                           2593 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:895: vTaskSuspendAll();
   0749 12s00r00           2594 	lcall	_vTaskSuspendAll
                    074C   2595 	C$queue.c$896$4$4 ==.
                           2596 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:896: prvLockQueue( pxQueue );
   074C C0 E0 C0 A8        2597 	 push ACC push IE 
   0750 C2 AF              2598 	clr	_EA
   0752 A8*00              2599 	mov	r0,_bp
   0754 08                 2600 	inc	r0
   0755 74 27              2601 	mov	a,#0x27
   0757 26                 2602 	add	a,@r0
   0758 FE                 2603 	mov	r6,a
   0759 74 00              2604 	mov	a,#0x00
   075B 08                 2605 	inc	r0
   075C 36                 2606 	addc	a,@r0
   075D FF                 2607 	mov	r7,a
   075E 08                 2608 	inc	r0
   075F 86 05              2609 	mov	ar5,@r0
   0761 8E 82              2610 	mov	dpl,r6
   0763 8F 83              2611 	mov	dph,r7
   0765 8D F0              2612 	mov	b,r5
   0767 12s00r00           2613 	lcall	__gptrget
   076A FA                 2614 	mov	r2,a
   076B BA FF 04           2615 	cjne	r2,#0xFF,00161$
   076E 74 01              2616 	mov	a,#0x01
   0770 80 02              2617 	sjmp	00162$
   0772                    2618 00161$:
   0772 74 00              2619 	mov	a,#0x00
   0774                    2620 00162$:
   0774 70 03              2621 	jnz	00163$
   0776 02s07r84           2622 	ljmp	00102$
   0779                    2623 00163$:
   0779 8E 82              2624 	mov	dpl,r6
   077B 8F 83              2625 	mov	dph,r7
   077D 8D F0              2626 	mov	b,r5
   077F 74 00              2627 	mov	a,#0x00
   0781 12s00r00           2628 	lcall	__gptrput
   0784                    2629 00102$:
   0784 A8*00              2630 	mov	r0,_bp
   0786 08                 2631 	inc	r0
   0787 74 28              2632 	mov	a,#0x28
   0789 26                 2633 	add	a,@r0
   078A FD                 2634 	mov	r5,a
   078B 74 00              2635 	mov	a,#0x00
   078D 08                 2636 	inc	r0
   078E 36                 2637 	addc	a,@r0
   078F FE                 2638 	mov	r6,a
   0790 08                 2639 	inc	r0
   0791 86 07              2640 	mov	ar7,@r0
   0793 8D 82              2641 	mov	dpl,r5
   0795 8E 83              2642 	mov	dph,r6
   0797 8F F0              2643 	mov	b,r7
   0799 12s00r00           2644 	lcall	__gptrget
   079C FA                 2645 	mov	r2,a
   079D BA FF 04           2646 	cjne	r2,#0xFF,00164$
   07A0 74 01              2647 	mov	a,#0x01
   07A2 80 02              2648 	sjmp	00165$
   07A4                    2649 00164$:
   07A4 74 00              2650 	mov	a,#0x00
   07A6                    2651 00165$:
   07A6 70 03              2652 	jnz	00166$
   07A8 02s07rB6           2653 	ljmp	00104$
   07AB                    2654 00166$:
   07AB 8D 82              2655 	mov	dpl,r5
   07AD 8E 83              2656 	mov	dph,r6
   07AF 8F F0              2657 	mov	b,r7
   07B1 74 00              2658 	mov	a,#0x00
   07B3 12s00r00           2659 	lcall	__gptrput
   07B6                    2660 00104$:
   07B6 D0 E0              2661 	 pop ACC 
   07B8 53 E0 80           2662 	anl	_ACC,#0x80
   07BB E5 E0              2663 	mov	a,_ACC
   07BD 42 A8              2664 	orl	_IE,a
   07BF D0 E0              2665 	 pop ACC 
                    07C1   2666 	C$queue.c$898$3$3 ==.
                           2667 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:898: if( xReturn == pdTRUE )
   07C1 E5*00              2668 	mov	a,_bp
   07C3 24 04              2669 	add	a,#0x04
   07C5 F8                 2670 	mov	r0,a
   07C6 B6 01 02           2671 	cjne	@r0,#0x01,00167$
   07C9 80 03              2672 	sjmp	00168$
   07CB                    2673 00167$:
   07CB 02s07rE0           2674 	ljmp	00106$
   07CE                    2675 00168$:
                    07CE   2676 	C$queue.c$903$4$8 ==.
                           2677 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:903: vTaskSetTimeOutState( &xTimeOut );
   07CE E5*00              2678 	mov	a,_bp
   07D0 24 05              2679 	add	a,#0x05
   07D2 FD                 2680 	mov	r5,a
   07D3 7E 00              2681 	mov	r6,#0x00
   07D5 7F 40              2682 	mov	r7,#0x40
   07D7 8D 82              2683 	mov	dpl,r5
   07D9 8E 83              2684 	mov	dph,r6
   07DB 8F F0              2685 	mov	b,r7
   07DD 12s00r00           2686 	lcall	_vTaskSetTimeOutState
   07E0                    2687 00106$:
                    07E0   2688 	C$queue.c$906$3$3 ==.
                           2689 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:906: if( prvIsQueueEmpty( pxQueue ) )
   07E0 A8*00              2690 	mov	r0,_bp
   07E2 08                 2691 	inc	r0
   07E3 86 82              2692 	mov	dpl,@r0
   07E5 08                 2693 	inc	r0
   07E6 86 83              2694 	mov	dph,@r0
   07E8 08                 2695 	inc	r0
   07E9 86 F0              2696 	mov	b,@r0
   07EB 12s11rFC           2697 	lcall	_prvIsQueueEmpty
   07EE E5 82              2698 	mov	a,dpl
   07F0 70 03              2699 	jnz	00169$
   07F2 02s08r7E           2700 	ljmp	00113$
   07F5                    2701 00169$:
                    07F5   2702 	C$queue.c$911$1$1 ==.
                           2703 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:911: if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   07F5 E5*00              2704 	mov	a,_bp
   07F7 24 F9              2705 	add	a,#0xf9
   07F9 FD                 2706 	mov	r5,a
   07FA 7E 00              2707 	mov	r6,#0x00
   07FC 7F 40              2708 	mov	r7,#0x40
   07FE E5*00              2709 	mov	a,_bp
   0800 24 05              2710 	add	a,#0x05
   0802 FA                 2711 	mov	r2,a
   0803 7B 00              2712 	mov	r3,#0x00
   0805 7C 40              2713 	mov	r4,#0x40
   0807 C0 05              2714 	push	ar5
   0809 C0 06              2715 	push	ar6
   080B C0 07              2716 	push	ar7
   080D 8A 82              2717 	mov	dpl,r2
   080F 8B 83              2718 	mov	dph,r3
   0811 8C F0              2719 	mov	b,r4
   0813 12s00r00           2720 	lcall	_xTaskCheckForTimeOut
   0816 AA 82              2721 	mov	r2,dpl
   0818 15 81              2722 	dec	sp
   081A 15 81              2723 	dec	sp
   081C 15 81              2724 	dec	sp
   081E EA                 2725 	mov	a,r2
   081F 60 03              2726 	jz	00170$
   0821 02s08r6A           2727 	ljmp	00110$
   0824                    2728 00170$:
                    0824   2729 	C$queue.c$926$5$10 ==.
                           2730 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:926: vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   0824 A8*00              2731 	mov	r0,_bp
   0826 08                 2732 	inc	r0
   0827 74 18              2733 	mov	a,#0x18
   0829 26                 2734 	add	a,@r0
   082A FD                 2735 	mov	r5,a
   082B 74 00              2736 	mov	a,#0x00
   082D 08                 2737 	inc	r0
   082E 36                 2738 	addc	a,@r0
   082F FE                 2739 	mov	r6,a
   0830 08                 2740 	inc	r0
   0831 86 07              2741 	mov	ar7,@r0
   0833 E5*00              2742 	mov	a,_bp
   0835 24 F9              2743 	add	a,#0xf9
   0837 F8                 2744 	mov	r0,a
   0838 E6                 2745 	mov	a,@r0
   0839 C0 E0              2746 	push	acc
   083B 08                 2747 	inc	r0
   083C E6                 2748 	mov	a,@r0
   083D C0 E0              2749 	push	acc
   083F 8D 82              2750 	mov	dpl,r5
   0841 8E 83              2751 	mov	dph,r6
   0843 8F F0              2752 	mov	b,r7
   0845 12s00r00           2753 	lcall	_vTaskPlaceOnEventList
   0848 15 81              2754 	dec	sp
   084A 15 81              2755 	dec	sp
                    084C   2756 	C$queue.c$927$5$10 ==.
                           2757 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:927: prvUnlockQueue( pxQueue );
   084C A8*00              2758 	mov	r0,_bp
   084E 08                 2759 	inc	r0
   084F 86 82              2760 	mov	dpl,@r0
   0851 08                 2761 	inc	r0
   0852 86 83              2762 	mov	dph,@r0
   0854 08                 2763 	inc	r0
   0855 86 F0              2764 	mov	b,@r0
   0857 12s10r3D           2765 	lcall	_prvUnlockQueue
                    085A   2766 	C$queue.c$928$5$10 ==.
                           2767 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:928: if( !xTaskResumeAll() )
   085A 12s00r00           2768 	lcall	_xTaskResumeAll
   085D E5 82              2769 	mov	a,dpl
   085F 60 03              2770 	jz	00171$
   0861 02s08r8F           2771 	ljmp	00116$
   0864                    2772 00171$:
                    0864   2773 	C$queue.c$930$6$11 ==.
                           2774 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:930: taskYIELD();
   0864 12s00r00           2775 	lcall	_vPortYield
   0867 02s08r8F           2776 	ljmp	00116$
   086A                    2777 00110$:
                    086A   2778 	C$queue.c$935$5$12 ==.
                           2779 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:935: prvUnlockQueue( pxQueue );
   086A A8*00              2780 	mov	r0,_bp
   086C 08                 2781 	inc	r0
   086D 86 82              2782 	mov	dpl,@r0
   086F 08                 2783 	inc	r0
   0870 86 83              2784 	mov	dph,@r0
   0872 08                 2785 	inc	r0
   0873 86 F0              2786 	mov	b,@r0
   0875 12s10r3D           2787 	lcall	_prvUnlockQueue
                    0878   2788 	C$queue.c$936$5$12 ==.
                           2789 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:936: ( void ) xTaskResumeAll();
   0878 12s00r00           2790 	lcall	_xTaskResumeAll
   087B 02s08r8F           2791 	ljmp	00116$
   087E                    2792 00113$:
                    087E   2793 	C$queue.c$941$4$13 ==.
                           2794 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:941: prvUnlockQueue( pxQueue );
   087E A8*00              2795 	mov	r0,_bp
   0880 08                 2796 	inc	r0
   0881 86 82              2797 	mov	dpl,@r0
   0883 08                 2798 	inc	r0
   0884 86 83              2799 	mov	dph,@r0
   0886 08                 2800 	inc	r0
   0887 86 F0              2801 	mov	b,@r0
   0889 12s10r3D           2802 	lcall	_prvUnlockQueue
                    088C   2803 	C$queue.c$942$4$13 ==.
                           2804 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:942: ( void ) xTaskResumeAll();
   088C 12s00r00           2805 	lcall	_xTaskResumeAll
   088F                    2806 00116$:
                    088F   2807 	C$queue.c$949$2$2 ==.
                           2808 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:949: taskENTER_CRITICAL();
   088F C0 E0 C0 A8        2809 	 push ACC push IE 
   0893 C2 AF              2810 	clr	_EA
                    0895   2811 	C$queue.c$952$3$14 ==.
                           2812 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:952: if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   0895 A8*00              2813 	mov	r0,_bp
   0897 08                 2814 	inc	r0
   0898 74 24              2815 	mov	a,#0x24
   089A 26                 2816 	add	a,@r0
   089B FD                 2817 	mov	r5,a
   089C 74 00              2818 	mov	a,#0x00
   089E 08                 2819 	inc	r0
   089F 36                 2820 	addc	a,@r0
   08A0 FE                 2821 	mov	r6,a
   08A1 08                 2822 	inc	r0
   08A2 86 07              2823 	mov	ar7,@r0
   08A4 8D 82              2824 	mov	dpl,r5
   08A6 8E 83              2825 	mov	dph,r6
   08A8 8F F0              2826 	mov	b,r7
   08AA 12s00r00           2827 	lcall	__gptrget
   08AD 70 03              2828 	jnz	00172$
   08AF 02s09rE7           2829 	ljmp	00129$
   08B2                    2830 00172$:
                    08B2   2831 	C$queue.c$955$4$15 ==.
                           2832 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:955: pcOriginalReadPosition = pxQueue->pcReadFrom;
   08B2 A8*00              2833 	mov	r0,_bp
   08B4 08                 2834 	inc	r0
   08B5 74 09              2835 	mov	a,#0x09
   08B7 26                 2836 	add	a,@r0
   08B8 FD                 2837 	mov	r5,a
   08B9 74 00              2838 	mov	a,#0x00
   08BB 08                 2839 	inc	r0
   08BC 36                 2840 	addc	a,@r0
   08BD FE                 2841 	mov	r6,a
   08BE 08                 2842 	inc	r0
   08BF 86 07              2843 	mov	ar7,@r0
   08C1 8D 82              2844 	mov	dpl,r5
   08C3 8E 83              2845 	mov	dph,r6
   08C5 8F F0              2846 	mov	b,r7
   08C7 12s00r00           2847 	lcall	__gptrget
   08CA FD                 2848 	mov	r5,a
   08CB A3                 2849 	inc	dptr
   08CC 12s00r00           2850 	lcall	__gptrget
   08CF FE                 2851 	mov	r6,a
   08D0 A3                 2852 	inc	dptr
   08D1 12s00r00           2853 	lcall	__gptrget
   08D4 FF                 2854 	mov	r7,a
                    08D5   2855 	C$queue.c$957$4$15 ==.
                           2856 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:957: prvCopyDataFromQueue( pxQueue, pvBuffer );
   08D5 C0 05              2857 	push	ar5
   08D7 C0 06              2858 	push	ar6
   08D9 C0 07              2859 	push	ar7
   08DB E5*00              2860 	mov	a,_bp
   08DD 24 FB              2861 	add	a,#0xfb
   08DF F8                 2862 	mov	r0,a
   08E0 E6                 2863 	mov	a,@r0
   08E1 C0 E0              2864 	push	acc
   08E3 08                 2865 	inc	r0
   08E4 E6                 2866 	mov	a,@r0
   08E5 C0 E0              2867 	push	acc
   08E7 08                 2868 	inc	r0
   08E8 E6                 2869 	mov	a,@r0
   08E9 C0 E0              2870 	push	acc
   08EB A8*00              2871 	mov	r0,_bp
   08ED 08                 2872 	inc	r0
   08EE 86 82              2873 	mov	dpl,@r0
   08F0 08                 2874 	inc	r0
   08F1 86 83              2875 	mov	dph,@r0
   08F3 08                 2876 	inc	r0
   08F4 86 F0              2877 	mov	b,@r0
   08F6 12s0ErE5           2878 	lcall	_prvCopyDataFromQueue
   08F9 15 81              2879 	dec	sp
   08FB 15 81              2880 	dec	sp
   08FD 15 81              2881 	dec	sp
   08FF D0 07              2882 	pop	ar7
   0901 D0 06              2883 	pop	ar6
   0903 D0 05              2884 	pop	ar5
                    0905   2885 	C$queue.c$959$4$15 ==.
                           2886 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:959: if( xJustPeeking == pdFALSE )
   0905 E5*00              2887 	mov	a,_bp
   0907 24 F8              2888 	add	a,#0xf8
   0909 F8                 2889 	mov	r0,a
   090A E6                 2890 	mov	a,@r0
   090B 60 03              2891 	jz	00173$
   090D 02s09r7B           2892 	ljmp	00126$
   0910                    2893 00173$:
                    0910   2894 	C$queue.c$964$5$16 ==.
                           2895 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:964: --( pxQueue->uxMessagesWaiting );
   0910 A8*00              2896 	mov	r0,_bp
   0912 08                 2897 	inc	r0
   0913 74 24              2898 	mov	a,#0x24
   0915 26                 2899 	add	a,@r0
   0916 FB                 2900 	mov	r3,a
   0917 74 00              2901 	mov	a,#0x00
   0919 08                 2902 	inc	r0
   091A 36                 2903 	addc	a,@r0
   091B FC                 2904 	mov	r4,a
   091C 08                 2905 	inc	r0
   091D 86 05              2906 	mov	ar5,@r0
   091F 8B 82              2907 	mov	dpl,r3
   0921 8C 83              2908 	mov	dph,r4
   0923 8D F0              2909 	mov	b,r5
   0925 12s00r00           2910 	lcall	__gptrget
   0928 FA                 2911 	mov	r2,a
   0929 1A                 2912 	dec	r2
   092A 8B 82              2913 	mov	dpl,r3
   092C 8C 83              2914 	mov	dph,r4
   092E 8D F0              2915 	mov	b,r5
   0930 EA                 2916 	mov	a,r2
   0931 12s00r00           2917 	lcall	__gptrput
                    0934   2918 	C$queue.c$977$5$16 ==.
                           2919 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:977: if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   0934 A8*00              2920 	mov	r0,_bp
   0936 08                 2921 	inc	r0
   0937 74 0C              2922 	mov	a,#0x0C
   0939 26                 2923 	add	a,@r0
   093A FA                 2924 	mov	r2,a
   093B 74 00              2925 	mov	a,#0x00
   093D 08                 2926 	inc	r0
   093E 36                 2927 	addc	a,@r0
   093F FB                 2928 	mov	r3,a
   0940 08                 2929 	inc	r0
   0941 86 04              2930 	mov	ar4,@r0
   0943 8A 82              2931 	mov	dpl,r2
   0945 8B 83              2932 	mov	dph,r3
   0947 8C F0              2933 	mov	b,r4
   0949 12s00r00           2934 	lcall	__gptrget
   094C FA                 2935 	mov	r2,a
   094D BA 00 03           2936 	cjne	r2,#0x00,00174$
   0950 02s09rDD           2937 	ljmp	00127$
   0953                    2938 00174$:
                    0953   2939 	C$queue.c$979$6$17 ==.
                           2940 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:979: if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   0953 A8*00              2941 	mov	r0,_bp
   0955 08                 2942 	inc	r0
   0956 74 0C              2943 	mov	a,#0x0C
   0958 26                 2944 	add	a,@r0
   0959 FA                 2945 	mov	r2,a
   095A 74 00              2946 	mov	a,#0x00
   095C 08                 2947 	inc	r0
   095D 36                 2948 	addc	a,@r0
   095E FB                 2949 	mov	r3,a
   095F 08                 2950 	inc	r0
   0960 86 04              2951 	mov	ar4,@r0
   0962 8A 82              2952 	mov	dpl,r2
   0964 8B 83              2953 	mov	dph,r3
   0966 8C F0              2954 	mov	b,r4
   0968 12s00r00           2955 	lcall	_xTaskRemoveFromEventList
   096B AA 82              2956 	mov	r2,dpl
   096D BA 01 02           2957 	cjne	r2,#0x01,00175$
   0970 80 03              2958 	sjmp	00176$
   0972                    2959 00175$:
   0972 02s09rDD           2960 	ljmp	00127$
   0975                    2961 00176$:
                    0975   2962 	C$queue.c$981$7$18 ==.
                           2963 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:981: taskYIELD();
   0975 12s00r00           2964 	lcall	_vPortYield
   0978 02s09rDD           2965 	ljmp	00127$
   097B                    2966 00126$:
                    097B   2967 	C$queue.c$991$5$19 ==.
                           2968 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:991: pxQueue->pcReadFrom = pcOriginalReadPosition;
   097B A8*00              2969 	mov	r0,_bp
   097D 08                 2970 	inc	r0
   097E 74 09              2971 	mov	a,#0x09
   0980 26                 2972 	add	a,@r0
   0981 FA                 2973 	mov	r2,a
   0982 74 00              2974 	mov	a,#0x00
   0984 08                 2975 	inc	r0
   0985 36                 2976 	addc	a,@r0
   0986 FB                 2977 	mov	r3,a
   0987 08                 2978 	inc	r0
   0988 86 04              2979 	mov	ar4,@r0
   098A 8A 82              2980 	mov	dpl,r2
   098C 8B 83              2981 	mov	dph,r3
   098E 8C F0              2982 	mov	b,r4
   0990 ED                 2983 	mov	a,r5
   0991 12s00r00           2984 	lcall	__gptrput
   0994 A3                 2985 	inc	dptr
   0995 EE                 2986 	mov	a,r6
   0996 12s00r00           2987 	lcall	__gptrput
   0999 A3                 2988 	inc	dptr
   099A EF                 2989 	mov	a,r7
   099B 12s00r00           2990 	lcall	__gptrput
                    099E   2991 	C$queue.c$995$5$19 ==.
                           2992 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:995: if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
   099E A8*00              2993 	mov	r0,_bp
   09A0 08                 2994 	inc	r0
   09A1 74 18              2995 	mov	a,#0x18
   09A3 26                 2996 	add	a,@r0
   09A4 FA                 2997 	mov	r2,a
   09A5 74 00              2998 	mov	a,#0x00
   09A7 08                 2999 	inc	r0
   09A8 36                 3000 	addc	a,@r0
   09A9 FB                 3001 	mov	r3,a
   09AA 08                 3002 	inc	r0
   09AB 86 04              3003 	mov	ar4,@r0
   09AD 8A 82              3004 	mov	dpl,r2
   09AF 8B 83              3005 	mov	dph,r3
   09B1 8C F0              3006 	mov	b,r4
   09B3 12s00r00           3007 	lcall	__gptrget
   09B6 70 03              3008 	jnz	00177$
   09B8 02s09rDD           3009 	ljmp	00127$
   09BB                    3010 00177$:
                    09BB   3011 	C$queue.c$999$6$20 ==.
                           3012 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:999: if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   09BB A8*00              3013 	mov	r0,_bp
   09BD 08                 3014 	inc	r0
   09BE 74 18              3015 	mov	a,#0x18
   09C0 26                 3016 	add	a,@r0
   09C1 FA                 3017 	mov	r2,a
   09C2 74 00              3018 	mov	a,#0x00
   09C4 08                 3019 	inc	r0
   09C5 36                 3020 	addc	a,@r0
   09C6 FB                 3021 	mov	r3,a
   09C7 08                 3022 	inc	r0
   09C8 86 04              3023 	mov	ar4,@r0
   09CA 8A 82              3024 	mov	dpl,r2
   09CC 8B 83              3025 	mov	dph,r3
   09CE 8C F0              3026 	mov	b,r4
   09D0 12s00r00           3027 	lcall	_xTaskRemoveFromEventList
   09D3 E5 82              3028 	mov	a,dpl
   09D5 70 03              3029 	jnz	00178$
   09D7 02s09rDD           3030 	ljmp	00127$
   09DA                    3031 00178$:
                    09DA   3032 	C$queue.c$1002$7$21 ==.
                           3033 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1002: taskYIELD();
   09DA 12s00r00           3034 	lcall	_vPortYield
   09DD                    3035 00127$:
                    09DD   3036 	C$queue.c$1008$4$15 ==.
                           3037 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1008: xReturn = pdPASS;
   09DD E5*00              3038 	mov	a,_bp
   09DF 24 04              3039 	add	a,#0x04
   09E1 F8                 3040 	mov	r0,a
   09E2 76 01              3041 	mov	@r0,#0x01
   09E4 02s09rEE           3042 	ljmp	00130$
   09E7                    3043 00129$:
                    09E7   3044 	C$queue.c$1012$4$22 ==.
                           3045 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1012: xReturn = errQUEUE_EMPTY;
   09E7 E5*00              3046 	mov	a,_bp
   09E9 24 04              3047 	add	a,#0x04
   09EB F8                 3048 	mov	r0,a
   09EC 76 00              3049 	mov	@r0,#0x00
   09EE                    3050 00130$:
                    09EE   3051 	C$queue.c$1015$2$2 ==.
                           3052 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1015: taskEXIT_CRITICAL();
   09EE D0 E0              3053 	 pop ACC 
   09F0 53 E0 80           3054 	anl	_ACC,#0x80
   09F3 E5 E0              3055 	mov	a,_ACC
   09F5 42 A8              3056 	orl	_IE,a
   09F7 D0 E0              3057 	 pop ACC 
                    09F9   3058 	C$queue.c$1017$2$2 ==.
                           3059 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1017: if( xReturn == errQUEUE_EMPTY )
   09F9 E5*00              3060 	mov	a,_bp
   09FB 24 04              3061 	add	a,#0x04
   09FD F8                 3062 	mov	r0,a
   09FE E6                 3063 	mov	a,@r0
   09FF 60 03              3064 	jz	00179$
   0A01 02s0Ar47           3065 	ljmp	00138$
   0A04                    3066 00179$:
                    0A04   3067 	C$queue.c$1019$3$23 ==.
                           3068 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1019: if( xTicksToWait > ( portTickType ) 0 )
   0A04 E5*00              3069 	mov	a,_bp
   0A06 24 F9              3070 	add	a,#0xf9
   0A08 F8                 3071 	mov	r0,a
   0A09 E6                 3072 	mov	a,@r0
   0A0A 08                 3073 	inc	r0
   0A0B 46                 3074 	orl	a,@r0
   0A0C 70 03              3075 	jnz	00180$
   0A0E 02s0Ar47           3076 	ljmp	00138$
   0A11                    3077 00180$:
                    0A11   3078 	C$queue.c$1021$4$24 ==.
                           3079 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1021: if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   0A11 E5*00              3080 	mov	a,_bp
   0A13 24 F9              3081 	add	a,#0xf9
   0A15 FA                 3082 	mov	r2,a
   0A16 7B 00              3083 	mov	r3,#0x00
   0A18 7C 40              3084 	mov	r4,#0x40
   0A1A E5*00              3085 	mov	a,_bp
   0A1C 24 05              3086 	add	a,#0x05
   0A1E FD                 3087 	mov	r5,a
   0A1F 7E 00              3088 	mov	r6,#0x00
   0A21 7F 40              3089 	mov	r7,#0x40
   0A23 C0 02              3090 	push	ar2
   0A25 C0 03              3091 	push	ar3
   0A27 C0 04              3092 	push	ar4
   0A29 8D 82              3093 	mov	dpl,r5
   0A2B 8E 83              3094 	mov	dph,r6
   0A2D 8F F0              3095 	mov	b,r7
   0A2F 12s00r00           3096 	lcall	_xTaskCheckForTimeOut
   0A32 AA 82              3097 	mov	r2,dpl
   0A34 15 81              3098 	dec	sp
   0A36 15 81              3099 	dec	sp
   0A38 15 81              3100 	dec	sp
   0A3A EA                 3101 	mov	a,r2
   0A3B 60 03              3102 	jz	00181$
   0A3D 02s0Ar47           3103 	ljmp	00138$
   0A40                    3104 00181$:
                    0A40   3105 	C$queue.c$1023$5$25 ==.
                           3106 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1023: xReturn = queueERRONEOUS_UNBLOCK;
   0A40 E5*00              3107 	mov	a,_bp
   0A42 24 04              3108 	add	a,#0x04
   0A44 F8                 3109 	mov	r0,a
   0A45 76 FF              3110 	mov	@r0,#0xFF
   0A47                    3111 00138$:
                    0A47   3112 	C$queue.c$1036$1$1 ==.
                           3113 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1036: } while( xReturn == queueERRONEOUS_UNBLOCK );
   0A47 E5*00              3114 	mov	a,_bp
   0A49 24 04              3115 	add	a,#0x04
   0A4B F8                 3116 	mov	r0,a
   0A4C B6 FF 03           3117 	cjne	@r0,#0xFF,00182$
   0A4F 02s07r3C           3118 	ljmp	00137$
   0A52                    3119 00182$:
                    0A52   3120 	C$queue.c$1038$1$1 ==.
                           3121 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1038: return xReturn;
   0A52 E5*00              3122 	mov	a,_bp
   0A54 24 04              3123 	add	a,#0x04
   0A56 F8                 3124 	mov	r0,a
   0A57 86 82              3125 	mov	dpl,@r0
   0A59                    3126 00140$:
   0A59 85*00 81           3127 	mov	sp,_bp
   0A5C D0*00              3128 	pop	_bp
                    0A5E   3129 	C$queue.c$1039$1$1 ==.
                    0A5E   3130 	XG$xQueueGenericReceive$0$0 ==.
   0A5E 22                 3131 	ret
                           3132 ;------------------------------------------------------------
                           3133 ;Allocation info for local variables in function 'xQueueReceiveFromISR'
                           3134 ;------------------------------------------------------------
                           3135 ;pvBuffer                  Allocated to stack - offset -5
                           3136 ;pxTaskWoken               Allocated to stack - offset -8
                           3137 ;pxQueue                   Allocated to stack - offset 1
                           3138 ;xReturn                   Allocated to registers r2 
                           3139 ;uxSavedInterruptStatus    Allocated to registers 
                           3140 ;sloc0                     Allocated to stack - offset 4
                           3141 ;------------------------------------------------------------
                    0A5F   3142 	G$xQueueReceiveFromISR$0$0 ==.
                    0A5F   3143 	C$queue.c$1042$1$1 ==.
                           3144 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1042: signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
                           3145 ;	-----------------------------------------
                           3146 ;	 function xQueueReceiveFromISR
                           3147 ;	-----------------------------------------
   0A5F                    3148 _xQueueReceiveFromISR:
   0A5F C0*00              3149 	push	_bp
   0A61 85 81*00           3150 	mov	_bp,sp
   0A64 C0 82              3151 	push	dpl
   0A66 C0 83              3152 	push	dph
   0A68 C0 F0              3153 	push	b
   0A6A 05 81              3154 	inc	sp
   0A6C 05 81              3155 	inc	sp
   0A6E 05 81              3156 	inc	sp
                    0A70   3157 	C$queue.c$1050$2$2 ==.
                           3158 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1050: if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   0A70 A8*00              3159 	mov	r0,_bp
   0A72 08                 3160 	inc	r0
   0A73 74 24              3161 	mov	a,#0x24
   0A75 26                 3162 	add	a,@r0
   0A76 FD                 3163 	mov	r5,a
   0A77 74 00              3164 	mov	a,#0x00
   0A79 08                 3165 	inc	r0
   0A7A 36                 3166 	addc	a,@r0
   0A7B FE                 3167 	mov	r6,a
   0A7C 08                 3168 	inc	r0
   0A7D 86 07              3169 	mov	ar7,@r0
   0A7F 8D 82              3170 	mov	dpl,r5
   0A81 8E 83              3171 	mov	dph,r6
   0A83 8F F0              3172 	mov	b,r7
   0A85 12s00r00           3173 	lcall	__gptrget
   0A88 70 03              3174 	jnz	00117$
   0A8A 02s0Br79           3175 	ljmp	00109$
   0A8D                    3176 00117$:
                    0A8D   3177 	C$queue.c$1054$3$3 ==.
                           3178 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1054: prvCopyDataFromQueue( pxQueue, pvBuffer );
   0A8D E5*00              3179 	mov	a,_bp
   0A8F 24 FB              3180 	add	a,#0xfb
   0A91 F8                 3181 	mov	r0,a
   0A92 E6                 3182 	mov	a,@r0
   0A93 C0 E0              3183 	push	acc
   0A95 08                 3184 	inc	r0
   0A96 E6                 3185 	mov	a,@r0
   0A97 C0 E0              3186 	push	acc
   0A99 08                 3187 	inc	r0
   0A9A E6                 3188 	mov	a,@r0
   0A9B C0 E0              3189 	push	acc
   0A9D A8*00              3190 	mov	r0,_bp
   0A9F 08                 3191 	inc	r0
   0AA0 86 82              3192 	mov	dpl,@r0
   0AA2 08                 3193 	inc	r0
   0AA3 86 83              3194 	mov	dph,@r0
   0AA5 08                 3195 	inc	r0
   0AA6 86 F0              3196 	mov	b,@r0
   0AA8 12s0ErE5           3197 	lcall	_prvCopyDataFromQueue
   0AAB 15 81              3198 	dec	sp
   0AAD 15 81              3199 	dec	sp
   0AAF 15 81              3200 	dec	sp
                    0AB1   3201 	C$queue.c$1055$3$3 ==.
                           3202 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1055: --( pxQueue->uxMessagesWaiting );
   0AB1 A8*00              3203 	mov	r0,_bp
   0AB3 08                 3204 	inc	r0
   0AB4 74 24              3205 	mov	a,#0x24
   0AB6 26                 3206 	add	a,@r0
   0AB7 FD                 3207 	mov	r5,a
   0AB8 74 00              3208 	mov	a,#0x00
   0ABA 08                 3209 	inc	r0
   0ABB 36                 3210 	addc	a,@r0
   0ABC FE                 3211 	mov	r6,a
   0ABD 08                 3212 	inc	r0
   0ABE 86 07              3213 	mov	ar7,@r0
   0AC0 8D 82              3214 	mov	dpl,r5
   0AC2 8E 83              3215 	mov	dph,r6
   0AC4 8F F0              3216 	mov	b,r7
   0AC6 12s00r00           3217 	lcall	__gptrget
   0AC9 FA                 3218 	mov	r2,a
   0ACA 1A                 3219 	dec	r2
   0ACB 8D 82              3220 	mov	dpl,r5
   0ACD 8E 83              3221 	mov	dph,r6
   0ACF 8F F0              3222 	mov	b,r7
   0AD1 EA                 3223 	mov	a,r2
   0AD2 12s00r00           3224 	lcall	__gptrput
                    0AD5   3225 	C$queue.c$1060$3$3 ==.
                           3226 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1060: if( pxQueue->xRxLock == queueUNLOCKED )
   0AD5 A8*00              3227 	mov	r0,_bp
   0AD7 08                 3228 	inc	r0
   0AD8 74 27              3229 	mov	a,#0x27
   0ADA 26                 3230 	add	a,@r0
   0ADB FA                 3231 	mov	r2,a
   0ADC 74 00              3232 	mov	a,#0x00
   0ADE 08                 3233 	inc	r0
   0ADF 36                 3234 	addc	a,@r0
   0AE0 FB                 3235 	mov	r3,a
   0AE1 08                 3236 	inc	r0
   0AE2 86 04              3237 	mov	ar4,@r0
   0AE4 8A 82              3238 	mov	dpl,r2
   0AE6 8B 83              3239 	mov	dph,r3
   0AE8 8C F0              3240 	mov	b,r4
   0AEA 12s00r00           3241 	lcall	__gptrget
   0AED FD                 3242 	mov	r5,a
   0AEE BD FF 02           3243 	cjne	r5,#0xFF,00118$
   0AF1 80 03              3244 	sjmp	00119$
   0AF3                    3245 00118$:
   0AF3 02s0Br69           3246 	ljmp	00106$
   0AF6                    3247 00119$:
                    0AF6   3248 	C$queue.c$1062$4$4 ==.
                           3249 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1062: if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
   0AF6 A8*00              3250 	mov	r0,_bp
   0AF8 08                 3251 	inc	r0
   0AF9 74 0C              3252 	mov	a,#0x0C
   0AFB 26                 3253 	add	a,@r0
   0AFC FA                 3254 	mov	r2,a
   0AFD 74 00              3255 	mov	a,#0x00
   0AFF 08                 3256 	inc	r0
   0B00 36                 3257 	addc	a,@r0
   0B01 FB                 3258 	mov	r3,a
   0B02 08                 3259 	inc	r0
   0B03 86 04              3260 	mov	ar4,@r0
   0B05 8A 82              3261 	mov	dpl,r2
   0B07 8B 83              3262 	mov	dph,r3
   0B09 8C F0              3263 	mov	b,r4
   0B0B 12s00r00           3264 	lcall	__gptrget
   0B0E 70 03              3265 	jnz	00120$
   0B10 02s0Br74           3266 	ljmp	00107$
   0B13                    3267 00120$:
                    0B13   3268 	C$queue.c$1064$5$5 ==.
                           3269 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1064: if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   0B13 A8*00              3270 	mov	r0,_bp
   0B15 08                 3271 	inc	r0
   0B16 E5*00              3272 	mov	a,_bp
   0B18 24 04              3273 	add	a,#0x04
   0B1A F9                 3274 	mov	r1,a
   0B1B 74 0C              3275 	mov	a,#0x0C
   0B1D 26                 3276 	add	a,@r0
   0B1E F7                 3277 	mov	@r1,a
   0B1F 74 00              3278 	mov	a,#0x00
   0B21 08                 3279 	inc	r0
   0B22 36                 3280 	addc	a,@r0
   0B23 09                 3281 	inc	r1
   0B24 F7                 3282 	mov	@r1,a
   0B25 08                 3283 	inc	r0
   0B26 09                 3284 	inc	r1
   0B27 E6                 3285 	mov	a,@r0
   0B28 F7                 3286 	mov	@r1,a
   0B29 E5*00              3287 	mov	a,_bp
   0B2B 24 04              3288 	add	a,#0x04
   0B2D F8                 3289 	mov	r0,a
   0B2E 86 82              3290 	mov	dpl,@r0
   0B30 08                 3291 	inc	r0
   0B31 86 83              3292 	mov	dph,@r0
   0B33 08                 3293 	inc	r0
   0B34 86 F0              3294 	mov	b,@r0
   0B36 12s00r00           3295 	lcall	_xTaskRemoveFromEventList
   0B39 E5 82              3296 	mov	a,dpl
   0B3B 70 03              3297 	jnz	00121$
   0B3D 02s0Br74           3298 	ljmp	00107$
   0B40                    3299 00121$:
                    0B40   3300 	C$queue.c$1068$6$6 ==.
                           3301 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1068: *pxTaskWoken = pdTRUE;
   0B40 E5*00              3302 	mov	a,_bp
   0B42 24 F8              3303 	add	a,#0xf8
   0B44 F8                 3304 	mov	r0,a
   0B45 E5*00              3305 	mov	a,_bp
   0B47 24 04              3306 	add	a,#0x04
   0B49 F9                 3307 	mov	r1,a
   0B4A E6                 3308 	mov	a,@r0
   0B4B F7                 3309 	mov	@r1,a
   0B4C 08                 3310 	inc	r0
   0B4D 09                 3311 	inc	r1
   0B4E E6                 3312 	mov	a,@r0
   0B4F F7                 3313 	mov	@r1,a
   0B50 08                 3314 	inc	r0
   0B51 09                 3315 	inc	r1
   0B52 E6                 3316 	mov	a,@r0
   0B53 F7                 3317 	mov	@r1,a
   0B54 E5*00              3318 	mov	a,_bp
   0B56 24 04              3319 	add	a,#0x04
   0B58 F8                 3320 	mov	r0,a
   0B59 86 82              3321 	mov	dpl,@r0
   0B5B 08                 3322 	inc	r0
   0B5C 86 83              3323 	mov	dph,@r0
   0B5E 08                 3324 	inc	r0
   0B5F 86 F0              3325 	mov	b,@r0
   0B61 74 01              3326 	mov	a,#0x01
   0B63 12s00r00           3327 	lcall	__gptrput
   0B66 02s0Br74           3328 	ljmp	00107$
   0B69                    3329 00106$:
                    0B69   3330 	C$queue.c$1076$4$7 ==.
                           3331 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1076: ++( pxQueue->xRxLock );
   0B69 0D                 3332 	inc	r5
   0B6A 8A 82              3333 	mov	dpl,r2
   0B6C 8B 83              3334 	mov	dph,r3
   0B6E 8C F0              3335 	mov	b,r4
   0B70 ED                 3336 	mov	a,r5
   0B71 12s00r00           3337 	lcall	__gptrput
   0B74                    3338 00107$:
                    0B74   3339 	C$queue.c$1079$3$3 ==.
                           3340 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1079: xReturn = pdPASS;
   0B74 7A 01              3341 	mov	r2,#0x01
   0B76 02s0Br7B           3342 	ljmp	00110$
   0B79                    3343 00109$:
                    0B79   3344 	C$queue.c$1083$3$8 ==.
                           3345 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1083: xReturn = pdFAIL;
   0B79 7A 00              3346 	mov	r2,#0x00
   0B7B                    3347 00110$:
                    0B7B   3348 	C$queue.c$1089$1$1 ==.
                           3349 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1089: return xReturn;
   0B7B 8A 82              3350 	mov	dpl,r2
   0B7D                    3351 00111$:
   0B7D 85*00 81           3352 	mov	sp,_bp
   0B80 D0*00              3353 	pop	_bp
                    0B82   3354 	C$queue.c$1090$1$1 ==.
                    0B82   3355 	XG$xQueueReceiveFromISR$0$0 ==.
   0B82 22                 3356 	ret
                           3357 ;------------------------------------------------------------
                           3358 ;Allocation info for local variables in function 'uxQueueMessagesWaiting'
                           3359 ;------------------------------------------------------------
                           3360 ;pxQueue                   Allocated to registers r2 r3 r4 
                           3361 ;uxReturn                  Allocated to registers r2 
                           3362 ;------------------------------------------------------------
                    0B83   3363 	G$uxQueueMessagesWaiting$0$0 ==.
                    0B83   3364 	C$queue.c$1093$1$1 ==.
                           3365 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1093: unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
                           3366 ;	-----------------------------------------
                           3367 ;	 function uxQueueMessagesWaiting
                           3368 ;	-----------------------------------------
   0B83                    3369 _uxQueueMessagesWaiting:
   0B83 AA 82              3370 	mov	r2,dpl
   0B85 AB 83              3371 	mov	r3,dph
   0B87 AC F0              3372 	mov	r4,b
                    0B89   3373 	C$queue.c$1097$1$1 ==.
                           3374 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1097: taskENTER_CRITICAL();
   0B89 C0 E0 C0 A8        3375 	 push ACC push IE 
   0B8D C2 AF              3376 	clr	_EA
                    0B8F   3377 	C$queue.c$1098$1$1 ==.
                           3378 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1098: uxReturn = pxQueue->uxMessagesWaiting;
   0B8F 74 24              3379 	mov	a,#0x24
   0B91 25 02              3380 	add	a,ar2
   0B93 FA                 3381 	mov	r2,a
   0B94 74 00              3382 	mov	a,#0x00
   0B96 35 03              3383 	addc	a,ar3
   0B98 FB                 3384 	mov	r3,a
   0B99 8A 82              3385 	mov	dpl,r2
   0B9B 8B 83              3386 	mov	dph,r3
   0B9D 8C F0              3387 	mov	b,r4
   0B9F 12s00r00           3388 	lcall	__gptrget
   0BA2 FA                 3389 	mov	r2,a
                    0BA3   3390 	C$queue.c$1099$1$1 ==.
                           3391 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1099: taskEXIT_CRITICAL();
   0BA3 D0 E0              3392 	 pop ACC 
   0BA5 53 E0 80           3393 	anl	_ACC,#0x80
   0BA8 E5 E0              3394 	mov	a,_ACC
   0BAA 42 A8              3395 	orl	_IE,a
   0BAC D0 E0              3396 	 pop ACC 
                    0BAE   3397 	C$queue.c$1101$1$1 ==.
                           3398 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1101: return uxReturn;
   0BAE 8A 82              3399 	mov	dpl,r2
   0BB0                    3400 00101$:
                    0BB0   3401 	C$queue.c$1102$1$1 ==.
                    0BB0   3402 	XG$uxQueueMessagesWaiting$0$0 ==.
   0BB0 22                 3403 	ret
                           3404 ;------------------------------------------------------------
                           3405 ;Allocation info for local variables in function 'uxQueueMessagesWaitingFromISR'
                           3406 ;------------------------------------------------------------
                           3407 ;pxQueue                   Allocated to registers r2 r3 r4 
                           3408 ;uxReturn                  Allocated to registers r2 
                           3409 ;------------------------------------------------------------
                    0BB1   3410 	G$uxQueueMessagesWaitingFromISR$0$0 ==.
                    0BB1   3411 	C$queue.c$1105$1$1 ==.
                           3412 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1105: unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
                           3413 ;	-----------------------------------------
                           3414 ;	 function uxQueueMessagesWaitingFromISR
                           3415 ;	-----------------------------------------
   0BB1                    3416 _uxQueueMessagesWaitingFromISR:
   0BB1 AA 82              3417 	mov	r2,dpl
   0BB3 AB 83              3418 	mov	r3,dph
   0BB5 AC F0              3419 	mov	r4,b
                    0BB7   3420 	C$queue.c$1109$1$1 ==.
                           3421 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1109: uxReturn = pxQueue->uxMessagesWaiting;
   0BB7 74 24              3422 	mov	a,#0x24
   0BB9 25 02              3423 	add	a,ar2
   0BBB FA                 3424 	mov	r2,a
   0BBC 74 00              3425 	mov	a,#0x00
   0BBE 35 03              3426 	addc	a,ar3
   0BC0 FB                 3427 	mov	r3,a
   0BC1 8A 82              3428 	mov	dpl,r2
   0BC3 8B 83              3429 	mov	dph,r3
   0BC5 8C F0              3430 	mov	b,r4
   0BC7 12s00r00           3431 	lcall	__gptrget
   0BCA FA                 3432 	mov	r2,a
                    0BCB   3433 	C$queue.c$1111$1$1 ==.
                           3434 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1111: return uxReturn;
   0BCB 8A 82              3435 	mov	dpl,r2
   0BCD                    3436 00101$:
                    0BCD   3437 	C$queue.c$1112$1$1 ==.
                    0BCD   3438 	XG$uxQueueMessagesWaitingFromISR$0$0 ==.
   0BCD 22                 3439 	ret
                           3440 ;------------------------------------------------------------
                           3441 ;Allocation info for local variables in function 'vQueueDelete'
                           3442 ;------------------------------------------------------------
                           3443 ;pxQueue                   Allocated to registers r2 r3 r4 
                           3444 ;------------------------------------------------------------
                    0BCE   3445 	G$vQueueDelete$0$0 ==.
                    0BCE   3446 	C$queue.c$1115$1$1 ==.
                           3447 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1115: void vQueueDelete( xQueueHandle pxQueue )
                           3448 ;	-----------------------------------------
                           3449 ;	 function vQueueDelete
                           3450 ;	-----------------------------------------
   0BCE                    3451 _vQueueDelete:
   0BCE AA 82              3452 	mov	r2,dpl
   0BD0 AB 83              3453 	mov	r3,dph
   0BD2 AC F0              3454 	mov	r4,b
                    0BD4   3455 	C$queue.c$1119$1$1 ==.
                           3456 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1119: vPortFree( pxQueue->pcHead );
   0BD4 8A 82              3457 	mov	dpl,r2
   0BD6 8B 83              3458 	mov	dph,r3
   0BD8 8C F0              3459 	mov	b,r4
   0BDA 12s00r00           3460 	lcall	__gptrget
   0BDD FD                 3461 	mov	r5,a
   0BDE A3                 3462 	inc	dptr
   0BDF 12s00r00           3463 	lcall	__gptrget
   0BE2 FE                 3464 	mov	r6,a
   0BE3 A3                 3465 	inc	dptr
   0BE4 12s00r00           3466 	lcall	__gptrget
   0BE7 FF                 3467 	mov	r7,a
   0BE8 8D 82              3468 	mov	dpl,r5
   0BEA 8E 83              3469 	mov	dph,r6
   0BEC 8F F0              3470 	mov	b,r7
   0BEE C0 02              3471 	push	ar2
   0BF0 C0 03              3472 	push	ar3
   0BF2 C0 04              3473 	push	ar4
   0BF4 12s00r00           3474 	lcall	_vPortFree
   0BF7 D0 04              3475 	pop	ar4
   0BF9 D0 03              3476 	pop	ar3
   0BFB D0 02              3477 	pop	ar2
                    0BFD   3478 	C$queue.c$1120$1$1 ==.
                           3479 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1120: vPortFree( pxQueue );
   0BFD 8A 82              3480 	mov	dpl,r2
   0BFF 8B 83              3481 	mov	dph,r3
   0C01 8C F0              3482 	mov	b,r4
   0C03 12s00r00           3483 	lcall	_vPortFree
   0C06                    3484 00101$:
                    0C06   3485 	C$queue.c$1121$1$1 ==.
                    0C06   3486 	XG$vQueueDelete$0$0 ==.
   0C06 22                 3487 	ret
                           3488 ;------------------------------------------------------------
                           3489 ;Allocation info for local variables in function 'prvCopyDataToQueue'
                           3490 ;------------------------------------------------------------
                           3491 ;pvItemToQueue             Allocated to stack - offset -5
                           3492 ;xPosition                 Allocated to stack - offset -6
                           3493 ;pxQueue                   Allocated to stack - offset 1
                           3494 ;sloc0                     Allocated to stack - offset 4
                           3495 ;sloc1                     Allocated to stack - offset 4
                           3496 ;sloc2                     Allocated to stack - offset 7
                           3497 ;sloc3                     Allocated to stack - offset 9
                           3498 ;------------------------------------------------------------
                    0C07   3499 	Fqueue$prvCopyDataToQueue$0$0 ==.
                    0C07   3500 	C$queue.c$1124$1$1 ==.
                           3501 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1124: static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
                           3502 ;	-----------------------------------------
                           3503 ;	 function prvCopyDataToQueue
                           3504 ;	-----------------------------------------
   0C07                    3505 _prvCopyDataToQueue:
   0C07 C0*00              3506 	push	_bp
   0C09 85 81*00           3507 	mov	_bp,sp
   0C0C C0 82              3508 	push	dpl
   0C0E C0 83              3509 	push	dph
   0C10 C0 F0              3510 	push	b
   0C12 E5 81              3511 	mov	a,sp
   0C14 24 0B              3512 	add	a,#0x0b
   0C16 F5 81              3513 	mov	sp,a
                    0C18   3514 	C$queue.c$1126$1$1 ==.
                           3515 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1126: if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   0C18 A8*00              3516 	mov	r0,_bp
   0C1A 08                 3517 	inc	r0
   0C1B 74 26              3518 	mov	a,#0x26
   0C1D 26                 3519 	add	a,@r0
   0C1E FD                 3520 	mov	r5,a
   0C1F 74 00              3521 	mov	a,#0x00
   0C21 08                 3522 	inc	r0
   0C22 36                 3523 	addc	a,@r0
   0C23 FE                 3524 	mov	r6,a
   0C24 08                 3525 	inc	r0
   0C25 86 07              3526 	mov	ar7,@r0
   0C27 8D 82              3527 	mov	dpl,r5
   0C29 8E 83              3528 	mov	dph,r6
   0C2B 8F F0              3529 	mov	b,r7
   0C2D 12s00r00           3530 	lcall	__gptrget
   0C30 FA                 3531 	mov	r2,a
   0C31 EA                 3532 	mov	a,r2
   0C32 70 03              3533 	jnz	00117$
   0C34 02s0ErBB           3534 	ljmp	00110$
   0C37                    3535 00117$:
                    0C37   3536 	C$queue.c$1139$1$1 ==.
                           3537 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1139: else if( xPosition == queueSEND_TO_BACK )
   0C37 E5*00              3538 	mov	a,_bp
   0C39 24 FA              3539 	add	a,#0xfa
   0C3B F8                 3540 	mov	r0,a
   0C3C E6                 3541 	mov	a,@r0
   0C3D 60 03              3542 	jz	00118$
   0C3F 02s0Dr7A           3543 	ljmp	00106$
   0C42                    3544 00118$:
                    0C42   3545 	C$queue.c$1141$2$3 ==.
                           3546 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1141: memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   0C42 E5*00              3547 	mov	a,_bp
   0C44 24 07              3548 	add	a,#0x07
   0C46 F8                 3549 	mov	r0,a
   0C47 A6 02              3550 	mov	@r0,ar2
   0C49 08                 3551 	inc	r0
   0C4A 76 00              3552 	mov	@r0,#0x00
   0C4C A8*00              3553 	mov	r0,_bp
   0C4E 08                 3554 	inc	r0
   0C4F E5*00              3555 	mov	a,_bp
   0C51 24 04              3556 	add	a,#0x04
   0C53 F9                 3557 	mov	r1,a
   0C54 74 06              3558 	mov	a,#0x06
   0C56 26                 3559 	add	a,@r0
   0C57 F7                 3560 	mov	@r1,a
   0C58 74 00              3561 	mov	a,#0x00
   0C5A 08                 3562 	inc	r0
   0C5B 36                 3563 	addc	a,@r0
   0C5C 09                 3564 	inc	r1
   0C5D F7                 3565 	mov	@r1,a
   0C5E 08                 3566 	inc	r0
   0C5F 09                 3567 	inc	r1
   0C60 E6                 3568 	mov	a,@r0
   0C61 F7                 3569 	mov	@r1,a
   0C62 E5*00              3570 	mov	a,_bp
   0C64 24 04              3571 	add	a,#0x04
   0C66 F8                 3572 	mov	r0,a
   0C67 86 82              3573 	mov	dpl,@r0
   0C69 08                 3574 	inc	r0
   0C6A 86 83              3575 	mov	dph,@r0
   0C6C 08                 3576 	inc	r0
   0C6D 86 F0              3577 	mov	b,@r0
   0C6F 12s00r00           3578 	lcall	__gptrget
   0C72 FC                 3579 	mov	r4,a
   0C73 A3                 3580 	inc	dptr
   0C74 12s00r00           3581 	lcall	__gptrget
   0C77 FA                 3582 	mov	r2,a
   0C78 A3                 3583 	inc	dptr
   0C79 12s00r00           3584 	lcall	__gptrget
   0C7C FB                 3585 	mov	r3,a
   0C7D C0 05              3586 	push	ar5
   0C7F C0 06              3587 	push	ar6
   0C81 C0 07              3588 	push	ar7
   0C83 E5*00              3589 	mov	a,_bp
   0C85 24 07              3590 	add	a,#0x07
   0C87 F8                 3591 	mov	r0,a
   0C88 E6                 3592 	mov	a,@r0
   0C89 C0 E0              3593 	push	acc
   0C8B 08                 3594 	inc	r0
   0C8C E6                 3595 	mov	a,@r0
   0C8D C0 E0              3596 	push	acc
   0C8F E5*00              3597 	mov	a,_bp
   0C91 24 FB              3598 	add	a,#0xfb
   0C93 F8                 3599 	mov	r0,a
   0C94 E6                 3600 	mov	a,@r0
   0C95 C0 E0              3601 	push	acc
   0C97 08                 3602 	inc	r0
   0C98 E6                 3603 	mov	a,@r0
   0C99 C0 E0              3604 	push	acc
   0C9B 08                 3605 	inc	r0
   0C9C E6                 3606 	mov	a,@r0
   0C9D C0 E0              3607 	push	acc
   0C9F 8C 82              3608 	mov	dpl,r4
   0CA1 8A 83              3609 	mov	dph,r2
   0CA3 8B F0              3610 	mov	b,r3
   0CA5 12s00r00           3611 	lcall	_memcpy
   0CA8 E5 81              3612 	mov	a,sp
   0CAA 24 FB              3613 	add	a,#0xfb
   0CAC F5 81              3614 	mov	sp,a
   0CAE D0 07              3615 	pop	ar7
   0CB0 D0 06              3616 	pop	ar6
   0CB2 D0 05              3617 	pop	ar5
                    0CB4   3618 	C$queue.c$1142$2$3 ==.
                           3619 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1142: pxQueue->pcWriteTo += pxQueue->uxItemSize;
   0CB4 E5*00              3620 	mov	a,_bp
   0CB6 24 04              3621 	add	a,#0x04
   0CB8 F8                 3622 	mov	r0,a
   0CB9 86 82              3623 	mov	dpl,@r0
   0CBB 08                 3624 	inc	r0
   0CBC 86 83              3625 	mov	dph,@r0
   0CBE 08                 3626 	inc	r0
   0CBF 86 F0              3627 	mov	b,@r0
   0CC1 E5*00              3628 	mov	a,_bp
   0CC3 24 09              3629 	add	a,#0x09
   0CC5 F9                 3630 	mov	r1,a
   0CC6 12s00r00           3631 	lcall	__gptrget
   0CC9 F7                 3632 	mov	@r1,a
   0CCA A3                 3633 	inc	dptr
   0CCB 12s00r00           3634 	lcall	__gptrget
   0CCE 09                 3635 	inc	r1
   0CCF F7                 3636 	mov	@r1,a
   0CD0 A3                 3637 	inc	dptr
   0CD1 12s00r00           3638 	lcall	__gptrget
   0CD4 09                 3639 	inc	r1
   0CD5 F7                 3640 	mov	@r1,a
   0CD6 8D 82              3641 	mov	dpl,r5
   0CD8 8E 83              3642 	mov	dph,r6
   0CDA 8F F0              3643 	mov	b,r7
   0CDC 12s00r00           3644 	lcall	__gptrget
   0CDF FA                 3645 	mov	r2,a
   0CE0 E5*00              3646 	mov	a,_bp
   0CE2 24 09              3647 	add	a,#0x09
   0CE4 F8                 3648 	mov	r0,a
   0CE5 E5 02              3649 	mov	a,ar2
   0CE7 26                 3650 	add	a,@r0
   0CE8 FD                 3651 	mov	r5,a
   0CE9 74 00              3652 	mov	a,#0x00
   0CEB 08                 3653 	inc	r0
   0CEC 36                 3654 	addc	a,@r0
   0CED FE                 3655 	mov	r6,a
   0CEE 08                 3656 	inc	r0
   0CEF 86 07              3657 	mov	ar7,@r0
   0CF1 E5*00              3658 	mov	a,_bp
   0CF3 24 04              3659 	add	a,#0x04
   0CF5 F8                 3660 	mov	r0,a
   0CF6 86 82              3661 	mov	dpl,@r0
   0CF8 08                 3662 	inc	r0
   0CF9 86 83              3663 	mov	dph,@r0
   0CFB 08                 3664 	inc	r0
   0CFC 86 F0              3665 	mov	b,@r0
   0CFE ED                 3666 	mov	a,r5
   0CFF 12s00r00           3667 	lcall	__gptrput
   0D02 A3                 3668 	inc	dptr
   0D03 EE                 3669 	mov	a,r6
   0D04 12s00r00           3670 	lcall	__gptrput
   0D07 A3                 3671 	inc	dptr
   0D08 EF                 3672 	mov	a,r7
   0D09 12s00r00           3673 	lcall	__gptrput
                    0D0C   3674 	C$queue.c$1143$2$3 ==.
                           3675 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1143: if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   0D0C A8*00              3676 	mov	r0,_bp
   0D0E 08                 3677 	inc	r0
   0D0F 74 03              3678 	mov	a,#0x03
   0D11 26                 3679 	add	a,@r0
   0D12 FA                 3680 	mov	r2,a
   0D13 74 00              3681 	mov	a,#0x00
   0D15 08                 3682 	inc	r0
   0D16 36                 3683 	addc	a,@r0
   0D17 FB                 3684 	mov	r3,a
   0D18 08                 3685 	inc	r0
   0D19 86 04              3686 	mov	ar4,@r0
   0D1B 8A 82              3687 	mov	dpl,r2
   0D1D 8B 83              3688 	mov	dph,r3
   0D1F 8C F0              3689 	mov	b,r4
   0D21 12s00r00           3690 	lcall	__gptrget
   0D24 FA                 3691 	mov	r2,a
   0D25 A3                 3692 	inc	dptr
   0D26 12s00r00           3693 	lcall	__gptrget
   0D29 FB                 3694 	mov	r3,a
   0D2A A3                 3695 	inc	dptr
   0D2B 12s00r00           3696 	lcall	__gptrget
   0D2E FC                 3697 	mov	r4,a
   0D2F C3                 3698 	clr	c
   0D30 ED                 3699 	mov	a,r5
   0D31 9A                 3700 	subb	a,r2
   0D32 EE                 3701 	mov	a,r6
   0D33 9B                 3702 	subb	a,r3
   0D34 EF                 3703 	mov	a,r7
   0D35 64 80              3704 	xrl	a,#0x80
   0D37 8C F0              3705 	mov	b,r4
   0D39 63 F0 80           3706 	xrl	b,#0x80
   0D3C 95 F0              3707 	subb	a,b
   0D3E 50 03              3708 	jnc	00119$
   0D40 02s0ErBB           3709 	ljmp	00110$
   0D43                    3710 00119$:
                    0D43   3711 	C$queue.c$1145$3$4 ==.
                           3712 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1145: pxQueue->pcWriteTo = pxQueue->pcHead;
   0D43 A8*00              3713 	mov	r0,_bp
   0D45 08                 3714 	inc	r0
   0D46 86 82              3715 	mov	dpl,@r0
   0D48 08                 3716 	inc	r0
   0D49 86 83              3717 	mov	dph,@r0
   0D4B 08                 3718 	inc	r0
   0D4C 86 F0              3719 	mov	b,@r0
   0D4E 12s00r00           3720 	lcall	__gptrget
   0D51 FA                 3721 	mov	r2,a
   0D52 A3                 3722 	inc	dptr
   0D53 12s00r00           3723 	lcall	__gptrget
   0D56 FB                 3724 	mov	r3,a
   0D57 A3                 3725 	inc	dptr
   0D58 12s00r00           3726 	lcall	__gptrget
   0D5B FC                 3727 	mov	r4,a
   0D5C E5*00              3728 	mov	a,_bp
   0D5E 24 04              3729 	add	a,#0x04
   0D60 F8                 3730 	mov	r0,a
   0D61 86 82              3731 	mov	dpl,@r0
   0D63 08                 3732 	inc	r0
   0D64 86 83              3733 	mov	dph,@r0
   0D66 08                 3734 	inc	r0
   0D67 86 F0              3735 	mov	b,@r0
   0D69 EA                 3736 	mov	a,r2
   0D6A 12s00r00           3737 	lcall	__gptrput
   0D6D A3                 3738 	inc	dptr
   0D6E EB                 3739 	mov	a,r3
   0D6F 12s00r00           3740 	lcall	__gptrput
   0D72 A3                 3741 	inc	dptr
   0D73 EC                 3742 	mov	a,r4
   0D74 12s00r00           3743 	lcall	__gptrput
   0D77 02s0ErBB           3744 	ljmp	00110$
   0D7A                    3745 00106$:
                    0D7A   3746 	C$queue.c$1150$2$5 ==.
                           3747 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1150: memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   0D7A E5*00              3748 	mov	a,_bp
   0D7C 24 07              3749 	add	a,#0x07
   0D7E F8                 3750 	mov	r0,a
   0D7F A6 02              3751 	mov	@r0,ar2
   0D81 08                 3752 	inc	r0
   0D82 76 00              3753 	mov	@r0,#0x00
   0D84 A8*00              3754 	mov	r0,_bp
   0D86 08                 3755 	inc	r0
   0D87 E5*00              3756 	mov	a,_bp
   0D89 24 09              3757 	add	a,#0x09
   0D8B F9                 3758 	mov	r1,a
   0D8C 74 09              3759 	mov	a,#0x09
   0D8E 26                 3760 	add	a,@r0
   0D8F F7                 3761 	mov	@r1,a
   0D90 74 00              3762 	mov	a,#0x00
   0D92 08                 3763 	inc	r0
   0D93 36                 3764 	addc	a,@r0
   0D94 09                 3765 	inc	r1
   0D95 F7                 3766 	mov	@r1,a
   0D96 08                 3767 	inc	r0
   0D97 09                 3768 	inc	r1
   0D98 E6                 3769 	mov	a,@r0
   0D99 F7                 3770 	mov	@r1,a
   0D9A E5*00              3771 	mov	a,_bp
   0D9C 24 09              3772 	add	a,#0x09
   0D9E F8                 3773 	mov	r0,a
   0D9F 86 82              3774 	mov	dpl,@r0
   0DA1 08                 3775 	inc	r0
   0DA2 86 83              3776 	mov	dph,@r0
   0DA4 08                 3777 	inc	r0
   0DA5 86 F0              3778 	mov	b,@r0
   0DA7 12s00r00           3779 	lcall	__gptrget
   0DAA FC                 3780 	mov	r4,a
   0DAB A3                 3781 	inc	dptr
   0DAC 12s00r00           3782 	lcall	__gptrget
   0DAF FA                 3783 	mov	r2,a
   0DB0 A3                 3784 	inc	dptr
   0DB1 12s00r00           3785 	lcall	__gptrget
   0DB4 FB                 3786 	mov	r3,a
   0DB5 C0 05              3787 	push	ar5
   0DB7 C0 06              3788 	push	ar6
   0DB9 C0 07              3789 	push	ar7
   0DBB E5*00              3790 	mov	a,_bp
   0DBD 24 07              3791 	add	a,#0x07
   0DBF F8                 3792 	mov	r0,a
   0DC0 E6                 3793 	mov	a,@r0
   0DC1 C0 E0              3794 	push	acc
   0DC3 08                 3795 	inc	r0
   0DC4 E6                 3796 	mov	a,@r0
   0DC5 C0 E0              3797 	push	acc
   0DC7 E5*00              3798 	mov	a,_bp
   0DC9 24 FB              3799 	add	a,#0xfb
   0DCB F8                 3800 	mov	r0,a
   0DCC E6                 3801 	mov	a,@r0
   0DCD C0 E0              3802 	push	acc
   0DCF 08                 3803 	inc	r0
   0DD0 E6                 3804 	mov	a,@r0
   0DD1 C0 E0              3805 	push	acc
   0DD3 08                 3806 	inc	r0
   0DD4 E6                 3807 	mov	a,@r0
   0DD5 C0 E0              3808 	push	acc
   0DD7 8C 82              3809 	mov	dpl,r4
   0DD9 8A 83              3810 	mov	dph,r2
   0DDB 8B F0              3811 	mov	b,r3
   0DDD 12s00r00           3812 	lcall	_memcpy
   0DE0 E5 81              3813 	mov	a,sp
   0DE2 24 FB              3814 	add	a,#0xfb
   0DE4 F5 81              3815 	mov	sp,a
   0DE6 D0 07              3816 	pop	ar7
   0DE8 D0 06              3817 	pop	ar6
   0DEA D0 05              3818 	pop	ar5
                    0DEC   3819 	C$queue.c$1151$2$5 ==.
                           3820 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1151: pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   0DEC E5*00              3821 	mov	a,_bp
   0DEE 24 09              3822 	add	a,#0x09
   0DF0 F8                 3823 	mov	r0,a
   0DF1 86 82              3824 	mov	dpl,@r0
   0DF3 08                 3825 	inc	r0
   0DF4 86 83              3826 	mov	dph,@r0
   0DF6 08                 3827 	inc	r0
   0DF7 86 F0              3828 	mov	b,@r0
   0DF9 12s00r00           3829 	lcall	__gptrget
   0DFC FA                 3830 	mov	r2,a
   0DFD A3                 3831 	inc	dptr
   0DFE 12s00r00           3832 	lcall	__gptrget
   0E01 FB                 3833 	mov	r3,a
   0E02 A3                 3834 	inc	dptr
   0E03 12s00r00           3835 	lcall	__gptrget
   0E06 FC                 3836 	mov	r4,a
   0E07 8D 82              3837 	mov	dpl,r5
   0E09 8E 83              3838 	mov	dph,r6
   0E0B 8F F0              3839 	mov	b,r7
   0E0D 12s00r00           3840 	lcall	__gptrget
   0E10 FD                 3841 	mov	r5,a
   0E11 E5*00              3842 	mov	a,_bp
   0E13 24 07              3843 	add	a,#0x07
   0E15 F8                 3844 	mov	r0,a
   0E16 A6 05              3845 	mov	@r0,ar5
   0E18 08                 3846 	inc	r0
   0E19 76 00              3847 	mov	@r0,#0x00
   0E1B E5*00              3848 	mov	a,_bp
   0E1D 24 07              3849 	add	a,#0x07
   0E1F F8                 3850 	mov	r0,a
   0E20 EA                 3851 	mov	a,r2
   0E21 C3                 3852 	clr	c
   0E22 96                 3853 	subb	a,@r0
   0E23 FA                 3854 	mov	r2,a
   0E24 EB                 3855 	mov	a,r3
   0E25 08                 3856 	inc	r0
   0E26 96                 3857 	subb	a,@r0
   0E27 FB                 3858 	mov	r3,a
   0E28 E5*00              3859 	mov	a,_bp
   0E2A 24 09              3860 	add	a,#0x09
   0E2C F8                 3861 	mov	r0,a
   0E2D 86 82              3862 	mov	dpl,@r0
   0E2F 08                 3863 	inc	r0
   0E30 86 83              3864 	mov	dph,@r0
   0E32 08                 3865 	inc	r0
   0E33 86 F0              3866 	mov	b,@r0
   0E35 EA                 3867 	mov	a,r2
   0E36 12s00r00           3868 	lcall	__gptrput
   0E39 A3                 3869 	inc	dptr
   0E3A EB                 3870 	mov	a,r3
   0E3B 12s00r00           3871 	lcall	__gptrput
   0E3E A3                 3872 	inc	dptr
   0E3F EC                 3873 	mov	a,r4
   0E40 12s00r00           3874 	lcall	__gptrput
                    0E43   3875 	C$queue.c$1152$2$5 ==.
                           3876 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1152: if( pxQueue->pcReadFrom < pxQueue->pcHead )
   0E43 A8*00              3877 	mov	r0,_bp
   0E45 08                 3878 	inc	r0
   0E46 86 82              3879 	mov	dpl,@r0
   0E48 08                 3880 	inc	r0
   0E49 86 83              3881 	mov	dph,@r0
   0E4B 08                 3882 	inc	r0
   0E4C 86 F0              3883 	mov	b,@r0
   0E4E 12s00r00           3884 	lcall	__gptrget
   0E51 FF                 3885 	mov	r7,a
   0E52 A3                 3886 	inc	dptr
   0E53 12s00r00           3887 	lcall	__gptrget
   0E56 FD                 3888 	mov	r5,a
   0E57 A3                 3889 	inc	dptr
   0E58 12s00r00           3890 	lcall	__gptrget
   0E5B FE                 3891 	mov	r6,a
   0E5C C3                 3892 	clr	c
   0E5D EA                 3893 	mov	a,r2
   0E5E 9F                 3894 	subb	a,r7
   0E5F EB                 3895 	mov	a,r3
   0E60 9D                 3896 	subb	a,r5
   0E61 EC                 3897 	mov	a,r4
   0E62 64 80              3898 	xrl	a,#0x80
   0E64 8E F0              3899 	mov	b,r6
   0E66 63 F0 80           3900 	xrl	b,#0x80
   0E69 95 F0              3901 	subb	a,b
   0E6B 40 03              3902 	jc	00120$
   0E6D 02s0ErBB           3903 	ljmp	00110$
   0E70                    3904 00120$:
                    0E70   3905 	C$queue.c$1154$3$6 ==.
                           3906 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1154: pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   0E70 A8*00              3907 	mov	r0,_bp
   0E72 08                 3908 	inc	r0
   0E73 74 03              3909 	mov	a,#0x03
   0E75 26                 3910 	add	a,@r0
   0E76 FA                 3911 	mov	r2,a
   0E77 74 00              3912 	mov	a,#0x00
   0E79 08                 3913 	inc	r0
   0E7A 36                 3914 	addc	a,@r0
   0E7B FB                 3915 	mov	r3,a
   0E7C 08                 3916 	inc	r0
   0E7D 86 04              3917 	mov	ar4,@r0
   0E7F 8A 82              3918 	mov	dpl,r2
   0E81 8B 83              3919 	mov	dph,r3
   0E83 8C F0              3920 	mov	b,r4
   0E85 12s00r00           3921 	lcall	__gptrget
   0E88 FA                 3922 	mov	r2,a
   0E89 A3                 3923 	inc	dptr
   0E8A 12s00r00           3924 	lcall	__gptrget
   0E8D FB                 3925 	mov	r3,a
   0E8E A3                 3926 	inc	dptr
   0E8F 12s00r00           3927 	lcall	__gptrget
   0E92 FC                 3928 	mov	r4,a
   0E93 E5*00              3929 	mov	a,_bp
   0E95 24 07              3930 	add	a,#0x07
   0E97 F8                 3931 	mov	r0,a
   0E98 EA                 3932 	mov	a,r2
   0E99 C3                 3933 	clr	c
   0E9A 96                 3934 	subb	a,@r0
   0E9B FA                 3935 	mov	r2,a
   0E9C EB                 3936 	mov	a,r3
   0E9D 08                 3937 	inc	r0
   0E9E 96                 3938 	subb	a,@r0
   0E9F FB                 3939 	mov	r3,a
   0EA0 E5*00              3940 	mov	a,_bp
   0EA2 24 09              3941 	add	a,#0x09
   0EA4 F8                 3942 	mov	r0,a
   0EA5 86 82              3943 	mov	dpl,@r0
   0EA7 08                 3944 	inc	r0
   0EA8 86 83              3945 	mov	dph,@r0
   0EAA 08                 3946 	inc	r0
   0EAB 86 F0              3947 	mov	b,@r0
   0EAD EA                 3948 	mov	a,r2
   0EAE 12s00r00           3949 	lcall	__gptrput
   0EB1 A3                 3950 	inc	dptr
   0EB2 EB                 3951 	mov	a,r3
   0EB3 12s00r00           3952 	lcall	__gptrput
   0EB6 A3                 3953 	inc	dptr
   0EB7 EC                 3954 	mov	a,r4
   0EB8 12s00r00           3955 	lcall	__gptrput
   0EBB                    3956 00110$:
                    0EBB   3957 	C$queue.c$1158$1$1 ==.
                           3958 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1158: ++( pxQueue->uxMessagesWaiting );
   0EBB A8*00              3959 	mov	r0,_bp
   0EBD 08                 3960 	inc	r0
   0EBE 74 24              3961 	mov	a,#0x24
   0EC0 26                 3962 	add	a,@r0
   0EC1 FA                 3963 	mov	r2,a
   0EC2 74 00              3964 	mov	a,#0x00
   0EC4 08                 3965 	inc	r0
   0EC5 36                 3966 	addc	a,@r0
   0EC6 FB                 3967 	mov	r3,a
   0EC7 08                 3968 	inc	r0
   0EC8 86 04              3969 	mov	ar4,@r0
   0ECA 8A 82              3970 	mov	dpl,r2
   0ECC 8B 83              3971 	mov	dph,r3
   0ECE 8C F0              3972 	mov	b,r4
   0ED0 12s00r00           3973 	lcall	__gptrget
   0ED3 FD                 3974 	mov	r5,a
   0ED4 0D                 3975 	inc	r5
   0ED5 8A 82              3976 	mov	dpl,r2
   0ED7 8B 83              3977 	mov	dph,r3
   0ED9 8C F0              3978 	mov	b,r4
   0EDB ED                 3979 	mov	a,r5
   0EDC 12s00r00           3980 	lcall	__gptrput
   0EDF                    3981 00111$:
   0EDF 85*00 81           3982 	mov	sp,_bp
   0EE2 D0*00              3983 	pop	_bp
                    0EE4   3984 	C$queue.c$1159$1$1 ==.
                    0EE4   3985 	XFqueue$prvCopyDataToQueue$0$0 ==.
   0EE4 22                 3986 	ret
                           3987 ;------------------------------------------------------------
                           3988 ;Allocation info for local variables in function 'prvCopyDataFromQueue'
                           3989 ;------------------------------------------------------------
                           3990 ;pvBuffer                  Allocated to stack - offset -5
                           3991 ;pxQueue                   Allocated to stack - offset 1
                           3992 ;sloc0                     Allocated to stack - offset 4
                           3993 ;sloc1                     Allocated to stack - offset 7
                           3994 ;------------------------------------------------------------
                    0EE5   3995 	Fqueue$prvCopyDataFromQueue$0$0 ==.
                    0EE5   3996 	C$queue.c$1162$1$1 ==.
                           3997 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1162: static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
                           3998 ;	-----------------------------------------
                           3999 ;	 function prvCopyDataFromQueue
                           4000 ;	-----------------------------------------
   0EE5                    4001 _prvCopyDataFromQueue:
   0EE5 C0*00              4002 	push	_bp
   0EE7 85 81*00           4003 	mov	_bp,sp
   0EEA C0 82              4004 	push	dpl
   0EEC C0 83              4005 	push	dph
   0EEE C0 F0              4006 	push	b
   0EF0 E5 81              4007 	mov	a,sp
   0EF2 24 07              4008 	add	a,#0x07
   0EF4 F5 81              4009 	mov	sp,a
                    0EF6   4010 	C$queue.c$1164$1$1 ==.
                           4011 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1164: if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   0EF6 A8*00              4012 	mov	r0,_bp
   0EF8 08                 4013 	inc	r0
   0EF9 86 82              4014 	mov	dpl,@r0
   0EFB 08                 4015 	inc	r0
   0EFC 86 83              4016 	mov	dph,@r0
   0EFE 08                 4017 	inc	r0
   0EFF 86 F0              4018 	mov	b,@r0
   0F01 12s00r00           4019 	lcall	__gptrget
   0F04 FD                 4020 	mov	r5,a
   0F05 A3                 4021 	inc	dptr
   0F06 12s00r00           4022 	lcall	__gptrget
   0F09 FE                 4023 	mov	r6,a
   0F0A A3                 4024 	inc	dptr
   0F0B 12s00r00           4025 	lcall	__gptrget
   0F0E FF                 4026 	mov	r7,a
   0F0F BD 00 09           4027 	cjne	r5,#0x00,00109$
   0F12 BE 00 06           4028 	cjne	r6,#0x00,00109$
   0F15 BF 00 03           4029 	cjne	r7,#0x00,00109$
   0F18 02s10r37           4030 	ljmp	00105$
   0F1B                    4031 00109$:
                    0F1B   4032 	C$queue.c$1166$2$1 ==.
                           4033 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1166: pxQueue->pcReadFrom += pxQueue->uxItemSize;
   0F1B C0 05              4034 	push	ar5
   0F1D C0 06              4035 	push	ar6
   0F1F C0 07              4036 	push	ar7
   0F21 A8*00              4037 	mov	r0,_bp
   0F23 08                 4038 	inc	r0
   0F24 E5*00              4039 	mov	a,_bp
   0F26 24 04              4040 	add	a,#0x04
   0F28 F9                 4041 	mov	r1,a
   0F29 74 09              4042 	mov	a,#0x09
   0F2B 26                 4043 	add	a,@r0
   0F2C F7                 4044 	mov	@r1,a
   0F2D 74 00              4045 	mov	a,#0x00
   0F2F 08                 4046 	inc	r0
   0F30 36                 4047 	addc	a,@r0
   0F31 09                 4048 	inc	r1
   0F32 F7                 4049 	mov	@r1,a
   0F33 08                 4050 	inc	r0
   0F34 09                 4051 	inc	r1
   0F35 E6                 4052 	mov	a,@r0
   0F36 F7                 4053 	mov	@r1,a
   0F37 E5*00              4054 	mov	a,_bp
   0F39 24 04              4055 	add	a,#0x04
   0F3B F8                 4056 	mov	r0,a
   0F3C 86 82              4057 	mov	dpl,@r0
   0F3E 08                 4058 	inc	r0
   0F3F 86 83              4059 	mov	dph,@r0
   0F41 08                 4060 	inc	r0
   0F42 86 F0              4061 	mov	b,@r0
   0F44 12s00r00           4062 	lcall	__gptrget
   0F47 FD                 4063 	mov	r5,a
   0F48 A3                 4064 	inc	dptr
   0F49 12s00r00           4065 	lcall	__gptrget
   0F4C FE                 4066 	mov	r6,a
   0F4D A3                 4067 	inc	dptr
   0F4E 12s00r00           4068 	lcall	__gptrget
   0F51 FF                 4069 	mov	r7,a
   0F52 A8*00              4070 	mov	r0,_bp
   0F54 08                 4071 	inc	r0
   0F55 74 26              4072 	mov	a,#0x26
   0F57 26                 4073 	add	a,@r0
   0F58 FA                 4074 	mov	r2,a
   0F59 74 00              4075 	mov	a,#0x00
   0F5B 08                 4076 	inc	r0
   0F5C 36                 4077 	addc	a,@r0
   0F5D FB                 4078 	mov	r3,a
   0F5E 08                 4079 	inc	r0
   0F5F 86 04              4080 	mov	ar4,@r0
   0F61 8A 82              4081 	mov	dpl,r2
   0F63 8B 83              4082 	mov	dph,r3
   0F65 8C F0              4083 	mov	b,r4
   0F67 E5*00              4084 	mov	a,_bp
   0F69 24 07              4085 	add	a,#0x07
   0F6B F8                 4086 	mov	r0,a
   0F6C 12s00r00           4087 	lcall	__gptrget
   0F6F F6                 4088 	mov	@r0,a
   0F70 E5*00              4089 	mov	a,_bp
   0F72 24 07              4090 	add	a,#0x07
   0F74 F8                 4091 	mov	r0,a
   0F75 E6                 4092 	mov	a,@r0
   0F76 25 05              4093 	add	a,ar5
   0F78 FD                 4094 	mov	r5,a
   0F79 74 00              4095 	mov	a,#0x00
   0F7B 35 06              4096 	addc	a,ar6
   0F7D FE                 4097 	mov	r6,a
   0F7E E5*00              4098 	mov	a,_bp
   0F80 24 04              4099 	add	a,#0x04
   0F82 F8                 4100 	mov	r0,a
   0F83 86 82              4101 	mov	dpl,@r0
   0F85 08                 4102 	inc	r0
   0F86 86 83              4103 	mov	dph,@r0
   0F88 08                 4104 	inc	r0
   0F89 86 F0              4105 	mov	b,@r0
   0F8B ED                 4106 	mov	a,r5
   0F8C 12s00r00           4107 	lcall	__gptrput
   0F8F A3                 4108 	inc	dptr
   0F90 EE                 4109 	mov	a,r6
   0F91 12s00r00           4110 	lcall	__gptrput
   0F94 A3                 4111 	inc	dptr
   0F95 EF                 4112 	mov	a,r7
   0F96 12s00r00           4113 	lcall	__gptrput
                    0F99   4114 	C$queue.c$1167$2$2 ==.
                           4115 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1167: if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   0F99 A8*00              4116 	mov	r0,_bp
   0F9B 08                 4117 	inc	r0
   0F9C 74 03              4118 	mov	a,#0x03
   0F9E 26                 4119 	add	a,@r0
   0F9F FA                 4120 	mov	r2,a
   0FA0 74 00              4121 	mov	a,#0x00
   0FA2 08                 4122 	inc	r0
   0FA3 36                 4123 	addc	a,@r0
   0FA4 FB                 4124 	mov	r3,a
   0FA5 08                 4125 	inc	r0
   0FA6 86 04              4126 	mov	ar4,@r0
   0FA8 8A 82              4127 	mov	dpl,r2
   0FAA 8B 83              4128 	mov	dph,r3
   0FAC 8C F0              4129 	mov	b,r4
   0FAE 12s00r00           4130 	lcall	__gptrget
   0FB1 FA                 4131 	mov	r2,a
   0FB2 A3                 4132 	inc	dptr
   0FB3 12s00r00           4133 	lcall	__gptrget
   0FB6 FB                 4134 	mov	r3,a
   0FB7 A3                 4135 	inc	dptr
   0FB8 12s00r00           4136 	lcall	__gptrget
   0FBB FC                 4137 	mov	r4,a
   0FBC C3                 4138 	clr	c
   0FBD ED                 4139 	mov	a,r5
   0FBE 9A                 4140 	subb	a,r2
   0FBF EE                 4141 	mov	a,r6
   0FC0 9B                 4142 	subb	a,r3
   0FC1 EF                 4143 	mov	a,r7
   0FC2 64 80              4144 	xrl	a,#0x80
   0FC4 8C F0              4145 	mov	b,r4
   0FC6 63 F0 80           4146 	xrl	b,#0x80
   0FC9 95 F0              4147 	subb	a,b
   0FCB E4                 4148 	clr	a
   0FCC 33                 4149 	rlc	a
   0FCD D0 07              4150 	pop	ar7
   0FCF D0 06              4151 	pop	ar6
   0FD1 D0 05              4152 	pop	ar5
   0FD3 60 03              4153 	jz	00110$
   0FD5 02s0FrF3           4154 	ljmp	00102$
   0FD8                    4155 00110$:
                    0FD8   4156 	C$queue.c$1169$3$3 ==.
                           4157 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1169: pxQueue->pcReadFrom = pxQueue->pcHead;
   0FD8 E5*00              4158 	mov	a,_bp
   0FDA 24 04              4159 	add	a,#0x04
   0FDC F8                 4160 	mov	r0,a
   0FDD 86 82              4161 	mov	dpl,@r0
   0FDF 08                 4162 	inc	r0
   0FE0 86 83              4163 	mov	dph,@r0
   0FE2 08                 4164 	inc	r0
   0FE3 86 F0              4165 	mov	b,@r0
   0FE5 ED                 4166 	mov	a,r5
   0FE6 12s00r00           4167 	lcall	__gptrput
   0FE9 A3                 4168 	inc	dptr
   0FEA EE                 4169 	mov	a,r6
   0FEB 12s00r00           4170 	lcall	__gptrput
   0FEE A3                 4171 	inc	dptr
   0FEF EF                 4172 	mov	a,r7
   0FF0 12s00r00           4173 	lcall	__gptrput
   0FF3                    4174 00102$:
                    0FF3   4175 	C$queue.c$1171$2$2 ==.
                           4176 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1171: memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   0FF3 E5*00              4177 	mov	a,_bp
   0FF5 24 07              4178 	add	a,#0x07
   0FF7 F8                 4179 	mov	r0,a
   0FF8 86 02              4180 	mov	ar2,@r0
   0FFA 7B 00              4181 	mov	r3,#0x00
   0FFC E5*00              4182 	mov	a,_bp
   0FFE 24 04              4183 	add	a,#0x04
   1000 F8                 4184 	mov	r0,a
   1001 86 82              4185 	mov	dpl,@r0
   1003 08                 4186 	inc	r0
   1004 86 83              4187 	mov	dph,@r0
   1006 08                 4188 	inc	r0
   1007 86 F0              4189 	mov	b,@r0
   1009 12s00r00           4190 	lcall	__gptrget
   100C FC                 4191 	mov	r4,a
   100D A3                 4192 	inc	dptr
   100E 12s00r00           4193 	lcall	__gptrget
   1011 FD                 4194 	mov	r5,a
   1012 A3                 4195 	inc	dptr
   1013 12s00r00           4196 	lcall	__gptrget
   1016 FE                 4197 	mov	r6,a
   1017 C0 02              4198 	push	ar2
   1019 C0 03              4199 	push	ar3
   101B C0 04              4200 	push	ar4
   101D C0 05              4201 	push	ar5
   101F C0 06              4202 	push	ar6
   1021 E5*00              4203 	mov	a,_bp
   1023 24 FB              4204 	add	a,#0xfb
   1025 F8                 4205 	mov	r0,a
   1026 86 82              4206 	mov	dpl,@r0
   1028 08                 4207 	inc	r0
   1029 86 83              4208 	mov	dph,@r0
   102B 08                 4209 	inc	r0
   102C 86 F0              4210 	mov	b,@r0
   102E 12s00r00           4211 	lcall	_memcpy
   1031 E5 81              4212 	mov	a,sp
   1033 24 FB              4213 	add	a,#0xfb
   1035 F5 81              4214 	mov	sp,a
   1037                    4215 00105$:
   1037 85*00 81           4216 	mov	sp,_bp
   103A D0*00              4217 	pop	_bp
                    103C   4218 	C$queue.c$1173$2$1 ==.
                    103C   4219 	XFqueue$prvCopyDataFromQueue$0$0 ==.
   103C 22                 4220 	ret
                           4221 ;------------------------------------------------------------
                           4222 ;Allocation info for local variables in function 'prvUnlockQueue'
                           4223 ;------------------------------------------------------------
                           4224 ;pxQueue                   Allocated to registers r2 r3 r4 
                           4225 ;------------------------------------------------------------
                    103D   4226 	Fqueue$prvUnlockQueue$0$0 ==.
                    103D   4227 	C$queue.c$1176$2$1 ==.
                           4228 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1176: static void prvUnlockQueue( xQueueHandle pxQueue )
                           4229 ;	-----------------------------------------
                           4230 ;	 function prvUnlockQueue
                           4231 ;	-----------------------------------------
   103D                    4232 _prvUnlockQueue:
   103D AA 82              4233 	mov	r2,dpl
   103F AB 83              4234 	mov	r3,dph
   1041 AC F0              4235 	mov	r4,b
                    1043   4236 	C$queue.c$1184$1$1 ==.
                           4237 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1184: taskENTER_CRITICAL();
   1043 C0 E0 C0 A8        4238 	 push ACC push IE 
   1047 C2 AF              4239 	clr	_EA
                    1049   4240 	C$queue.c$1187$2$2 ==.
                           4241 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1187: while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   1049                    4242 00106$:
   1049 74 28              4243 	mov	a,#0x28
   104B 25 02              4244 	add	a,ar2
   104D FD                 4245 	mov	r5,a
   104E 74 00              4246 	mov	a,#0x00
   1050 35 03              4247 	addc	a,ar3
   1052 FE                 4248 	mov	r6,a
   1053 8C 07              4249 	mov	ar7,r4
   1055 8D 82              4250 	mov	dpl,r5
   1057 8E 83              4251 	mov	dph,r6
   1059 8F F0              4252 	mov	b,r7
   105B 12s00r00           4253 	lcall	__gptrget
   105E F8                 4254 	mov	r0,a
   105F C3                 4255 	clr	c
   1060 74 00              4256 	mov	a,#0x00
   1062 64 80              4257 	xrl	a,#0x80
   1064 88 F0              4258 	mov	b,r0
   1066 63 F0 80           4259 	xrl	b,#0x80
   1069 95 F0              4260 	subb	a,b
   106B 40 03              4261 	jc	00127$
   106D 02s11r09           4262 	ljmp	00108$
   1070                    4263 00127$:
                    1070   4264 	C$queue.c$1191$1$1 ==.
                           4265 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1191: if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
   1070 C0 05              4266 	push	ar5
   1072 C0 06              4267 	push	ar6
   1074 C0 07              4268 	push	ar7
   1076 74 18              4269 	mov	a,#0x18
   1078 25 02              4270 	add	a,ar2
   107A F8                 4271 	mov	r0,a
   107B 74 00              4272 	mov	a,#0x00
   107D 35 03              4273 	addc	a,ar3
   107F F9                 4274 	mov	r1,a
   1080 8C 05              4275 	mov	ar5,r4
   1082 88 82              4276 	mov	dpl,r0
   1084 89 83              4277 	mov	dph,r1
   1086 8D F0              4278 	mov	b,r5
   1088 12s00r00           4279 	lcall	__gptrget
   108B D0 07              4280 	pop	ar7
   108D D0 06              4281 	pop	ar6
   108F D0 05              4282 	pop	ar5
   1091 70 03              4283 	jnz	00128$
   1093 02s11r09           4284 	ljmp	00108$
   1096                    4285 00128$:
                    1096   4286 	C$queue.c$1195$1$1 ==.
                           4287 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1195: if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1096 C0 05              4288 	push	ar5
   1098 C0 06              4289 	push	ar6
   109A C0 07              4290 	push	ar7
   109C 74 18              4291 	mov	a,#0x18
   109E 25 02              4292 	add	a,ar2
   10A0 F8                 4293 	mov	r0,a
   10A1 74 00              4294 	mov	a,#0x00
   10A3 35 03              4295 	addc	a,ar3
   10A5 F9                 4296 	mov	r1,a
   10A6 8C 05              4297 	mov	ar5,r4
   10A8 88 82              4298 	mov	dpl,r0
   10AA 89 83              4299 	mov	dph,r1
   10AC 8D F0              4300 	mov	b,r5
   10AE C0 02              4301 	push	ar2
   10B0 C0 03              4302 	push	ar3
   10B2 C0 04              4303 	push	ar4
   10B4 C0 05              4304 	push	ar5
   10B6 C0 06              4305 	push	ar6
   10B8 C0 07              4306 	push	ar7
   10BA 12s00r00           4307 	lcall	_xTaskRemoveFromEventList
   10BD E5 82              4308 	mov	a,dpl
   10BF D0 07              4309 	pop	ar7
   10C1 D0 06              4310 	pop	ar6
   10C3 D0 05              4311 	pop	ar5
   10C5 D0 04              4312 	pop	ar4
   10C7 D0 03              4313 	pop	ar3
   10C9 D0 02              4314 	pop	ar2
   10CB D0 07              4315 	pop	ar7
   10CD D0 06              4316 	pop	ar6
   10CF D0 05              4317 	pop	ar5
   10D1 70 03              4318 	jnz	00129$
   10D3 02s10rF1           4319 	ljmp	00102$
   10D6                    4320 00129$:
                    10D6   4321 	C$queue.c$1199$5$5 ==.
                           4322 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1199: vTaskMissedYield();
   10D6 C0 02              4323 	push	ar2
   10D8 C0 03              4324 	push	ar3
   10DA C0 04              4325 	push	ar4
   10DC C0 05              4326 	push	ar5
   10DE C0 06              4327 	push	ar6
   10E0 C0 07              4328 	push	ar7
   10E2 12s00r00           4329 	lcall	_vTaskMissedYield
   10E5 D0 07              4330 	pop	ar7
   10E7 D0 06              4331 	pop	ar6
   10E9 D0 05              4332 	pop	ar5
   10EB D0 04              4333 	pop	ar4
   10ED D0 03              4334 	pop	ar3
   10EF D0 02              4335 	pop	ar2
   10F1                    4336 00102$:
                    10F1   4337 	C$queue.c$1202$4$4 ==.
                           4338 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1202: --( pxQueue->xTxLock );
   10F1 8D 82              4339 	mov	dpl,r5
   10F3 8E 83              4340 	mov	dph,r6
   10F5 8F F0              4341 	mov	b,r7
   10F7 12s00r00           4342 	lcall	__gptrget
   10FA F8                 4343 	mov	r0,a
   10FB 18                 4344 	dec	r0
   10FC 8D 82              4345 	mov	dpl,r5
   10FE 8E 83              4346 	mov	dph,r6
   1100 8F F0              4347 	mov	b,r7
   1102 E8                 4348 	mov	a,r0
   1103 12s00r00           4349 	lcall	__gptrput
   1106 02s10r49           4350 	ljmp	00106$
                    1109   4351 	C$queue.c$1206$2$2 ==.
                           4352 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1206: break;
   1109                    4353 00108$:
                    1109   4354 	C$queue.c$1210$2$2 ==.
                           4355 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1210: pxQueue->xTxLock = queueUNLOCKED;
   1109 8D 82              4356 	mov	dpl,r5
   110B 8E 83              4357 	mov	dph,r6
   110D 8F F0              4358 	mov	b,r7
   110F 74 FF              4359 	mov	a,#0xFF
   1111 12s00r00           4360 	lcall	__gptrput
                    1114   4361 	C$queue.c$1212$1$1 ==.
                           4362 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1212: taskEXIT_CRITICAL();
   1114 D0 E0              4363 	 pop ACC 
   1116 53 E0 80           4364 	anl	_ACC,#0x80
   1119 E5 E0              4365 	mov	a,_ACC
   111B 42 A8              4366 	orl	_IE,a
   111D D0 E0              4367 	 pop ACC 
                    111F   4368 	C$queue.c$1215$1$1 ==.
                           4369 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1215: taskENTER_CRITICAL();
   111F C0 E0 C0 A8        4370 	 push ACC push IE 
   1123 C2 AF              4371 	clr	_EA
                    1125   4372 	C$queue.c$1217$2$7 ==.
                           4373 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1217: while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   1125                    4374 00114$:
   1125 74 27              4375 	mov	a,#0x27
   1127 25 02              4376 	add	a,ar2
   1129 FD                 4377 	mov	r5,a
   112A 74 00              4378 	mov	a,#0x00
   112C 35 03              4379 	addc	a,ar3
   112E FE                 4380 	mov	r6,a
   112F 8C 07              4381 	mov	ar7,r4
   1131 8D 82              4382 	mov	dpl,r5
   1133 8E 83              4383 	mov	dph,r6
   1135 8F F0              4384 	mov	b,r7
   1137 12s00r00           4385 	lcall	__gptrget
   113A F8                 4386 	mov	r0,a
   113B C3                 4387 	clr	c
   113C 74 00              4388 	mov	a,#0x00
   113E 64 80              4389 	xrl	a,#0x80
   1140 88 F0              4390 	mov	b,r0
   1142 63 F0 80           4391 	xrl	b,#0x80
   1145 95 F0              4392 	subb	a,b
   1147 40 03              4393 	jc	00130$
   1149 02s11rE5           4394 	ljmp	00116$
   114C                    4395 00130$:
                    114C   4396 	C$queue.c$1219$1$1 ==.
                           4397 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1219: if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
   114C C0 05              4398 	push	ar5
   114E C0 06              4399 	push	ar6
   1150 C0 07              4400 	push	ar7
   1152 74 0C              4401 	mov	a,#0x0C
   1154 25 02              4402 	add	a,ar2
   1156 F8                 4403 	mov	r0,a
   1157 74 00              4404 	mov	a,#0x00
   1159 35 03              4405 	addc	a,ar3
   115B F9                 4406 	mov	r1,a
   115C 8C 05              4407 	mov	ar5,r4
   115E 88 82              4408 	mov	dpl,r0
   1160 89 83              4409 	mov	dph,r1
   1162 8D F0              4410 	mov	b,r5
   1164 12s00r00           4411 	lcall	__gptrget
   1167 D0 07              4412 	pop	ar7
   1169 D0 06              4413 	pop	ar6
   116B D0 05              4414 	pop	ar5
   116D 70 03              4415 	jnz	00131$
   116F 02s11rE5           4416 	ljmp	00116$
   1172                    4417 00131$:
                    1172   4418 	C$queue.c$1221$1$1 ==.
                           4419 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1221: if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1172 C0 05              4420 	push	ar5
   1174 C0 06              4421 	push	ar6
   1176 C0 07              4422 	push	ar7
   1178 74 0C              4423 	mov	a,#0x0C
   117A 25 02              4424 	add	a,ar2
   117C F8                 4425 	mov	r0,a
   117D 74 00              4426 	mov	a,#0x00
   117F 35 03              4427 	addc	a,ar3
   1181 F9                 4428 	mov	r1,a
   1182 8C 05              4429 	mov	ar5,r4
   1184 88 82              4430 	mov	dpl,r0
   1186 89 83              4431 	mov	dph,r1
   1188 8D F0              4432 	mov	b,r5
   118A C0 02              4433 	push	ar2
   118C C0 03              4434 	push	ar3
   118E C0 04              4435 	push	ar4
   1190 C0 05              4436 	push	ar5
   1192 C0 06              4437 	push	ar6
   1194 C0 07              4438 	push	ar7
   1196 12s00r00           4439 	lcall	_xTaskRemoveFromEventList
   1199 E5 82              4440 	mov	a,dpl
   119B D0 07              4441 	pop	ar7
   119D D0 06              4442 	pop	ar6
   119F D0 05              4443 	pop	ar5
   11A1 D0 04              4444 	pop	ar4
   11A3 D0 03              4445 	pop	ar3
   11A5 D0 02              4446 	pop	ar2
   11A7 D0 07              4447 	pop	ar7
   11A9 D0 06              4448 	pop	ar6
   11AB D0 05              4449 	pop	ar5
   11AD 70 03              4450 	jnz	00132$
   11AF 02s11rCD           4451 	ljmp	00110$
   11B2                    4452 00132$:
                    11B2   4453 	C$queue.c$1223$5$10 ==.
                           4454 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1223: vTaskMissedYield();
   11B2 C0 02              4455 	push	ar2
   11B4 C0 03              4456 	push	ar3
   11B6 C0 04              4457 	push	ar4
   11B8 C0 05              4458 	push	ar5
   11BA C0 06              4459 	push	ar6
   11BC C0 07              4460 	push	ar7
   11BE 12s00r00           4461 	lcall	_vTaskMissedYield
   11C1 D0 07              4462 	pop	ar7
   11C3 D0 06              4463 	pop	ar6
   11C5 D0 05              4464 	pop	ar5
   11C7 D0 04              4465 	pop	ar4
   11C9 D0 03              4466 	pop	ar3
   11CB D0 02              4467 	pop	ar2
   11CD                    4468 00110$:
                    11CD   4469 	C$queue.c$1226$4$9 ==.
                           4470 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1226: --( pxQueue->xRxLock );
   11CD 8D 82              4471 	mov	dpl,r5
   11CF 8E 83              4472 	mov	dph,r6
   11D1 8F F0              4473 	mov	b,r7
   11D3 12s00r00           4474 	lcall	__gptrget
   11D6 F8                 4475 	mov	r0,a
   11D7 18                 4476 	dec	r0
   11D8 8D 82              4477 	mov	dpl,r5
   11DA 8E 83              4478 	mov	dph,r6
   11DC 8F F0              4479 	mov	b,r7
   11DE E8                 4480 	mov	a,r0
   11DF 12s00r00           4481 	lcall	__gptrput
   11E2 02s11r25           4482 	ljmp	00114$
                    11E5   4483 	C$queue.c$1230$2$7 ==.
                           4484 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1230: break;
   11E5                    4485 00116$:
                    11E5   4486 	C$queue.c$1234$2$7 ==.
                           4487 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1234: pxQueue->xRxLock = queueUNLOCKED;
   11E5 8D 82              4488 	mov	dpl,r5
   11E7 8E 83              4489 	mov	dph,r6
   11E9 8F F0              4490 	mov	b,r7
   11EB 74 FF              4491 	mov	a,#0xFF
   11ED 12s00r00           4492 	lcall	__gptrput
                    11F0   4493 	C$queue.c$1236$1$1 ==.
                           4494 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1236: taskEXIT_CRITICAL();
   11F0 D0 E0              4495 	 pop ACC 
   11F2 53 E0 80           4496 	anl	_ACC,#0x80
   11F5 E5 E0              4497 	mov	a,_ACC
   11F7 42 A8              4498 	orl	_IE,a
   11F9 D0 E0              4499 	 pop ACC 
   11FB                    4500 00117$:
                    11FB   4501 	C$queue.c$1237$1$1 ==.
                    11FB   4502 	XFqueue$prvUnlockQueue$0$0 ==.
   11FB 22                 4503 	ret
                           4504 ;------------------------------------------------------------
                           4505 ;Allocation info for local variables in function 'prvIsQueueEmpty'
                           4506 ;------------------------------------------------------------
                           4507 ;pxQueue                   Allocated to registers r2 r3 r4 
                           4508 ;xReturn                   Allocated to registers r2 
                           4509 ;------------------------------------------------------------
                    11FC   4510 	Fqueue$prvIsQueueEmpty$0$0 ==.
                    11FC   4511 	C$queue.c$1240$1$1 ==.
                           4512 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1240: static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
                           4513 ;	-----------------------------------------
                           4514 ;	 function prvIsQueueEmpty
                           4515 ;	-----------------------------------------
   11FC                    4516 _prvIsQueueEmpty:
   11FC AA 82              4517 	mov	r2,dpl
   11FE AB 83              4518 	mov	r3,dph
   1200 AC F0              4519 	mov	r4,b
                    1202   4520 	C$queue.c$1244$1$1 ==.
                           4521 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1244: taskENTER_CRITICAL();
   1202 C0 E0 C0 A8        4522 	 push ACC push IE 
   1206 C2 AF              4523 	clr	_EA
                    1208   4524 	C$queue.c$1245$1$1 ==.
                           4525 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1245: xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   1208 74 24              4526 	mov	a,#0x24
   120A 25 02              4527 	add	a,ar2
   120C FA                 4528 	mov	r2,a
   120D 74 00              4529 	mov	a,#0x00
   120F 35 03              4530 	addc	a,ar3
   1211 FB                 4531 	mov	r3,a
   1212 8A 82              4532 	mov	dpl,r2
   1214 8B 83              4533 	mov	dph,r3
   1216 8C F0              4534 	mov	b,r4
   1218 12s00r00           4535 	lcall	__gptrget
   121B FA                 4536 	mov	r2,a
   121C BA 00 04           4537 	cjne	r2,#0x00,00103$
   121F 74 01              4538 	mov	a,#0x01
   1221 80 02              4539 	sjmp	00104$
   1223                    4540 00103$:
   1223 74 00              4541 	mov	a,#0x00
   1225                    4542 00104$:
   1225 FA                 4543 	mov	r2,a
                    1226   4544 	C$queue.c$1246$1$1 ==.
                           4545 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1246: taskEXIT_CRITICAL();
   1226 D0 E0              4546 	 pop ACC 
   1228 53 E0 80           4547 	anl	_ACC,#0x80
   122B E5 E0              4548 	mov	a,_ACC
   122D 42 A8              4549 	orl	_IE,a
   122F D0 E0              4550 	 pop ACC 
                    1231   4551 	C$queue.c$1248$1$1 ==.
                           4552 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1248: return xReturn;
   1231 8A 82              4553 	mov	dpl,r2
   1233                    4554 00101$:
                    1233   4555 	C$queue.c$1249$1$1 ==.
                    1233   4556 	XFqueue$prvIsQueueEmpty$0$0 ==.
   1233 22                 4557 	ret
                           4558 ;------------------------------------------------------------
                           4559 ;Allocation info for local variables in function 'xQueueIsQueueEmptyFromISR'
                           4560 ;------------------------------------------------------------
                           4561 ;pxQueue                   Allocated to registers r2 r3 r4 
                           4562 ;xReturn                   Allocated to registers r2 
                           4563 ;------------------------------------------------------------
                    1234   4564 	G$xQueueIsQueueEmptyFromISR$0$0 ==.
                    1234   4565 	C$queue.c$1252$1$1 ==.
                           4566 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1252: signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
                           4567 ;	-----------------------------------------
                           4568 ;	 function xQueueIsQueueEmptyFromISR
                           4569 ;	-----------------------------------------
   1234                    4570 _xQueueIsQueueEmptyFromISR:
   1234 AA 82              4571 	mov	r2,dpl
   1236 AB 83              4572 	mov	r3,dph
   1238 AC F0              4573 	mov	r4,b
                    123A   4574 	C$queue.c$1256$1$1 ==.
                           4575 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1256: xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   123A 74 24              4576 	mov	a,#0x24
   123C 25 02              4577 	add	a,ar2
   123E FA                 4578 	mov	r2,a
   123F 74 00              4579 	mov	a,#0x00
   1241 35 03              4580 	addc	a,ar3
   1243 FB                 4581 	mov	r3,a
   1244 8A 82              4582 	mov	dpl,r2
   1246 8B 83              4583 	mov	dph,r3
   1248 8C F0              4584 	mov	b,r4
   124A 12s00r00           4585 	lcall	__gptrget
   124D FA                 4586 	mov	r2,a
   124E BA 00 04           4587 	cjne	r2,#0x00,00103$
   1251 74 01              4588 	mov	a,#0x01
   1253 80 02              4589 	sjmp	00104$
   1255                    4590 00103$:
   1255 74 00              4591 	mov	a,#0x00
   1257                    4592 00104$:
   1257 FA                 4593 	mov	r2,a
                    1258   4594 	C$queue.c$1258$1$1 ==.
                           4595 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1258: return xReturn;
   1258 8A 82              4596 	mov	dpl,r2
   125A                    4597 00101$:
                    125A   4598 	C$queue.c$1259$1$1 ==.
                    125A   4599 	XG$xQueueIsQueueEmptyFromISR$0$0 ==.
   125A 22                 4600 	ret
                           4601 ;------------------------------------------------------------
                           4602 ;Allocation info for local variables in function 'prvIsQueueFull'
                           4603 ;------------------------------------------------------------
                           4604 ;pxQueue                   Allocated to registers r2 r3 r4 
                           4605 ;xReturn                   Allocated to registers r5 
                           4606 ;------------------------------------------------------------
                    125B   4607 	Fqueue$prvIsQueueFull$0$0 ==.
                    125B   4608 	C$queue.c$1262$1$1 ==.
                           4609 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1262: static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
                           4610 ;	-----------------------------------------
                           4611 ;	 function prvIsQueueFull
                           4612 ;	-----------------------------------------
   125B                    4613 _prvIsQueueFull:
   125B AA 82              4614 	mov	r2,dpl
   125D AB 83              4615 	mov	r3,dph
   125F AC F0              4616 	mov	r4,b
                    1261   4617 	C$queue.c$1266$1$1 ==.
                           4618 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1266: taskENTER_CRITICAL();
   1261 C0 E0 C0 A8        4619 	 push ACC push IE 
   1265 C2 AF              4620 	clr	_EA
                    1267   4621 	C$queue.c$1267$1$1 ==.
                           4622 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1267: xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   1267 74 24              4623 	mov	a,#0x24
   1269 25 02              4624 	add	a,ar2
   126B FD                 4625 	mov	r5,a
   126C 74 00              4626 	mov	a,#0x00
   126E 35 03              4627 	addc	a,ar3
   1270 FE                 4628 	mov	r6,a
   1271 8C 07              4629 	mov	ar7,r4
   1273 8D 82              4630 	mov	dpl,r5
   1275 8E 83              4631 	mov	dph,r6
   1277 8F F0              4632 	mov	b,r7
   1279 12s00r00           4633 	lcall	__gptrget
   127C FD                 4634 	mov	r5,a
   127D 74 25              4635 	mov	a,#0x25
   127F 25 02              4636 	add	a,ar2
   1281 FA                 4637 	mov	r2,a
   1282 74 00              4638 	mov	a,#0x00
   1284 35 03              4639 	addc	a,ar3
   1286 FB                 4640 	mov	r3,a
   1287 8A 82              4641 	mov	dpl,r2
   1289 8B 83              4642 	mov	dph,r3
   128B 8C F0              4643 	mov	b,r4
   128D 12s00r00           4644 	lcall	__gptrget
   1290 FA                 4645 	mov	r2,a
   1291 ED                 4646 	mov	a,r5
   1292 B5 02 04           4647 	cjne	a,ar2,00103$
   1295 74 01              4648 	mov	a,#0x01
   1297 80 02              4649 	sjmp	00104$
   1299                    4650 00103$:
   1299 74 00              4651 	mov	a,#0x00
   129B                    4652 00104$:
   129B FD                 4653 	mov	r5,a
                    129C   4654 	C$queue.c$1268$1$1 ==.
                           4655 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1268: taskEXIT_CRITICAL();
   129C D0 E0              4656 	 pop ACC 
   129E 53 E0 80           4657 	anl	_ACC,#0x80
   12A1 E5 E0              4658 	mov	a,_ACC
   12A3 42 A8              4659 	orl	_IE,a
   12A5 D0 E0              4660 	 pop ACC 
                    12A7   4661 	C$queue.c$1270$1$1 ==.
                           4662 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1270: return xReturn;
   12A7 8D 82              4663 	mov	dpl,r5
   12A9                    4664 00101$:
                    12A9   4665 	C$queue.c$1271$1$1 ==.
                    12A9   4666 	XFqueue$prvIsQueueFull$0$0 ==.
   12A9 22                 4667 	ret
                           4668 ;------------------------------------------------------------
                           4669 ;Allocation info for local variables in function 'xQueueIsQueueFullFromISR'
                           4670 ;------------------------------------------------------------
                           4671 ;pxQueue                   Allocated to registers r2 r3 r4 
                           4672 ;xReturn                   Allocated to registers r5 
                           4673 ;------------------------------------------------------------
                    12AA   4674 	G$xQueueIsQueueFullFromISR$0$0 ==.
                    12AA   4675 	C$queue.c$1274$1$1 ==.
                           4676 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1274: signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
                           4677 ;	-----------------------------------------
                           4678 ;	 function xQueueIsQueueFullFromISR
                           4679 ;	-----------------------------------------
   12AA                    4680 _xQueueIsQueueFullFromISR:
   12AA AA 82              4681 	mov	r2,dpl
   12AC AB 83              4682 	mov	r3,dph
   12AE AC F0              4683 	mov	r4,b
                    12B0   4684 	C$queue.c$1278$1$1 ==.
                           4685 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1278: xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   12B0 74 24              4686 	mov	a,#0x24
   12B2 25 02              4687 	add	a,ar2
   12B4 FD                 4688 	mov	r5,a
   12B5 74 00              4689 	mov	a,#0x00
   12B7 35 03              4690 	addc	a,ar3
   12B9 FE                 4691 	mov	r6,a
   12BA 8C 07              4692 	mov	ar7,r4
   12BC 8D 82              4693 	mov	dpl,r5
   12BE 8E 83              4694 	mov	dph,r6
   12C0 8F F0              4695 	mov	b,r7
   12C2 12s00r00           4696 	lcall	__gptrget
   12C5 FD                 4697 	mov	r5,a
   12C6 74 25              4698 	mov	a,#0x25
   12C8 25 02              4699 	add	a,ar2
   12CA FA                 4700 	mov	r2,a
   12CB 74 00              4701 	mov	a,#0x00
   12CD 35 03              4702 	addc	a,ar3
   12CF FB                 4703 	mov	r3,a
   12D0 8A 82              4704 	mov	dpl,r2
   12D2 8B 83              4705 	mov	dph,r3
   12D4 8C F0              4706 	mov	b,r4
   12D6 12s00r00           4707 	lcall	__gptrget
   12D9 FA                 4708 	mov	r2,a
   12DA ED                 4709 	mov	a,r5
   12DB B5 02 04           4710 	cjne	a,ar2,00103$
   12DE 74 01              4711 	mov	a,#0x01
   12E0 80 02              4712 	sjmp	00104$
   12E2                    4713 00103$:
   12E2 74 00              4714 	mov	a,#0x00
   12E4                    4715 00104$:
   12E4 FD                 4716 	mov	r5,a
                    12E5   4717 	C$queue.c$1280$1$1 ==.
                           4718 ;	C:\Users\anle\Desktop\R02_QUEUE_PROC2PROC\Source\queue.c:1280: return xReturn;
   12E5 8D 82              4719 	mov	dpl,r5
   12E7                    4720 00101$:
                    12E7   4721 	C$queue.c$1281$1$1 ==.
                    12E7   4722 	XG$xQueueIsQueueFullFromISR$0$0 ==.
   12E7 22                 4723 	ret
                           4724 	.area CSEG    (CODE)
                           4725 	.area CONST   (CODE)
                           4726 	.area XINIT   (CODE)
                           4727 	.area CABS    (ABS,CODE)
